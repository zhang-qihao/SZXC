{"remainingRequest":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-codemirror\\src\\codemirror.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-codemirror\\src\\codemirror.vue","mtime":499162500000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n// lib\nimport _CodeMirror from 'codemirror';\nvar CodeMirror = window.CodeMirror || _CodeMirror; // pollfill\n\nif (typeof Object.assign != 'function') {\n  Object.defineProperty(Object, 'assign', {\n    value: function value(target, varArgs) {\n      if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) {\n          for (var nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n} // export\n\n\nexport default {\n  name: 'codemirror',\n  data: function data() {\n    return {\n      content: '',\n      codemirror: null,\n      cminstance: null\n    };\n  },\n  props: {\n    code: String,\n    value: String,\n    marker: Function,\n    unseenLines: Array,\n    name: {\n      type: String,\n      default: 'codemirror'\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    merge: {\n      type: Boolean,\n      default: false\n    },\n    options: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    events: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    globalOptions: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    globalEvents: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  watch: {\n    options: {\n      deep: true,\n      handler: function handler(options) {\n        for (var key in options) {\n          this.cminstance.setOption(key, options[key]);\n        }\n      }\n    },\n    merge: function merge() {\n      this.$nextTick(this.switchMerge);\n    },\n    code: function code(newVal) {\n      this.handerCodeChange(newVal);\n    },\n    value: function value(newVal) {\n      this.handerCodeChange(newVal);\n    }\n  },\n  methods: {\n    initialize: function initialize() {\n      var _this = this;\n\n      var cmOptions = Object.assign({}, this.globalOptions, this.options);\n\n      if (this.merge) {\n        this.codemirror = CodeMirror.MergeView(this.$refs.mergeview, cmOptions);\n        this.cminstance = this.codemirror.edit;\n      } else {\n        this.codemirror = CodeMirror.fromTextArea(this.$refs.textarea, cmOptions);\n        this.cminstance = this.codemirror;\n        this.cminstance.setValue(this.code || this.value || this.content);\n      }\n\n      this.cminstance.on('change', function (cm) {\n        _this.content = cm.getValue();\n\n        if (_this.$emit) {\n          _this.$emit('input', _this.content);\n        }\n      }); // 所有有效事件（驼峰命名）+ 去重\n\n      var tmpEvents = {};\n      var allEvents = ['scroll', 'changes', 'beforeChange', 'cursorActivity', 'keyHandled', 'inputRead', 'electricInput', 'beforeSelectionChange', 'viewportChange', 'swapDoc', 'gutterClick', 'gutterContextMenu', 'focus', 'blur', 'refresh', 'optionChange', 'scrollCursorIntoView', 'update'].concat(this.events).concat(this.globalEvents).filter(function (e) {\n        return !tmpEvents[e] && (tmpEvents[e] = true);\n      }).forEach(function (event) {\n        // 循环事件，并兼容 run-time 事件命名\n        _this.cminstance.on(event, function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          // console.log('当有事件触发了', event, args)\n          _this.$emit.apply(_this, [event].concat(args));\n\n          var lowerCaseEvent = event.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n          if (lowerCaseEvent !== event) {\n            _this.$emit.apply(_this, [lowerCaseEvent].concat(args));\n          }\n        });\n      });\n      this.$emit('ready', this.codemirror);\n      this.unseenLineMarkers(); // prevents funky dynamic rendering\n\n      this.refresh();\n    },\n    refresh: function refresh() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.cminstance.refresh();\n      });\n    },\n    destroy: function destroy() {\n      // garbage cleanup\n      var element = this.cminstance.doc.cm.getWrapperElement();\n      element && element.remove && element.remove();\n    },\n    handerCodeChange: function handerCodeChange(newVal) {\n      var cm_value = this.cminstance.getValue();\n\n      if (newVal !== cm_value) {\n        var scrollInfo = this.cminstance.getScrollInfo();\n        this.cminstance.setValue(newVal);\n        this.content = newVal;\n        this.cminstance.scrollTo(scrollInfo.left, scrollInfo.top);\n      }\n\n      this.unseenLineMarkers();\n    },\n    unseenLineMarkers: function unseenLineMarkers() {\n      var _this3 = this;\n\n      if (this.unseenLines !== undefined && this.marker !== undefined) {\n        this.unseenLines.forEach(function (line) {\n          var info = _this3.cminstance.lineInfo(line);\n\n          _this3.cminstance.setGutterMarker(line, 'breakpoints', info.gutterMarkers ? null : _this3.marker());\n        });\n      }\n    },\n    switchMerge: function switchMerge() {\n      // Save current values\n      var history = this.cminstance.doc.history;\n      var cleanGeneration = this.cminstance.doc.cleanGeneration;\n      this.options.value = this.cminstance.getValue();\n      this.destroy();\n      this.initialize(); // Restore values\n\n      this.cminstance.doc.history = history;\n      this.cminstance.doc.cleanGeneration = cleanGeneration;\n    }\n  },\n  mounted: function mounted() {\n    this.initialize();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroy();\n  }\n};",{"version":3,"sources":["codemirror.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"vue-codemirror\" :class=\"{ merge }\">\n    <div ref=\"mergeview\" v-if=\"merge\"></div>\n    <textarea ref=\"textarea\" :name=\"name\" :placeholder=\"placeholder\" v-else></textarea>\n  </div>\n</template>\n\n<script>\n  // lib\n  import _CodeMirror from 'codemirror'\n  const CodeMirror = window.CodeMirror || _CodeMirror\n\n  // pollfill\n  if (typeof Object.assign != 'function') {\n    Object.defineProperty(Object, 'assign', {\n      value(target, varArgs) {\n        if (target == null) {\n          throw new TypeError('Cannot convert undefined or null to object')\n        }\n        const to = Object(target)\n        for (let index = 1; index < arguments.length; index++) {\n          const nextSource = arguments[index]\n          if (nextSource != null) {\n            for (const nextKey in nextSource) {\n              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                to[nextKey] = nextSource[nextKey]\n              }\n            }\n          }\n        }\n        return to\n      },\n      writable: true,\n      configurable: true\n    })\n  }\n\n  // export\n  export default {\n    name: 'codemirror',\n    data() {\n      return {\n        content: '',\n        codemirror: null,\n        cminstance: null\n      }\n    },\n    props: {\n      code: String,\n      value: String,\n      marker: Function,\n      unseenLines: Array,\n      name: {\n        type: String,\n        default: 'codemirror'\n      },\n      placeholder: {\n        type: String,\n        default: ''\n      },\n      merge: {\n        type: Boolean,\n        default: false\n      },\n      options: {\n        type: Object,\n        default: () => ({})\n      },\n      events: {\n        type: Array,\n        default: () => ([])\n      },\n      globalOptions: {\n        type: Object,\n        default: () => ({})\n      },\n      globalEvents: {\n        type: Array,\n        default: () => ([])\n      }\n    },\n    watch: {\n      options: {\n        deep: true,\n        handler(options) {\n          for (const key in options) {\n            this.cminstance.setOption(key, options[key])\n          }\n        }\n      },\n      merge() {\n        this.$nextTick(this.switchMerge)\n      },\n      code(newVal) {\n        this.handerCodeChange(newVal)\n      },\n      value(newVal) {\n        this.handerCodeChange(newVal)\n      },\n    },\n    methods: {\n      initialize() {\n        const cmOptions = Object.assign({}, this.globalOptions, this.options)\n        if (this.merge) {\n          this.codemirror = CodeMirror.MergeView(this.$refs.mergeview, cmOptions)\n          this.cminstance = this.codemirror.edit\n        } else {\n          this.codemirror = CodeMirror.fromTextArea(this.$refs.textarea, cmOptions)\n          this.cminstance = this.codemirror\n          this.cminstance.setValue(this.code || this.value || this.content)\n        }\n        this.cminstance.on('change', cm => {\n          this.content = cm.getValue()\n          if (this.$emit) {\n            this.$emit('input', this.content)\n          }\n        })\n\n        // 所有有效事件（驼峰命名）+ 去重\n        const tmpEvents = {}\n        const allEvents = [\n          'scroll',\n          'changes',\n          'beforeChange',\n          'cursorActivity',\n          'keyHandled',\n          'inputRead',\n          'electricInput',\n          'beforeSelectionChange',\n          'viewportChange',\n          'swapDoc',\n          'gutterClick',\n          'gutterContextMenu',\n          'focus',\n          'blur',\n          'refresh',\n          'optionChange',\n          'scrollCursorIntoView',\n          'update'\n        ]\n        .concat(this.events)\n        .concat(this.globalEvents)\n        .filter(e => (!tmpEvents[e] && (tmpEvents[e] = true)))\n        .forEach(event => {\n          // 循环事件，并兼容 run-time 事件命名\n          this.cminstance.on(event, (...args) => {\n            // console.log('当有事件触发了', event, args)\n            this.$emit(event, ...args)\n            const lowerCaseEvent = event.replace(/([A-Z])/g, '-$1').toLowerCase()\n            if (lowerCaseEvent !== event) {\n              this.$emit(lowerCaseEvent, ...args)\n            }\n          })\n        })\n\n        this.$emit('ready', this.codemirror)\n        this.unseenLineMarkers()\n\n        // prevents funky dynamic rendering\n        this.refresh()\n      },\n      refresh() {\n        this.$nextTick(() => {\n          this.cminstance.refresh()\n        })\n      },\n      destroy() {\n        // garbage cleanup\n        const element = this.cminstance.doc.cm.getWrapperElement()\n        element && element.remove && element.remove()\n      },\n      handerCodeChange(newVal) {\n        const cm_value = this.cminstance.getValue()\n        if (newVal !== cm_value) {\n          const scrollInfo = this.cminstance.getScrollInfo()\n          this.cminstance.setValue(newVal)\n          this.content = newVal\n          this.cminstance.scrollTo(scrollInfo.left, scrollInfo.top)\n        }\n        this.unseenLineMarkers()\n      },\n      unseenLineMarkers() {\n        if (this.unseenLines !== undefined && this.marker !== undefined) {\n          this.unseenLines.forEach(line => {\n            const info = this.cminstance.lineInfo(line)\n            this.cminstance.setGutterMarker(line, 'breakpoints', info.gutterMarkers ? null : this.marker())\n          })\n        }\n      },\n      switchMerge() {\n        // Save current values\n        const history = this.cminstance.doc.history\n        const cleanGeneration = this.cminstance.doc.cleanGeneration\n        this.options.value = this.cminstance.getValue()\n\n        this.destroy()\n        this.initialize()\n\n        // Restore values\n        this.cminstance.doc.history = history\n        this.cminstance.doc.cleanGeneration = cleanGeneration\n      }\n    },\n    mounted() {\n      this.initialize()\n    },\n    beforeDestroy() {\n      this.destroy()\n    }\n  }\n</script>\n"],"sourceRoot":"node_modules/vue-codemirror/src"}]}