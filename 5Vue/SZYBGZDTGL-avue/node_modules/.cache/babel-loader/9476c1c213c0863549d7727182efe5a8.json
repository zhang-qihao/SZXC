{"remainingRequest":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js!E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-element-comps\\EfCheckbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-element-comps\\EfCheckbox.vue","mtime":1640694382181},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BaseFieldTag } from \"./BaseFieldTag\";\nimport store from \"../../store\";\nexport default {\n  name: \"EfCheckbox\",\n  mixins: [BaseFieldTag],\n  //继承基础BaseFieldTag\n  props: {\n    dictionaryNo: {\n      // 数据字典编号。\n      type: String,\n      default: null\n    },\n    dictionaryGroup: {\n      //分组\n      type: String,\n      default: null\n    },\n    list: {\n      //分组\n      type: [String, Array],\n      default: null\n    },\n    listKey: {\n      //列中内容字段\n      type: String,\n      default: 'code'\n    },\n    listValue: {\n      //列中标题字段\n      type: String,\n      default: \"name\"\n    },\n    queryNo: {\n      //列中标题字段\n      type: String,\n      default: null\n    },\n    checkAllShow: {\n      type: [String, Boolean],\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      isIndeterminate: true,\n      checkAll: true,\n      compShow: false,\n      compValueList: []\n    };\n  },\n  watch: {\n    list: function list() {\n      this.getOptions();\n    },\n    value: {\n      handler: function handler(nVal) {\n        this.compValueList = nVal;\n      },\n      immediate: true\n    }\n  },\n  computed: {\n    formStyle: function formStyle() {\n      return this.$store.state.common.formStyle;\n    }\n  },\n  created: function created() {\n    if (typeof this.checkAllShow == 'boolean') {\n      this.compShow = this.checkAllShow;\n    } else {\n      if (this.checkAllShow == 'true') {\n        this.compShow = true;\n      } else {\n        this.compShow = false;\n      }\n    }\n\n    this.getOptions();\n  },\n  methods: {\n    handleCheckAllChange: function handleCheckAllChange(val) {\n      var that = this;\n      that.compValueList = [];\n\n      if (val) {\n        //true 为全选\n        if (this.$eframe.isNull(that.listKey)) {\n          this.optionLists.forEach(function (item) {\n            that.compValueList.push(item['code']);\n          });\n        } else {\n          this.optionLists.forEach(function (item) {\n            that.compValueList.push(item[that.listKey]);\n          });\n        }\n      } else {\n        that.compValueList = [];\n      } // this.compValueList = val ? this.optionLists : [];\n\n\n      this.isIndeterminate = false;\n      this.$emit('compChange', this.compValueList); // 更新 model\n\n      this.$emit('onChange', this.compValueList);\n    },\n    handleCheckedChange: function handleCheckedChange(value) {\n      var checkedCount = value.length;\n      this.checkAll = checkedCount === this.optionLists.length;\n      this.isIndeterminate = checkedCount > 0 && checkedCount < this.optionLists.length;\n      this.$emit('compChange', this.compValueList); // 更新 model\n\n      this.$emit('onChange', this.compValueList);\n    },\n\n    /**\r\n     * 选择框change事件，将所选值和所选值所在的对象回传给父组件\r\n     * @val {String} 当前选中值\r\n     **/\n    change: function change(val) {\n      var checkedCount = val.length;\n      this.checkAll = checkedCount === this.optionLists.length;\n      this.isIndeterminate = checkedCount > 0 && checkedCount < this.optionLists.length;\n      this.$emit('compChange', this.compValueList); // 更新 model\n\n      this.$emit('onChange', this.compValueList);\n    },\n\n    /**\r\n     * 获取选择项数据\r\n     */\n    getOptions: function getOptions() {\n      var _this = this;\n\n      if (this.dictionaryNo) {\n        // this.$eframe.loadDicItem({dicId: this.dictionaryNo}, (data) => {\n        //   this.optionLists = data;\n        // });\n        var form = {\n          dicId: this.dictionaryNo,\n          dicListGroup: '',\n          //字典分组\n          language: '',\n          //语种\n          catchFlag: this.compCatch //是否使用缓存，默认true\n\n        };\n        store.dispatch('LoadDicItem', form).then(function (data) {\n          _this.optionLists = data;\n        }).catch(function (msg) {\n          _this.$eframe.alertError(msg);\n        });\n        return;\n      }\n\n      if (this.list) {\n        if (this.$eframe.isArray(this.list)) {\n          // 如果父组件有下拉选项数据，则不进行数据请求\n          this.optionLists = this.list;\n        } else if (typeof this.list === \"string\") {\n          // 如果父组件有下拉选项数据，则不进行数据请求\n          this.optionLists = JSON.parse(this.list);\n        }\n\n        return;\n      }\n    },\n    setFocus: function setFocus(val) {\n      this.$refs[val].focus();\n    }\n  }\n};",{"version":3,"sources":["EfCheckbox.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <el-form-item :label=\"label\" :prop=\"name\" :rules=\"rules\" :label-width=\"compLabelWidth\" inline-message=\"true\">\r\n    <span slot=\"label\">{{ label }}</span>\r\n    <div  v-if=\"compShow\">\r\n      <el-checkbox v-model=\"checkAll\"\r\n                   :indeterminate=\"isIndeterminate\"\r\n                   @change=\"handleCheckAllChange\"\r\n                   :v-if=\"compShow\">全选\r\n      </el-checkbox>\r\n    </div>\r\n<!--    <div style=\"margin: 15px 0;\"></div>-->\r\n    <el-checkbox-group  v-model=\"compValueList\"\r\n                       @change=\"handleCheckedChange\" :disabled=\"compReadonly\">\r\n      <el-checkbox :ref=\"item.name\" v-for=\"item in optionLists\"\r\n                   :label=\"listKey ? item[listKey] : item.code\"\r\n                   :key=\"listKey ? item[listKey] : item.code\">{{ listValue ? item[listValue] : item.name }}\r\n      </el-checkbox>\r\n    </el-checkbox-group>\r\n  </el-form-item>\r\n</template>\r\n\r\n<script>\r\nimport {BaseFieldTag} from './BaseFieldTag';\r\nimport store from \"../../store\";\r\n\r\nexport default {\r\n  name: \"EfCheckbox\",\r\n  mixins: [BaseFieldTag],         //继承基础BaseFieldTag\r\n  props: {\r\n    dictionaryNo: { // 数据字典编号。\r\n      type: String,\r\n      default: null,\r\n    },\r\n    dictionaryGroup: {  //分组\r\n      type: String,\r\n      default: null,\r\n    },\r\n    list: {  //分组\r\n      type: [String, Array],\r\n      default: null,\r\n    },\r\n    listKey: {  //列中内容字段\r\n      type: String,\r\n      default: 'code',\r\n    },\r\n    listValue: {  //列中标题字段\r\n      type: String,\r\n      default: \"name\",\r\n    },\r\n    queryNo: {  //列中标题字段\r\n      type: String,\r\n      default: null,\r\n    },\r\n    checkAllShow:{\r\n      type: [String,Boolean],\r\n      default: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      isIndeterminate: true,\r\n      checkAll: true,\r\n      compShow: false,\r\n      compValueList: [],\r\n    };\r\n  },\r\n  watch: {\r\n    list() {\r\n      this.getOptions();\r\n    },\r\n    value: {\r\n      handler(nVal){\r\n        this.compValueList = nVal;\r\n      },\r\n      immediate:true,\r\n    },\r\n  },\r\n  computed:{\r\n    formStyle(){\r\n      return this.$store.state.common.formStyle;\r\n    },\r\n  },\r\n  created() {\r\n    if(typeof(this.checkAllShow)=='boolean'){\r\n      this.compShow=this.checkAllShow;\r\n    }else {\r\n      if(this.checkAllShow=='true'){\r\n        this.compShow=true;\r\n      }else {\r\n        this.compShow=false;\r\n      }\r\n    }\r\n    this.getOptions();\r\n  },\r\n  methods: {\r\n    handleCheckAllChange(val) {\r\n\r\n      let that=this;\r\n      that.compValueList=[];\r\n      if (val) {\r\n        //true 为全选\r\n        if (this.$eframe.isNull(that.listKey)) {\r\n          this.optionLists.forEach(function (item) {\r\n            that.compValueList.push(item['code']);\r\n          })\r\n        }else {\r\n          this.optionLists.forEach(function (item) {\r\n            that.compValueList.push(item[that.listKey]);\r\n          })\r\n        }\r\n      }else {\r\n        that.compValueList=[];\r\n      }\r\n      // this.compValueList = val ? this.optionLists : [];\r\n      this.isIndeterminate = false;\r\n      this.$emit('compChange', this.compValueList);    // 更新 model\r\n      this.$emit('onChange', this.compValueList);\r\n    },\r\n    handleCheckedChange(value) {\r\n      let checkedCount = value.length;\r\n      this.checkAll = checkedCount === this.optionLists.length;\r\n      this.isIndeterminate = checkedCount > 0 && checkedCount < this.optionLists.length;\r\n      this.$emit('compChange', this.compValueList);    // 更新 model\r\n      this.$emit('onChange', this.compValueList);\r\n\r\n    },\r\n\r\n    /**\r\n     * 选择框change事件，将所选值和所选值所在的对象回传给父组件\r\n     * @val {String} 当前选中值\r\n     **/\r\n    change(val) {\r\n      let checkedCount = val.length;\r\n      this.checkAll = checkedCount === this.optionLists.length;\r\n      this.isIndeterminate = checkedCount > 0 && checkedCount < this.optionLists.length;\r\n\r\n      this.$emit('compChange', this.compValueList);    // 更新 model\r\n      this.$emit('onChange', this.compValueList);\r\n    },\r\n\r\n    /**\r\n     * 获取选择项数据\r\n     */\r\n    getOptions() {\r\n      if (this.dictionaryNo) {\r\n        // this.$eframe.loadDicItem({dicId: this.dictionaryNo}, (data) => {\r\n        //   this.optionLists = data;\r\n        // });\r\n        let form={\r\n          dicId:this.dictionaryNo,\r\n          dicListGroup:'',  //字典分组\r\n          language:'', //语种\r\n          catchFlag:this.compCatch, //是否使用缓存，默认true\r\n        };\r\n        store.dispatch('LoadDicItem',form).then((data)=>{ this.optionLists = data;  }).catch((msg) => {\r\n          this.$eframe.alertError(msg);\r\n        });\r\n        return;\r\n      }\r\n      if (this.list) {\r\n        if (this.$eframe.isArray(this.list)) { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = this.list;\r\n        } else if (typeof (this.list) === \"string\") { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = JSON.parse(this.list);\r\n        }\r\n        return;\r\n      }\r\n    },\r\n    setFocus(val){\r\n      this.$refs[val].focus()\r\n    }\r\n  }\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"sourceRoot":"src/components/ef-element-comps"}]}