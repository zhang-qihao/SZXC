{"remainingRequest":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\store\\modules\\querys.js","dependencies":[{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\store\\modules\\querys.js","mtime":1657525258204},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport { setStore, getStore } from '@/util/store';\nimport eframe from \"@/util/eframe\";\nimport constData from \"../../const\";\nvar querys = {\n  state: {\n    querysMap: getStore({\n      name: 'querysMap'\n    }) || {}\n  },\n  actions: {\n    //分页查询（分时获取）\n    GetPageGrid: function GetPageGrid(_ref, _ref2) {\n      var state = _ref.state,\n          commit = _ref.commit;\n      var widgetUid = _ref2.widgetUid,\n          queryNo = _ref2.queryNo,\n          queryWindow = _ref2.queryWindow,\n          connectId = _ref2.connectId,\n          showType = _ref2.showType,\n          pageSize = _ref2.pageSize,\n          catchFlag = _ref2.catchFlag;\n      return new Promise(function (resolve, reject) {\n        if (eframe.isNull(widgetUid)) {\n          eframe.alertError(\"GetPageGrid参数错误，widgetUid不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(queryNo)) {\n          eframe.alertError(\"GetPageGrid参数错误，queryNo不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(queryWindow)) {\n          eframe.alertError(\"GetPageGrid参数错误，queryWindow不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(showType)) {\n          eframe.alertError(\"GetPageGrid参数错误，showType不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(pageSize)) {\n          eframe.alertError(\"GetPageGrid参数错误，pageSize不可以为空！\");\n          return;\n        }\n\n        var id = \"EF_PageGrid_\" + queryNo + \"_\" + queryWindow + \"_\" + showType;\n\n        if (catchFlag === true) {\n          if (state.querysMap[id]) {\n            //从缓存中取出\n            var options = state.querysMap[id];\n            var reg = new RegExp(id, \"g\");\n            options = options.replace(reg, widgetUid);\n            options = options.replace(\"pageSize: 20\", \"pageSize: \" + pageSize);\n            resolve({\n              options: options\n            });\n            return;\n          }\n        }\n\n        var url = \"/frame/component/pagegrid/pagegrid.action\";\n        var form = {\n          widgetUid: id,\n          queryNo: queryNo,\n          //查询号\n          queryWindow: queryWindow,\n          //窗口号\n          connectId: connectId,\n          //数据库链接\n          showType: showType,\n          // 0不显示check框   1 显示check框， 默认为：1\n          pageSize: 20 //每页显示条数\n\n        };\n        var actionFunName = \"config\";\n\n        var callbackFun = function callbackFun(data) {\n          if (data.options) {\n            commit('ADD_QUERY', {\n              id: id,\n              queryCfg: data.options\n            });\n            var _options = data.options;\n\n            var _reg = new RegExp(id, \"g\");\n\n            _options = _options.replace(_reg, widgetUid);\n            _options = _options.replace(\"pageSize: 20\", \"pageSize: \" + pageSize);\n            resolve({\n              options: _options\n            });\n          }\n        };\n\n        var errorFun = function errorFun(data) {\n          reject(\"未找到查询配置信息 queryNo:\" + queryNo + \" queryWindow:\" + queryWindow);\n        }; //2022-03-18 分时取查询配置中心配置记录，调整为实时获取\n        // eframe.submitTargetForm({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\n        //2022-03-18 实时获取查询配置（测试）\n\n\n        eframe.submitTargetFormSync({\n          url: url,\n          form: form,\n          actionFunName: actionFunName,\n          succFun: callbackFun,\n          failFun: errorFun\n        });\n      });\n    },\n    //查询编辑（分时获取）\n    GetGridEditor: function GetGridEditor(_ref3, _ref4) {\n      var state = _ref3.state,\n          commit = _ref3.commit;\n      var widgetUid = _ref4.widgetUid,\n          queryNo = _ref4.queryNo,\n          queryWindow = _ref4.queryWindow,\n          connectId = _ref4.connectId,\n          catchFlag = _ref4.catchFlag;\n      return new Promise(function (resolve, reject) {\n        if (eframe.isNull(widgetUid)) {\n          eframe.alertError(\"GetGridEditor参数错误，widgetUid不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(queryNo)) {\n          eframe.alertError(\"GetGridEditor参数错误，queryNo不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(queryWindow)) {\n          eframe.alertError(\"GetGridEditor参数错误，queryWindow不可以为空！\");\n          return;\n        }\n\n        var id = \"EF_GridEditor_\" + queryNo + \"_\" + queryWindow;\n\n        if (catchFlag === true) {\n          if (state.querysMap[id]) {\n            //从缓存中取出\n            var options = state.querysMap[id];\n            var reg = new RegExp(id, \"g\");\n            options = options.replace(reg, widgetUid);\n            resolve({\n              options: options\n            });\n            return;\n          }\n        }\n\n        var url = \"/frame/component/pagegrid/grideditor.action\";\n        var form = {\n          widgetUid: id,\n          queryNo: queryNo,\n          //查询号\n          queryWindow: queryWindow,\n          //窗口号\n          connectId: connectId //数据库链接\n\n        };\n        var actionFunName = \"config\";\n\n        var callbackFun = function callbackFun(data) {\n          if (data.options) {\n            commit('ADD_QUERY', {\n              id: id,\n              queryCfg: data.options\n            });\n            var _options2 = data.options;\n\n            var _reg2 = new RegExp(id, \"g\");\n\n            _options2 = _options2.replace(_reg2, widgetUid);\n            resolve({\n              options: _options2\n            });\n          }\n        };\n\n        var errorFun = function errorFun(data) {\n          reject(\"未找到查询配置信息 queryNo:\" + queryNo + \" queryWindow:\" + queryWindow);\n        }; //2022-03-18 分时取查询配置中心配置记录，调整为实时获取\n        // eframe.submitTargetForm({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\n        //2022-03-18 实时获取查询配置（测试）\n\n\n        eframe.submitTargetFormSync({\n          url: url,\n          form: form,\n          actionFunName: actionFunName,\n          succFun: callbackFun,\n          failFun: errorFun\n        });\n      });\n    },\n    //树Tree查询（分时获取）\n    GetTree: function GetTree(_ref5, _ref6) {\n      var state = _ref5.state,\n          commit = _ref5.commit;\n      var widgetUid = _ref6.widgetUid,\n          queryNo = _ref6.queryNo,\n          queryWindow = _ref6.queryWindow,\n          connectId = _ref6.connectId,\n          showType = _ref6.showType,\n          catchFlag = _ref6.catchFlag;\n      return new Promise(function (resolve, reject) {\n        if (eframe.isNull(widgetUid)) {\n          eframe.alertError(\"GetTree参数错误，widgetUid不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(queryNo)) {\n          eframe.alertError(\"GetTree参数错误，queryNo不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(queryWindow)) {\n          eframe.alertError(\"GetTree参数错误，queryWindow不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(showType)) {\n          eframe.alertError(\"GetTree参数错误，showType不可以为空！\");\n          return;\n        }\n\n        var id = \"EF_Tree_\" + queryNo + \"_\" + queryWindow + \"_\" + showType;\n\n        if (catchFlag === true) {\n          if (state.querysMap[id]) {\n            //从缓存中取出\n            var options = state.querysMap[id];\n            var reg = new RegExp(id, \"g\");\n            options = options.replace(reg, widgetUid);\n            resolve({\n              options: options\n            });\n            return;\n          }\n        }\n\n        var url = \"/frame/component/tree/tree.action\";\n        var form = {\n          widgetUid: id,\n          queryNo: queryNo,\n          //查询号\n          queryWindow: queryWindow,\n          //窗口号\n          connectId: connectId,\n          //数据库链接\n          showType: showType // 0不显示check框   1 显示check框， 默认为：1\n\n        };\n        var actionFunName = \"config\";\n\n        var callbackFun = function callbackFun(data) {\n          if (data.options) {\n            commit('ADD_QUERY', {\n              id: id,\n              queryCfg: data.options\n            });\n            var _options3 = data.options;\n\n            var _reg3 = new RegExp(id, \"g\");\n\n            _options3 = _options3.replace(_reg3, widgetUid);\n            resolve({\n              options: _options3\n            });\n          }\n        };\n\n        var errorFun = function errorFun(data) {\n          reject(\"未找到查询配置信息 queryNo:\" + queryNo + \" queryWindow:\" + queryWindow);\n        }; //2022-03-18 分时取查询配置中心配置记录，调整为实时获取\n        // eframe.submitTargetForm({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\n        //2022-03-18 实时获取查询配置（测试）\n\n\n        eframe.submitTargetFormSync({\n          url: url,\n          form: form,\n          actionFunName: actionFunName,\n          succFun: callbackFun,\n          failFun: errorFun\n        });\n      });\n    },\n    //树状Grid查询（分时获取）\n    GetTreeGrid: function GetTreeGrid(_ref7, _ref8) {\n      var state = _ref7.state,\n          commit = _ref7.commit;\n      var widgetUid = _ref8.widgetUid,\n          queryNo = _ref8.queryNo,\n          queryWindow = _ref8.queryWindow,\n          connectId = _ref8.connectId,\n          showType = _ref8.showType,\n          catchFlag = _ref8.catchFlag;\n      return new Promise(function (resolve, reject) {\n        if (eframe.isNull(widgetUid)) {\n          eframe.alertError(\"GetTreeGrid参数错误，widgetUid不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(queryNo)) {\n          eframe.alertError(\"GetTreeGrid参数错误，queryNo不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(queryWindow)) {\n          eframe.alertError(\"GetTreeGrid参数错误，queryWindow不可以为空！\");\n          return;\n        }\n\n        if (eframe.isNull(showType)) {\n          eframe.alertError(\"GetTreeGrid参数错误，showType不可以为空！\");\n          return;\n        }\n\n        var id = \"EF_TreeGrid_\" + queryNo + \"_\" + queryWindow + \"_\" + showType;\n\n        if (catchFlag === true) {\n          if (state.querysMap[id]) {\n            //从缓存中取出\n            var options = state.querysMap[id];\n            var reg = new RegExp(id, \"g\");\n            options = options.replace(reg, widgetUid);\n            resolve({\n              options: options\n            });\n            return;\n          }\n        }\n\n        var url = \"/frame/component/treegrid/treegrid.action\";\n        var form = {\n          widgetUid: id,\n          queryNo: queryNo,\n          //查询号\n          queryWindow: queryWindow,\n          //窗口号\n          connectId: connectId,\n          //数据库链接\n          showType: showType // 0不显示check框   1 显示check框， 默认为：1\n\n        };\n        var actionFunName = \"config\";\n\n        var callbackFun = function callbackFun(data) {\n          if (data.options) {\n            commit('ADD_QUERY', {\n              id: id,\n              queryCfg: data.options\n            });\n            var _options4 = data.options;\n\n            var _reg4 = new RegExp(id, \"g\");\n\n            _options4 = _options4.replace(_reg4, widgetUid);\n            resolve({\n              options: _options4\n            });\n          }\n        };\n\n        var errorFun = function errorFun(data) {\n          reject(\"未找到查询配置信息 queryNo:\" + queryNo + \" queryWindow:\" + queryWindow);\n        }; //2022-03-18 分时取查询配置中心配置记录，调整为实时获取\n        // eframe.submitTargetForm({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\n        //2022-03-18 实时获取查询配置（测试）\n\n\n        eframe.submitTargetFormSync({\n          url: url,\n          form: form,\n          actionFunName: actionFunName,\n          succFun: callbackFun,\n          failFun: errorFun\n        });\n      });\n    }\n  },\n  mutations: {\n    ADD_QUERY: function ADD_QUERY(state, _ref9) {\n      var id = _ref9.id,\n          queryCfg = _ref9.queryCfg;\n      state.querysMap[id] = queryCfg;\n      setStore({\n        name: 'querysMap',\n        content: state.querysMap\n      });\n    },\n    CLEAR_ALL_QUERYS: function CLEAR_ALL_QUERYS(state) {\n      state.querysMap = {};\n      setStore({\n        name: 'querysMap',\n        content: state.querysMap\n      });\n    },\n    CLEAR_QUERY: function CLEAR_QUERY(state, _ref10) {\n      var id = _ref10.id;\n      delete state.querysMap[id];\n      setStore({\n        name: 'querysMap',\n        content: state.querysMap\n      });\n    }\n  }\n};\nexport default querys;",{"version":3,"sources":["C:/Users/10415/Desktop/0工程/5Vue/SZYBGZDTGL-avue/src/store/modules/querys.js"],"names":["setStore","getStore","eframe","constData","querys","state","querysMap","name","actions","GetPageGrid","commit","widgetUid","queryNo","queryWindow","connectId","showType","pageSize","catchFlag","Promise","resolve","reject","isNull","alertError","id","options","reg","RegExp","replace","url","form","actionFunName","callbackFun","data","queryCfg","errorFun","submitTargetFormSync","succFun","failFun","GetGridEditor","GetTree","GetTreeGrid","mutations","ADD_QUERY","content","CLEAR_ALL_QUERYS","CLEAR_QUERY"],"mappings":"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","sourcesContent":["import { setStore, getStore } from '@/util/store'\r\nimport eframe from \"@/util/eframe\";\r\nimport constData from \"../../const\";\r\n\r\nconst querys = {\r\n    state: {\r\n        querysMap: getStore({ name: 'querysMap' })||{},\r\n    },\r\n    actions: {\r\n\r\n        //分页查询（分时获取）\r\n        GetPageGrid ({ state,commit }, { widgetUid, queryNo, queryWindow,connectId, showType, pageSize, catchFlag}) {\r\n            return new Promise((resolve, reject)  => {\r\n                if(eframe.isNull(widgetUid)){\r\n                    eframe.alertError(\"GetPageGrid参数错误，widgetUid不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(queryNo)){\r\n                    eframe.alertError(\"GetPageGrid参数错误，queryNo不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(queryWindow)){\r\n                    eframe.alertError(\"GetPageGrid参数错误，queryWindow不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(showType)){\r\n                    eframe.alertError(\"GetPageGrid参数错误，showType不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(pageSize)){\r\n                    eframe.alertError(\"GetPageGrid参数错误，pageSize不可以为空！\");\r\n                    return;\r\n                }\r\n                let id = \"EF_PageGrid_\"+queryNo+\"_\"+queryWindow+\"_\"+showType;\r\n                if(catchFlag===true) {\r\n                    if (state.querysMap[id]) { //从缓存中取出\r\n                        let options = state.querysMap[id];\r\n                        let reg = new RegExp(id, \"g\");\r\n                        options = options.replace(reg, widgetUid);\r\n                        options = options.replace(\"pageSize: 20\", \"pageSize: \" + pageSize);\r\n                        resolve({options: options});\r\n                        return;\r\n                    }\r\n                }\r\n                let url=\"/frame/component/pagegrid/pagegrid.action\";\r\n                let form={\r\n                    widgetUid:id,\r\n                    queryNo:queryNo,  //查询号\r\n                    queryWindow:queryWindow, //窗口号\r\n                    connectId:connectId,//数据库链接\r\n                    showType:showType, // 0不显示check框   1 显示check框， 默认为：1\r\n                    pageSize:20, //每页显示条数\r\n                };\r\n                let actionFunName=\"config\";\r\n                let callbackFun = function (data) {\r\n                    if(data.options) {\r\n                        commit('ADD_QUERY', {id:id,queryCfg:data.options});\r\n                        let options = data.options;\r\n                        let reg = new RegExp( id , \"g\" );\r\n                        options = options.replace( reg , widgetUid );\r\n                        options = options.replace( \"pageSize: 20\" , \"pageSize: \"+pageSize );\r\n                        resolve( {options:options} );\r\n                    }\r\n                };\r\n                let errorFun = function (data) {\r\n                    reject(\"未找到查询配置信息 queryNo:\"+queryNo+\" queryWindow:\"+queryWindow);\r\n                };\r\n\r\n                //2022-03-18 分时取查询配置中心配置记录，调整为实时获取\r\n                // eframe.submitTargetForm({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\r\n\r\n                //2022-03-18 实时获取查询配置（测试）\r\n                eframe.submitTargetFormSync({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\r\n\r\n\r\n\r\n            })\r\n        },\r\n\r\n\r\n        //查询编辑（分时获取）\r\n        GetGridEditor ({ state,commit }, { widgetUid, queryNo, queryWindow,connectId, catchFlag}) {\r\n            return new Promise((resolve, reject)  => {\r\n                if(eframe.isNull(widgetUid)){\r\n                    eframe.alertError(\"GetGridEditor参数错误，widgetUid不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(queryNo)){\r\n                    eframe.alertError(\"GetGridEditor参数错误，queryNo不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(queryWindow)){\r\n                    eframe.alertError(\"GetGridEditor参数错误，queryWindow不可以为空！\");\r\n                    return;\r\n                }\r\n\r\n                let id = \"EF_GridEditor_\"+queryNo+\"_\"+queryWindow;\r\n                if(catchFlag===true) {\r\n                    if (state.querysMap[id]) { //从缓存中取出\r\n                        let options = state.querysMap[id];\r\n                        let reg = new RegExp(id, \"g\");\r\n                        options = options.replace(reg, widgetUid);\r\n                        resolve({options: options});\r\n                        return;\r\n                    }\r\n                }\r\n                let url=\"/frame/component/pagegrid/grideditor.action\";\r\n                let form={\r\n                    widgetUid:id,\r\n                    queryNo:queryNo,  //查询号\r\n                    queryWindow:queryWindow, //窗口号\r\n                    connectId:connectId,//数据库链接\r\n                };\r\n                let actionFunName=\"config\";\r\n                let callbackFun = function (data) {\r\n                    if(data.options) {\r\n                        commit('ADD_QUERY', {id:id,queryCfg:data.options});\r\n                        let options = data.options;\r\n                        let reg = new RegExp( id , \"g\" );\r\n                        options = options.replace( reg , widgetUid );\r\n                        resolve( {options:options} );\r\n                    }\r\n                };\r\n                let errorFun = function (data) {\r\n                    reject(\"未找到查询配置信息 queryNo:\"+queryNo+\" queryWindow:\"+queryWindow);\r\n                };\r\n\r\n\r\n                //2022-03-18 分时取查询配置中心配置记录，调整为实时获取\r\n                // eframe.submitTargetForm({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\r\n\r\n                //2022-03-18 实时获取查询配置（测试）\r\n                eframe.submitTargetFormSync({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\r\n\r\n            })\r\n        },\r\n\r\n\r\n\r\n        //树Tree查询（分时获取）\r\n        GetTree ({ state,commit }, { widgetUid, queryNo, queryWindow, connectId,showType, catchFlag}) {\r\n            return new Promise((resolve, reject)  => {\r\n                if(eframe.isNull(widgetUid)){\r\n                    eframe.alertError(\"GetTree参数错误，widgetUid不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(queryNo)){\r\n                    eframe.alertError(\"GetTree参数错误，queryNo不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(queryWindow)){\r\n                    eframe.alertError(\"GetTree参数错误，queryWindow不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(showType)){\r\n                    eframe.alertError(\"GetTree参数错误，showType不可以为空！\");\r\n                    return;\r\n                }\r\n                let id = \"EF_Tree_\"+queryNo+\"_\"+queryWindow+\"_\"+showType;\r\n                if(catchFlag===true) {\r\n                    if (state.querysMap[id]) { //从缓存中取出\r\n                        let options = state.querysMap[id];\r\n                        let reg = new RegExp(id, \"g\");\r\n                        options = options.replace(reg, widgetUid);\r\n                        resolve({options: options});\r\n                        return;\r\n                    }\r\n                }\r\n                let url=\"/frame/component/tree/tree.action\";\r\n                let form={\r\n                    widgetUid:id,\r\n                    queryNo:queryNo,  //查询号\r\n                    queryWindow:queryWindow, //窗口号\r\n                    connectId:connectId,//数据库链接\r\n                    showType:showType, // 0不显示check框   1 显示check框， 默认为：1\r\n                };\r\n                let actionFunName=\"config\";\r\n                let callbackFun = function (data) {\r\n                    if(data.options) {\r\n                        commit('ADD_QUERY', {id:id,queryCfg:data.options});\r\n                        let options = data.options;\r\n                        let reg = new RegExp( id , \"g\" );\r\n                        options = options.replace( reg , widgetUid );\r\n                        resolve( {options:options} );\r\n                    }\r\n                };\r\n                let errorFun = function (data) {\r\n                    reject(\"未找到查询配置信息 queryNo:\"+queryNo+\" queryWindow:\"+queryWindow);\r\n                };\r\n\r\n                //2022-03-18 分时取查询配置中心配置记录，调整为实时获取\r\n                // eframe.submitTargetForm({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\r\n\r\n                //2022-03-18 实时获取查询配置（测试）\r\n                eframe.submitTargetFormSync({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\r\n\r\n            })\r\n        },\r\n\r\n\r\n\r\n\r\n        //树状Grid查询（分时获取）\r\n        GetTreeGrid ({ state,commit }, { widgetUid, queryNo, queryWindow, connectId,showType, catchFlag}) {\r\n            return new Promise((resolve, reject)  => {\r\n                if(eframe.isNull(widgetUid)){\r\n                    eframe.alertError(\"GetTreeGrid参数错误，widgetUid不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(queryNo)){\r\n                    eframe.alertError(\"GetTreeGrid参数错误，queryNo不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(queryWindow)){\r\n                    eframe.alertError(\"GetTreeGrid参数错误，queryWindow不可以为空！\");\r\n                    return;\r\n                }\r\n                if(eframe.isNull(showType)){\r\n                    eframe.alertError(\"GetTreeGrid参数错误，showType不可以为空！\");\r\n                    return;\r\n                }\r\n                let id = \"EF_TreeGrid_\"+queryNo+\"_\"+queryWindow+\"_\"+showType;\r\n                if(catchFlag===true) {\r\n                    if (state.querysMap[id]) { //从缓存中取出\r\n                        let options = state.querysMap[id];\r\n                        let reg = new RegExp(id, \"g\");\r\n                        options = options.replace(reg, widgetUid);\r\n                        resolve({options: options});\r\n                        return;\r\n                    }\r\n                }\r\n                let url=\"/frame/component/treegrid/treegrid.action\";\r\n                let form={\r\n                    widgetUid:id,\r\n                    queryNo:queryNo,  //查询号\r\n                    queryWindow:queryWindow, //窗口号\r\n                    connectId:connectId,//数据库链接\r\n                    showType:showType, // 0不显示check框   1 显示check框， 默认为：1\r\n                };\r\n                let actionFunName=\"config\";\r\n                let callbackFun = function (data) {\r\n                    if(data.options) {\r\n                        commit('ADD_QUERY', {id:id,queryCfg:data.options});\r\n                        let options = data.options;\r\n                        let reg = new RegExp( id , \"g\" );\r\n                        options = options.replace( reg , widgetUid );\r\n                        resolve( {options:options} );\r\n                    }\r\n                };\r\n                let errorFun = function (data) {\r\n                    reject(\"未找到查询配置信息 queryNo:\"+queryNo+\" queryWindow:\"+queryWindow);\r\n                };\r\n\r\n                //2022-03-18 分时取查询配置中心配置记录，调整为实时获取\r\n                // eframe.submitTargetForm({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\r\n\r\n                //2022-03-18 实时获取查询配置（测试）\r\n                eframe.submitTargetFormSync({url:url,form:form,actionFunName:actionFunName,succFun:callbackFun,failFun:errorFun});\r\n\r\n            })\r\n        },\r\n\r\n\r\n\r\n\r\n    },\r\n    mutations: {\r\n\r\n        ADD_QUERY: (state, { id, queryCfg }) => {\r\n            state.querysMap[id]=queryCfg;\r\n            setStore({ name: 'querysMap', content: state.querysMap })\r\n        },\r\n\r\n        CLEAR_ALL_QUERYS: (state) => {\r\n            state.querysMap = {};\r\n            setStore({ name: 'querysMap', content: state.querysMap })\r\n        },\r\n\r\n        CLEAR_QUERY: (state,{ id }) => {\r\n            delete state.querysMap[id];\r\n            setStore({ name: 'querysMap', content: state.querysMap })\r\n        },\r\n    }\r\n\r\n};\r\n\r\nexport default querys;"]}]}