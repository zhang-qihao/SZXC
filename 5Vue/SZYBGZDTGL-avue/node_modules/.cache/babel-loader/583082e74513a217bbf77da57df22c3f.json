{"remainingRequest":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-element-comps\\EfShowValue.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-element-comps\\EfShowValue.vue","mtime":1656319319515},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nimport { BaseFieldTag } from \"./BaseFieldTag\";\nimport store from \"../../store\";\nexport default {\n  name: \"EfShowValue\",\n  mixins: [BaseFieldTag],\n  //继承基础BaseFieldTag\n  props: {\n    dictionaryNo: {\n      // 数据字典编号。\n      type: String,\n      default: null\n    },\n    list: {\n      //分组\n      type: [String, Array],\n      default: null\n    },\n    listKey: {\n      //列中内容字段\n      type: String,\n      default: 'code'\n    },\n    listValue: {\n      //列中标题字段\n      type: String,\n      default: \"name\"\n    },\n    queryNo: {\n      //列中标题字段\n      type: String,\n      default: null\n    },\n    multiple: {\n      // 是否多选，默认false，非必传。\n      type: [String, Boolean],\n      default: false\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  computed: {\n    appStyle: function appStyle() {\n      return this.$store.state.common.appStyle;\n    }\n  },\n  watch: {\n    value: function value() {\n      this.getOptions();\n    }\n  },\n  created: function created() {\n    this.getOptions();\n  },\n  methods: {\n    /**\r\n     * 获取下拉框的选择项数据\r\n     */\n    getOptions: function getOptions() {\n      var _this = this;\n\n      if (this.dictionaryNo) {\n        //this.$eframe.loadDicItem( {dicId:this.dictionaryNo},(data)=>{ this.optionLists = data;  } );\n        var form = {\n          dicId: this.dictionaryNo,\n          dicListGroup: '',\n          //字典分组\n          language: '',\n          //语种\n          catchFlag: this.compCatch //是否使用缓存，默认true\n\n        };\n        store.dispatch('LoadDicItem', form).then(function (data) {\n          _this.optionLists = data;\n          _this.compValue = _this.findValue(_this.optionLists);\n        }).catch(function (msg) {\n          _this.$eframe.alertError(msg);\n        });\n        return;\n      }\n\n      if (this.list) {\n        if (this.$eframe.isArray(this.list)) {\n          // 如果父组件有下拉选项数据，则不进行数据请求\n          this.optionLists = this.list;\n          this.compValue = this.findValue(this.optionLists);\n        } else if (typeof this.list === \"string\") {\n          // 如果父组件有下拉选项数据，则不进行数据请求\n          this.optionLists = JSON.parse(this.list);\n          this.compValue = this.findValue(this.optionLists);\n        }\n\n        return;\n      }\n    },\n    findValue: function findValue(list) {\n      for (var k in list) {// if (list[k].[this.listKey]===this.value){\n        //   return list[k].[this.listValue];\n        // }\n      }\n\n      return this.value;\n    }\n  }\n};",{"version":3,"sources":["EfShowValue.vue"],"names":[],"mappings":";;;;;;AAOA,SAAA,YAAA;AACA,OAAA,KAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,MAAA,EAAA,CAAA,YAAA,CAFA;AAEA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,YAAA,EAAA;AAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,IAAA,EAAA;AAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,KAAA,CADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,OAAA,EAAA;AAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KATA;AAaA,IAAA,SAAA,EAAA;AAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAbA;AAiBA,IAAA,OAAA,EAAA;AAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAjBA;AAqBA,IAAA,QAAA,EAAA;AAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,OAAA,CADA;AAEA,MAAA,OAAA,EAAA;AAFA;AArBA,GAHA;AA8BA,EAAA,IA9BA,kBA8BA;AACA,WAAA,EAAA;AACA,GAhCA;AAiCA,EAAA,QAAA,EAAA;AACA,IAAA,QADA,sBACA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,QAAA;AACA;AAHA,GAjCA;AAsCA,EAAA,KAAA,EAAA;AACA,IAAA,KADA,mBACA;AACA,WAAA,UAAA;AACA;AAHA,GAtCA;AA2CA,EAAA,OA3CA,qBA2CA;AACA,SAAA,UAAA;AACA,GA7CA;AA8CA,EAAA,OAAA,EAAA;AACA;AACA;AACA;AACA,IAAA,UAJA,wBAIA;AAAA;;AACA,UAAA,KAAA,YAAA,EAAA;AACA;AACA,YAAA,IAAA,GAAA;AACA,UAAA,KAAA,EAAA,KAAA,YADA;AAEA,UAAA,YAAA,EAAA,EAFA;AAEA;AACA,UAAA,QAAA,EAAA,EAHA;AAGA;AACA,UAAA,SAAA,EAAA,KAAA,SAJA,CAIA;;AAJA,SAAA;AAMA,QAAA,KAAA,CAAA,QAAA,CAAA,aAAA,EAAA,IAAA,EACA,IADA,CACA,UAAA,IAAA,EAAA;AACA,UAAA,KAAA,CAAA,WAAA,GAAA,IAAA;AACA,UAAA,KAAA,CAAA,SAAA,GAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,WAAA,CAAA;AACA,SAJA,EAKA,KALA,CAKA,UAAA,GAAA,EAAA;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,UAAA,CAAA,GAAA;AACA,SAPA;AAQA;AACA;;AACA,UAAA,KAAA,IAAA,EAAA;AACA,YAAA,KAAA,OAAA,CAAA,OAAA,CAAA,KAAA,IAAA,CAAA,EAAA;AAAA;AACA,eAAA,WAAA,GAAA,KAAA,IAAA;AACA,eAAA,SAAA,GAAA,KAAA,SAAA,CAAA,KAAA,WAAA,CAAA;AACA,SAHA,MAGA,IAAA,OAAA,KAAA,IAAA,KAAA,QAAA,EAAA;AAAA;AACA,eAAA,WAAA,GAAA,IAAA,CAAA,KAAA,CAAA,KAAA,IAAA,CAAA;AACA,eAAA,SAAA,GAAA,KAAA,SAAA,CAAA,KAAA,WAAA,CAAA;AACA;;AACA;AACA;AACA,KAjCA;AAkCA,IAAA,SAlCA,qBAkCA,IAlCA,EAkCA;AACA,WAAA,IAAA,CAAA,IAAA,IAAA,EAAA,CACA;AACA;AACA;AACA;;AACA,aAAA,KAAA,KAAA;AACA;AAzCA;AA9CA,CAAA","sourcesContent":["<template>\r\n  <el-form-item :label=\"label\" :prop=\"name\" :label-width=\"compLabelWidth\" :rules=\"rules\" inline-message=\"true\">\r\n    <span :style=\"appStyle\">{{compValue}}</span>\r\n  </el-form-item>\r\n</template>\r\n\r\n<script>\r\nimport {BaseFieldTag} from \"./BaseFieldTag\";\r\nimport store from \"../../store\";\r\n\r\nexport default {\r\n  name: \"EfShowValue\",\r\n  mixins: [BaseFieldTag],         //继承基础BaseFieldTag\r\n  props: {\r\n    dictionaryNo: { // 数据字典编号。\r\n      type: String,\r\n      default: null,\r\n    },\r\n    list: {  //分组\r\n      type: [String, Array],\r\n      default: null,\r\n    },\r\n    listKey: {  //列中内容字段\r\n      type: String,\r\n      default: 'code',\r\n    },\r\n    listValue: {  //列中标题字段\r\n      type: String,\r\n      default: \"name\",\r\n    },\r\n    queryNo: {  //列中标题字段\r\n      type: String,\r\n      default: null,\r\n    },\r\n    multiple: { // 是否多选，默认false，非必传。\r\n      type: [String, Boolean],\r\n      default: false,\r\n    },\r\n  },\r\n\r\n  data() {\r\n    return {};\r\n  },\r\n  computed:{\r\n    appStyle(){\r\n      return this.$store.state.common.appStyle\r\n    }\r\n  },\r\n  watch: {\r\n    value() {\r\n      this.getOptions();\r\n    }\r\n  },\r\n  created() {\r\n    this.getOptions();\r\n  },\r\n  methods: {\r\n    /**\r\n     * 获取下拉框的选择项数据\r\n     */\r\n    getOptions() {\r\n      if (this.dictionaryNo) {\r\n        //this.$eframe.loadDicItem( {dicId:this.dictionaryNo},(data)=>{ this.optionLists = data;  } );\r\n        let form = {\r\n          dicId: this.dictionaryNo,\r\n          dicListGroup: '',  //字典分组\r\n          language: '', //语种\r\n          catchFlag: this.compCatch, //是否使用缓存，默认true\r\n        };\r\n        store.dispatch('LoadDicItem', form)\r\n            .then((data) => {\r\n              this.optionLists = data;\r\n              this.compValue=this.findValue(this.optionLists)\r\n            })\r\n            .catch((msg) => {\r\n              this.$eframe.alertError(msg);\r\n            });\r\n        return;\r\n      }\r\n      if (this.list) {\r\n        if (this.$eframe.isArray(this.list)) { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = this.list;\r\n          this.compValue=this.findValue(this.optionLists)\r\n        } else if (typeof (this.list) === \"string\") { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = JSON.parse(this.list);\r\n          this.compValue=this.findValue(this.optionLists)\r\n        }\r\n        return;\r\n      }\r\n    },\r\n    findValue(list) {\r\n      for (let k in list){\r\n        // if (list[k].[this.listKey]===this.value){\r\n        //   return list[k].[this.listValue];\r\n        // }\r\n      }\r\n      return this.value;\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"sourceRoot":"src/components/ef-element-comps"}]}