{"remainingRequest":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-element-comps\\EfRadio.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-element-comps\\EfRadio.vue","mtime":1640694382233},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {BaseFieldTag} from './BaseFieldTag';\r\nimport store from \"../../store\";\r\nexport default {\r\n  name: \"EfRadio\",\r\n  mixins: [BaseFieldTag],         //继承基础BaseFieldTag\r\n  props: {\r\n    dictionaryNo: { // 数据字典编号。\r\n      type: String,\r\n      default: null,\r\n    },\r\n    dictionaryGroup: {  //分组\r\n      type: String,\r\n      default: null,\r\n    },\r\n    list: {  //分组\r\n      type: [String, Array],\r\n      default: null,\r\n    },\r\n    listKey: {  //列中内容字段\r\n      type: String,\r\n      default: 'code',\r\n    },\r\n    listValue: {  //列中标题字段\r\n      type: String,\r\n      default: \"name\",\r\n    },\r\n    queryNo: {  //列中标题字段\r\n      type: String,\r\n      default: null,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n    };\r\n  },\r\n  watch: {\r\n    value: {//深度监听，可监听到对象、数组的变化\r\n      immediate: true,\r\n      handler(val) {\r\n        this.compValue=val;\r\n      },\r\n      // deep: true //true 深度监听\r\n    },\r\n  },\r\n  computed:{\r\n    formStyle(){\r\n      return this.$store.state.common.formStyle\r\n    },\r\n  },\r\n  created(){\r\n    this.getOptions();\r\n  },\r\n  methods: {\r\n    /**\r\n     * 选择框change事件，将所选值和所选值所在的对象回传给父组件\r\n     * @val {String} 当前选中值\r\n     **/\r\n    change(val) {\r\n      this.$emit('compChange', val);    // 更新 model\r\n      this.$emit('onChange', val);\r\n    },\r\n\r\n    /**\r\n     * 获取选择项数据\r\n     */\r\n    getOptions() {\r\n      if(this.dictionaryNo){\r\n        //this.$eframe.loadDicItem( {dicId:this.dictionaryNo},(data)=>{ this.optionLists = data;  } );\r\n        let form={\r\n          dicId:this.dictionaryNo,\r\n          dicListGroup:'',  //字典分组\r\n          language:'', //语种\r\n          catchFlag:this.compCatch, //是否使用缓存，默认true\r\n        };\r\n        store.dispatch('LoadDicItem',form).then((data)=>{ this.optionLists = data;  }).catch((msg) => {\r\n          this.$eframe.alertError(msg);\r\n        });\r\n        return;\r\n      }\r\n      if(this.list) {\r\n        if (this.$eframe.isArray(this.list)) { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = this.list;\r\n        } else if (typeof (this.list) === \"string\") { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = JSON.parse(this.list);\r\n        }\r\n        return;\r\n      }\r\n    },\r\n  }\r\n}\r\n",{"version":3,"sources":["EfRadio.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EfRadio.vue","sourceRoot":"src/components/ef-element-comps","sourcesContent":["<template>\r\n  <el-form-item  :label=\"label\" :prop=\"name\" :rules=\"rules\" :label-width=\"compLabelWidth\" inline-message=\"true\">\r\n    <span slot=\"label\">{{ label }}</span>\r\n    <el-radio-group v-model=\"compValue\">\r\n      <el-radio  v-for=\"item in optionLists\"\r\n                 :key=\"listKey ? item[listKey] : item.code\"\r\n                 :label=\"listKey ? item[listKey] : item.code\"\r\n                 @change=\"change\"\r\n                 :disabled=\"compReadonly\">\r\n        {{ listValue ? item[listValue] : item.name }}\r\n      </el-radio>\r\n    </el-radio-group>\r\n  </el-form-item>\r\n</template>\r\n\r\n<script>\r\nimport {BaseFieldTag} from './BaseFieldTag';\r\nimport store from \"../../store\";\r\nexport default {\r\n  name: \"EfRadio\",\r\n  mixins: [BaseFieldTag],         //继承基础BaseFieldTag\r\n  props: {\r\n    dictionaryNo: { // 数据字典编号。\r\n      type: String,\r\n      default: null,\r\n    },\r\n    dictionaryGroup: {  //分组\r\n      type: String,\r\n      default: null,\r\n    },\r\n    list: {  //分组\r\n      type: [String, Array],\r\n      default: null,\r\n    },\r\n    listKey: {  //列中内容字段\r\n      type: String,\r\n      default: 'code',\r\n    },\r\n    listValue: {  //列中标题字段\r\n      type: String,\r\n      default: \"name\",\r\n    },\r\n    queryNo: {  //列中标题字段\r\n      type: String,\r\n      default: null,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n    };\r\n  },\r\n  watch: {\r\n    value: {//深度监听，可监听到对象、数组的变化\r\n      immediate: true,\r\n      handler(val) {\r\n        this.compValue=val;\r\n      },\r\n      // deep: true //true 深度监听\r\n    },\r\n  },\r\n  computed:{\r\n    formStyle(){\r\n      return this.$store.state.common.formStyle\r\n    },\r\n  },\r\n  created(){\r\n    this.getOptions();\r\n  },\r\n  methods: {\r\n    /**\r\n     * 选择框change事件，将所选值和所选值所在的对象回传给父组件\r\n     * @val {String} 当前选中值\r\n     **/\r\n    change(val) {\r\n      this.$emit('compChange', val);    // 更新 model\r\n      this.$emit('onChange', val);\r\n    },\r\n\r\n    /**\r\n     * 获取选择项数据\r\n     */\r\n    getOptions() {\r\n      if(this.dictionaryNo){\r\n        //this.$eframe.loadDicItem( {dicId:this.dictionaryNo},(data)=>{ this.optionLists = data;  } );\r\n        let form={\r\n          dicId:this.dictionaryNo,\r\n          dicListGroup:'',  //字典分组\r\n          language:'', //语种\r\n          catchFlag:this.compCatch, //是否使用缓存，默认true\r\n        };\r\n        store.dispatch('LoadDicItem',form).then((data)=>{ this.optionLists = data;  }).catch((msg) => {\r\n          this.$eframe.alertError(msg);\r\n        });\r\n        return;\r\n      }\r\n      if(this.list) {\r\n        if (this.$eframe.isArray(this.list)) { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = this.list;\r\n        } else if (typeof (this.list) === \"string\") { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = JSON.parse(this.list);\r\n        }\r\n        return;\r\n      }\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}