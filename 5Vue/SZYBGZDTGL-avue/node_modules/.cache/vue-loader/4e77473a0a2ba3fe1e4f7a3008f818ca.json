{"remainingRequest":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-element-comps\\EfCheckbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-element-comps\\EfCheckbox.vue","mtime":1640694382181},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\10415\\Desktop\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {BaseFieldTag} from './BaseFieldTag';\r\nimport store from \"../../store\";\r\n\r\nexport default {\r\n  name: \"EfCheckbox\",\r\n  mixins: [BaseFieldTag],         //继承基础BaseFieldTag\r\n  props: {\r\n    dictionaryNo: { // 数据字典编号。\r\n      type: String,\r\n      default: null,\r\n    },\r\n    dictionaryGroup: {  //分组\r\n      type: String,\r\n      default: null,\r\n    },\r\n    list: {  //分组\r\n      type: [String, Array],\r\n      default: null,\r\n    },\r\n    listKey: {  //列中内容字段\r\n      type: String,\r\n      default: 'code',\r\n    },\r\n    listValue: {  //列中标题字段\r\n      type: String,\r\n      default: \"name\",\r\n    },\r\n    queryNo: {  //列中标题字段\r\n      type: String,\r\n      default: null,\r\n    },\r\n    checkAllShow:{\r\n      type: [String,Boolean],\r\n      default: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      isIndeterminate: true,\r\n      checkAll: true,\r\n      compShow: false,\r\n      compValueList: [],\r\n    };\r\n  },\r\n  watch: {\r\n    list() {\r\n      this.getOptions();\r\n    },\r\n    value: {\r\n      handler(nVal){\r\n        this.compValueList = nVal;\r\n      },\r\n      immediate:true,\r\n    },\r\n  },\r\n  computed:{\r\n    formStyle(){\r\n      return this.$store.state.common.formStyle;\r\n    },\r\n  },\r\n  created() {\r\n    if(typeof(this.checkAllShow)=='boolean'){\r\n      this.compShow=this.checkAllShow;\r\n    }else {\r\n      if(this.checkAllShow=='true'){\r\n        this.compShow=true;\r\n      }else {\r\n        this.compShow=false;\r\n      }\r\n    }\r\n    this.getOptions();\r\n  },\r\n  methods: {\r\n    handleCheckAllChange(val) {\r\n\r\n      let that=this;\r\n      that.compValueList=[];\r\n      if (val) {\r\n        //true 为全选\r\n        if (this.$eframe.isNull(that.listKey)) {\r\n          this.optionLists.forEach(function (item) {\r\n            that.compValueList.push(item['code']);\r\n          })\r\n        }else {\r\n          this.optionLists.forEach(function (item) {\r\n            that.compValueList.push(item[that.listKey]);\r\n          })\r\n        }\r\n      }else {\r\n        that.compValueList=[];\r\n      }\r\n      // this.compValueList = val ? this.optionLists : [];\r\n      this.isIndeterminate = false;\r\n      this.$emit('compChange', this.compValueList);    // 更新 model\r\n      this.$emit('onChange', this.compValueList);\r\n    },\r\n    handleCheckedChange(value) {\r\n      let checkedCount = value.length;\r\n      this.checkAll = checkedCount === this.optionLists.length;\r\n      this.isIndeterminate = checkedCount > 0 && checkedCount < this.optionLists.length;\r\n      this.$emit('compChange', this.compValueList);    // 更新 model\r\n      this.$emit('onChange', this.compValueList);\r\n\r\n    },\r\n\r\n    /**\r\n     * 选择框change事件，将所选值和所选值所在的对象回传给父组件\r\n     * @val {String} 当前选中值\r\n     **/\r\n    change(val) {\r\n      let checkedCount = val.length;\r\n      this.checkAll = checkedCount === this.optionLists.length;\r\n      this.isIndeterminate = checkedCount > 0 && checkedCount < this.optionLists.length;\r\n\r\n      this.$emit('compChange', this.compValueList);    // 更新 model\r\n      this.$emit('onChange', this.compValueList);\r\n    },\r\n\r\n    /**\r\n     * 获取选择项数据\r\n     */\r\n    getOptions() {\r\n      if (this.dictionaryNo) {\r\n        // this.$eframe.loadDicItem({dicId: this.dictionaryNo}, (data) => {\r\n        //   this.optionLists = data;\r\n        // });\r\n        let form={\r\n          dicId:this.dictionaryNo,\r\n          dicListGroup:'',  //字典分组\r\n          language:'', //语种\r\n          catchFlag:this.compCatch, //是否使用缓存，默认true\r\n        };\r\n        store.dispatch('LoadDicItem',form).then((data)=>{ this.optionLists = data;  }).catch((msg) => {\r\n          this.$eframe.alertError(msg);\r\n        });\r\n        return;\r\n      }\r\n      if (this.list) {\r\n        if (this.$eframe.isArray(this.list)) { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = this.list;\r\n        } else if (typeof (this.list) === \"string\") { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = JSON.parse(this.list);\r\n        }\r\n        return;\r\n      }\r\n    },\r\n    setFocus(val){\r\n      this.$refs[val].focus()\r\n    }\r\n  }\r\n\r\n\r\n}\r\n",{"version":3,"sources":["EfCheckbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA","file":"EfCheckbox.vue","sourceRoot":"src/components/ef-element-comps","sourcesContent":["<template>\r\n  <el-form-item :label=\"label\" :prop=\"name\" :rules=\"rules\" :label-width=\"compLabelWidth\" inline-message=\"true\">\r\n    <span slot=\"label\">{{ label }}</span>\r\n    <div  v-if=\"compShow\">\r\n      <el-checkbox v-model=\"checkAll\"\r\n                   :indeterminate=\"isIndeterminate\"\r\n                   @change=\"handleCheckAllChange\"\r\n                   :v-if=\"compShow\">全选\r\n      </el-checkbox>\r\n    </div>\r\n<!--    <div style=\"margin: 15px 0;\"></div>-->\r\n    <el-checkbox-group  v-model=\"compValueList\"\r\n                       @change=\"handleCheckedChange\" :disabled=\"compReadonly\">\r\n      <el-checkbox :ref=\"item.name\" v-for=\"item in optionLists\"\r\n                   :label=\"listKey ? item[listKey] : item.code\"\r\n                   :key=\"listKey ? item[listKey] : item.code\">{{ listValue ? item[listValue] : item.name }}\r\n      </el-checkbox>\r\n    </el-checkbox-group>\r\n  </el-form-item>\r\n</template>\r\n\r\n<script>\r\nimport {BaseFieldTag} from './BaseFieldTag';\r\nimport store from \"../../store\";\r\n\r\nexport default {\r\n  name: \"EfCheckbox\",\r\n  mixins: [BaseFieldTag],         //继承基础BaseFieldTag\r\n  props: {\r\n    dictionaryNo: { // 数据字典编号。\r\n      type: String,\r\n      default: null,\r\n    },\r\n    dictionaryGroup: {  //分组\r\n      type: String,\r\n      default: null,\r\n    },\r\n    list: {  //分组\r\n      type: [String, Array],\r\n      default: null,\r\n    },\r\n    listKey: {  //列中内容字段\r\n      type: String,\r\n      default: 'code',\r\n    },\r\n    listValue: {  //列中标题字段\r\n      type: String,\r\n      default: \"name\",\r\n    },\r\n    queryNo: {  //列中标题字段\r\n      type: String,\r\n      default: null,\r\n    },\r\n    checkAllShow:{\r\n      type: [String,Boolean],\r\n      default: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      isIndeterminate: true,\r\n      checkAll: true,\r\n      compShow: false,\r\n      compValueList: [],\r\n    };\r\n  },\r\n  watch: {\r\n    list() {\r\n      this.getOptions();\r\n    },\r\n    value: {\r\n      handler(nVal){\r\n        this.compValueList = nVal;\r\n      },\r\n      immediate:true,\r\n    },\r\n  },\r\n  computed:{\r\n    formStyle(){\r\n      return this.$store.state.common.formStyle;\r\n    },\r\n  },\r\n  created() {\r\n    if(typeof(this.checkAllShow)=='boolean'){\r\n      this.compShow=this.checkAllShow;\r\n    }else {\r\n      if(this.checkAllShow=='true'){\r\n        this.compShow=true;\r\n      }else {\r\n        this.compShow=false;\r\n      }\r\n    }\r\n    this.getOptions();\r\n  },\r\n  methods: {\r\n    handleCheckAllChange(val) {\r\n\r\n      let that=this;\r\n      that.compValueList=[];\r\n      if (val) {\r\n        //true 为全选\r\n        if (this.$eframe.isNull(that.listKey)) {\r\n          this.optionLists.forEach(function (item) {\r\n            that.compValueList.push(item['code']);\r\n          })\r\n        }else {\r\n          this.optionLists.forEach(function (item) {\r\n            that.compValueList.push(item[that.listKey]);\r\n          })\r\n        }\r\n      }else {\r\n        that.compValueList=[];\r\n      }\r\n      // this.compValueList = val ? this.optionLists : [];\r\n      this.isIndeterminate = false;\r\n      this.$emit('compChange', this.compValueList);    // 更新 model\r\n      this.$emit('onChange', this.compValueList);\r\n    },\r\n    handleCheckedChange(value) {\r\n      let checkedCount = value.length;\r\n      this.checkAll = checkedCount === this.optionLists.length;\r\n      this.isIndeterminate = checkedCount > 0 && checkedCount < this.optionLists.length;\r\n      this.$emit('compChange', this.compValueList);    // 更新 model\r\n      this.$emit('onChange', this.compValueList);\r\n\r\n    },\r\n\r\n    /**\r\n     * 选择框change事件，将所选值和所选值所在的对象回传给父组件\r\n     * @val {String} 当前选中值\r\n     **/\r\n    change(val) {\r\n      let checkedCount = val.length;\r\n      this.checkAll = checkedCount === this.optionLists.length;\r\n      this.isIndeterminate = checkedCount > 0 && checkedCount < this.optionLists.length;\r\n\r\n      this.$emit('compChange', this.compValueList);    // 更新 model\r\n      this.$emit('onChange', this.compValueList);\r\n    },\r\n\r\n    /**\r\n     * 获取选择项数据\r\n     */\r\n    getOptions() {\r\n      if (this.dictionaryNo) {\r\n        // this.$eframe.loadDicItem({dicId: this.dictionaryNo}, (data) => {\r\n        //   this.optionLists = data;\r\n        // });\r\n        let form={\r\n          dicId:this.dictionaryNo,\r\n          dicListGroup:'',  //字典分组\r\n          language:'', //语种\r\n          catchFlag:this.compCatch, //是否使用缓存，默认true\r\n        };\r\n        store.dispatch('LoadDicItem',form).then((data)=>{ this.optionLists = data;  }).catch((msg) => {\r\n          this.$eframe.alertError(msg);\r\n        });\r\n        return;\r\n      }\r\n      if (this.list) {\r\n        if (this.$eframe.isArray(this.list)) { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = this.list;\r\n        } else if (typeof (this.list) === \"string\") { // 如果父组件有下拉选项数据，则不进行数据请求\r\n          this.optionLists = JSON.parse(this.list);\r\n        }\r\n        return;\r\n      }\r\n    },\r\n    setFocus(val){\r\n      this.$refs[val].focus()\r\n    }\r\n  }\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}