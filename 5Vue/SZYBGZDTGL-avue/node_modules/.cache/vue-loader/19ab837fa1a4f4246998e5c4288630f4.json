{"remainingRequest":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-bootstrap-comps\\BaseBlock.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-bootstrap-comps\\BaseBlock.vue","mtime":1640694382254},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {mapGetters} from \"vuex\";\r\nexport default {\r\n  name: 'BaseBlock',\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: 'div',\r\n      description: 'The HTML tag of the component (div, a)'\r\n    },\r\n    title: {\r\n      type: String,\r\n      description: 'The title of the block'\r\n    },\r\n    subtitle: {\r\n      type: String,\r\n      description: 'The subtitle of the block'\r\n    },\r\n    bordered: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Bordered block style'\r\n    },\r\n    rounded: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Rounded block style'\r\n    },\r\n    themed: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Themed block style'\r\n    },\r\n    transparent: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Transparent block style'\r\n    },\r\n    fxShadow: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Shadow fx block style'\r\n    },\r\n    fxPop: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Pop fx block style'\r\n    },\r\n    fxRotateRight: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Rotate right fx block style'\r\n    },\r\n    fxRotateLeft: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Rotate left fx block style'\r\n    },\r\n    linkShadow: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Shadow style for block links'\r\n    },\r\n    linkPop: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Pop style for block links'\r\n    },\r\n    linkRotate: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Rotate style for block links'\r\n    },\r\n    headerClass: {\r\n      type: String,\r\n      description: 'Add additional classes to default block-header'\r\n    },\r\n    optionsClass: {\r\n      type: String,\r\n      description: 'Add additional classes to default block-options'\r\n    },\r\n    contentClass: {\r\n      type: String,\r\n      description: 'Add additional classes to default block-content'\r\n    },\r\n    headerBg: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Add the default header background'\r\n    },\r\n    headerRtl: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Reverse the order of elements in header'\r\n    },\r\n    contentFull: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Add full padding to the bottom of the default block-content'\r\n    },\r\n    ribbon: {\r\n      type: [Boolean, String],\r\n      default: false,\r\n      description: 'Enable the ribbon or enable it and also specify its content by setting a string value.'\r\n    },\r\n    ribbonLeft: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Position ribbon to the left'\r\n    },\r\n    ribbonBottom: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Position ribbon to the bottom'\r\n    },\r\n    ribbonBookmark: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Set the bookmark type to your ribbon'\r\n    },\r\n    ribbonModern: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Set the modern type to your ribbon'\r\n    },\r\n    ribbonVariant: {\r\n      type: String,\r\n      default: 'primary',\r\n      description: 'Set a different ribbon variant (primary, info, warning, danger, success, glass)'\r\n    },\r\n    modeLoading: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Loading block mode'\r\n    },\r\n    modeFullscreen: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Fullscreen block mode'\r\n    },\r\n    modePinned: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Pinned block mode'\r\n    },\r\n    modeContentHide: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Hide block’s content'\r\n    },\r\n    modeHide: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Hide block itself'\r\n    },\r\n    btnOptionFullscreen: {\r\n      type: Boolean,\r\n      defaul: false,\r\n      description: 'Enable the fullscreen mode button'\r\n    },\r\n    btnOptionPinned: {\r\n      type: Boolean,\r\n      defaul: false,\r\n      description: 'Enable the pinned mode button'\r\n    },\r\n    btnOptionContent: {\r\n      type: Boolean,\r\n      defaul: false,\r\n      description: 'Enable the content toggle button'\r\n    },\r\n    btnOptionClose: {\r\n      type: Boolean,\r\n      defaul: false,\r\n      description: 'Enable the close mode button'\r\n    },\r\n  },\r\n  data () {\r\n    return {\r\n      // If the block is in loading mode\r\n      optionLoading: this.modeLoading,\r\n\r\n      // If the block is in fullscreen mode\r\n      optionFullscreen: this.modeFullscreen,\r\n\r\n      // If the block is in pinned mode\r\n      optionPinned: this.modePinned,\r\n\r\n      // If the default block-content is hidden\r\n      optionContentHide: this.modeContentHide,\r\n\r\n      // If block itself is hidden\r\n      optionHide: this.modeHide\r\n    }\r\n  },\r\n  computed: {\r\n    classContainer () {\r\n      return {\r\n        'block-bordered': this.bordered,\r\n        'block-rounded': this.rounded,\r\n        'block-themed': this.themed,\r\n        'block-transparent': this.transparent,\r\n        'block-fx-shadow': this.fxShadow,\r\n        'block-fx-pop': this.fxPop,\r\n        'block-fx-rotate-right': this.fxRotateRight,\r\n        'block-fx-rotate-left': this.fxRotateLeft,\r\n        'block-link-shadow': this.linkShadow,\r\n        'block-link-pop': this.linkPop,\r\n        'block-link-rotate': this.linkRotate,\r\n        'block-mode-loading': this.optionLoading,\r\n        'block-mode-fullscreen': this.optionFullscreen,\r\n        'block-mode-pinned': this.optionPinned,\r\n        'block-mode-hidden': this.optionContentHide,\r\n        'd-none': this.optionHide\r\n      }\r\n    },\r\n    classContainerHeader () {\r\n      return {\r\n        'block-header-default': this.headerBg,\r\n        'block-header-rtl': this.headerRtl,\r\n        [this.headerClass]: this.headerClass\r\n      }\r\n    },\r\n    classContainerOptions () {\r\n      return {\r\n        [this.optionsClass]: this.optionsClass\r\n      }\r\n    },\r\n    classContainerContent () {\r\n      return {\r\n        'block-content-full': this.contentFull,\r\n        'ribbon': this.ribbon,\r\n        'ribbon-left': this.ribbon && this.ribbonLeft,\r\n        'ribbon-bottom': this.ribbon && this.ribbonBottom,\r\n        'ribbon-bookmark': this.ribbon && this.ribbonBookmark,\r\n        'ribbon-modern': this.ribbon && this.ribbonModern,\r\n        [`ribbon-${this.ribbonVariant}`]: this.ribbon && this.ribbonVariant,\r\n        [this.contentClass]: this.contentClass\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    fullscreenToggle () {\r\n      this.optionPinned = false\r\n      this.optionFullscreen = !this.optionFullscreen\r\n    },\r\n    fullscreenOn () {\r\n      this.optionPinned = false\r\n      this.optionFullscreen = true\r\n    },\r\n    fullscreenOff () {\r\n      this.optionPinned = false\r\n      this.optionFullscreen = false\r\n    },\r\n    pinnedToggle () {\r\n      this.optionFullscreen = false\r\n      this.optionPinned = !this.optionPinned\r\n    },\r\n    pinnedOn () {\r\n      this.optionFullscreen = false\r\n      this.optionPinned = true\r\n    },\r\n    pinnedOff () {\r\n      this.optionFullscreen = false\r\n      this.optionPinned = false\r\n    },\r\n    contentToggle () {\r\n      this.optionContentHide = !this.optionContentHide\r\n    },\r\n    contentShow () {\r\n      this.optionContentHide = false\r\n    },\r\n    contentHide () {\r\n      this.optionContentHide = true\r\n    },\r\n    stateToggle () {\r\n      this.optionLoading = !this.optionLoading\r\n    },\r\n    stateLoading () {\r\n      this.optionLoading = true\r\n    },\r\n    stateNormal () {\r\n      this.optionLoading = false\r\n    },\r\n    open () {\r\n      this.optionHide = false\r\n    },\r\n    close () {\r\n      this.optionHide = true\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["BaseBlock.vue"],"names":[],"mappingsfile":"BaseBlock.vue","sourceRoot":"src/components/ef-bootstrap-comps","sourcesContent":["<template>\r\n  <component\r\n    :is=\"tag\"\r\n    :href=\"tag === 'a' ? '#' : false\"\r\n    :class=\"classContainer\"\r\n    class=\"block\"\r\n  >\r\n    <div class=\"block-header\" v-if=\"$slots.header || $slots.title || title\" :class=\"classContainerHeader\">\r\n<!--      <slot name=\"header\">-->\r\n        <h3 class=\"block-title\">\r\n          <slot name=\"title\"></slot>\r\n          {{ title }} <small v-if=\"subtitle\">{{ subtitle }}</small>\r\n          <slot name=\"subtitle\"></slot>\r\n        </h3>\r\n        <div class=\"block-options\" v-if=\"$slots.options || btnOptionFullscreen || btnOptionPinned || btnOptionContent || btnOptionClose\" :class=\"classContainerOptions\">\r\n          <slot name=\"options\"></slot>\r\n          <button type=\"button\" class=\"btn-block-option\" @click=\"fullscreenToggle\" v-if=\"btnOptionFullscreen\">\r\n            <i :class=\"{'si si-size-fullscreen': !optionFullscreen, 'si si-size-actual': optionFullscreen}\"></i>\r\n          </button>\r\n          <button type=\"button\" class=\"btn-block-option\" @click=\"pinnedToggle\" v-if=\"btnOptionPinned\">\r\n            <i class=\"si si-pin\"></i>\r\n          </button>\r\n          <button type=\"button\" class=\"btn-block-option\" @click=\"contentToggle\" v-if=\"btnOptionContent\">\r\n            <i :class=\"{'si si-arrow-up': !optionContentHide, 'si si-arrow-down': optionContentHide}\"></i>\r\n          </button>\r\n          <button type=\"button\" class=\"btn-block-option\" @click=\"close\" v-if=\"btnOptionClose\">\r\n            <i class=\"si si-close\"></i>\r\n          </button>\r\n        </div>\r\n<!--      </slot>-->\r\n    </div>\r\n    <div v-if=\"!$slots.content\" class=\"block-content\" :class=\"classContainerContent\">\r\n      <div v-if=\"this.ribbon\" class=\"ribbon-box\">\r\n        <slot name=\"ribbon\">\r\n          {{ ribbon }}\r\n        </slot>\r\n      </div>\r\n      <slot></slot>\r\n    </div>\r\n    <slot name=\"content\"></slot>\r\n  </component>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters} from \"vuex\";\r\nexport default {\r\n  name: 'BaseBlock',\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: 'div',\r\n      description: 'The HTML tag of the component (div, a)'\r\n    },\r\n    title: {\r\n      type: String,\r\n      description: 'The title of the block'\r\n    },\r\n    subtitle: {\r\n      type: String,\r\n      description: 'The subtitle of the block'\r\n    },\r\n    bordered: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Bordered block style'\r\n    },\r\n    rounded: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Rounded block style'\r\n    },\r\n    themed: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Themed block style'\r\n    },\r\n    transparent: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Transparent block style'\r\n    },\r\n    fxShadow: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Shadow fx block style'\r\n    },\r\n    fxPop: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Pop fx block style'\r\n    },\r\n    fxRotateRight: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Rotate right fx block style'\r\n    },\r\n    fxRotateLeft: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Rotate left fx block style'\r\n    },\r\n    linkShadow: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Shadow style for block links'\r\n    },\r\n    linkPop: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Pop style for block links'\r\n    },\r\n    linkRotate: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Rotate style for block links'\r\n    },\r\n    headerClass: {\r\n      type: String,\r\n      description: 'Add additional classes to default block-header'\r\n    },\r\n    optionsClass: {\r\n      type: String,\r\n      description: 'Add additional classes to default block-options'\r\n    },\r\n    contentClass: {\r\n      type: String,\r\n      description: 'Add additional classes to default block-content'\r\n    },\r\n    headerBg: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Add the default header background'\r\n    },\r\n    headerRtl: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Reverse the order of elements in header'\r\n    },\r\n    contentFull: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Add full padding to the bottom of the default block-content'\r\n    },\r\n    ribbon: {\r\n      type: [Boolean, String],\r\n      default: false,\r\n      description: 'Enable the ribbon or enable it and also specify its content by setting a string value.'\r\n    },\r\n    ribbonLeft: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Position ribbon to the left'\r\n    },\r\n    ribbonBottom: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Position ribbon to the bottom'\r\n    },\r\n    ribbonBookmark: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Set the bookmark type to your ribbon'\r\n    },\r\n    ribbonModern: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Set the modern type to your ribbon'\r\n    },\r\n    ribbonVariant: {\r\n      type: String,\r\n      default: 'primary',\r\n      description: 'Set a different ribbon variant (primary, info, warning, danger, success, glass)'\r\n    },\r\n    modeLoading: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Loading block mode'\r\n    },\r\n    modeFullscreen: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Fullscreen block mode'\r\n    },\r\n    modePinned: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Pinned block mode'\r\n    },\r\n    modeContentHide: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Hide block’s content'\r\n    },\r\n    modeHide: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: 'Hide block itself'\r\n    },\r\n    btnOptionFullscreen: {\r\n      type: Boolean,\r\n      defaul: false,\r\n      description: 'Enable the fullscreen mode button'\r\n    },\r\n    btnOptionPinned: {\r\n      type: Boolean,\r\n      defaul: false,\r\n      description: 'Enable the pinned mode button'\r\n    },\r\n    btnOptionContent: {\r\n      type: Boolean,\r\n      defaul: false,\r\n      description: 'Enable the content toggle button'\r\n    },\r\n    btnOptionClose: {\r\n      type: Boolean,\r\n      defaul: false,\r\n      description: 'Enable the close mode button'\r\n    },\r\n  },\r\n  data () {\r\n    return {\r\n      // If the block is in loading mode\r\n      optionLoading: this.modeLoading,\r\n\r\n      // If the block is in fullscreen mode\r\n      optionFullscreen: this.modeFullscreen,\r\n\r\n      // If the block is in pinned mode\r\n      optionPinned: this.modePinned,\r\n\r\n      // If the default block-content is hidden\r\n      optionContentHide: this.modeContentHide,\r\n\r\n      // If block itself is hidden\r\n      optionHide: this.modeHide\r\n    }\r\n  },\r\n  computed: {\r\n    classContainer () {\r\n      return {\r\n        'block-bordered': this.bordered,\r\n        'block-rounded': this.rounded,\r\n        'block-themed': this.themed,\r\n        'block-transparent': this.transparent,\r\n        'block-fx-shadow': this.fxShadow,\r\n        'block-fx-pop': this.fxPop,\r\n        'block-fx-rotate-right': this.fxRotateRight,\r\n        'block-fx-rotate-left': this.fxRotateLeft,\r\n        'block-link-shadow': this.linkShadow,\r\n        'block-link-pop': this.linkPop,\r\n        'block-link-rotate': this.linkRotate,\r\n        'block-mode-loading': this.optionLoading,\r\n        'block-mode-fullscreen': this.optionFullscreen,\r\n        'block-mode-pinned': this.optionPinned,\r\n        'block-mode-hidden': this.optionContentHide,\r\n        'd-none': this.optionHide\r\n      }\r\n    },\r\n    classContainerHeader () {\r\n      return {\r\n        'block-header-default': this.headerBg,\r\n        'block-header-rtl': this.headerRtl,\r\n        [this.headerClass]: this.headerClass\r\n      }\r\n    },\r\n    classContainerOptions () {\r\n      return {\r\n        [this.optionsClass]: this.optionsClass\r\n      }\r\n    },\r\n    classContainerContent () {\r\n      return {\r\n        'block-content-full': this.contentFull,\r\n        'ribbon': this.ribbon,\r\n        'ribbon-left': this.ribbon && this.ribbonLeft,\r\n        'ribbon-bottom': this.ribbon && this.ribbonBottom,\r\n        'ribbon-bookmark': this.ribbon && this.ribbonBookmark,\r\n        'ribbon-modern': this.ribbon && this.ribbonModern,\r\n        [`ribbon-${this.ribbonVariant}`]: this.ribbon && this.ribbonVariant,\r\n        [this.contentClass]: this.contentClass\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    fullscreenToggle () {\r\n      this.optionPinned = false\r\n      this.optionFullscreen = !this.optionFullscreen\r\n    },\r\n    fullscreenOn () {\r\n      this.optionPinned = false\r\n      this.optionFullscreen = true\r\n    },\r\n    fullscreenOff () {\r\n      this.optionPinned = false\r\n      this.optionFullscreen = false\r\n    },\r\n    pinnedToggle () {\r\n      this.optionFullscreen = false\r\n      this.optionPinned = !this.optionPinned\r\n    },\r\n    pinnedOn () {\r\n      this.optionFullscreen = false\r\n      this.optionPinned = true\r\n    },\r\n    pinnedOff () {\r\n      this.optionFullscreen = false\r\n      this.optionPinned = false\r\n    },\r\n    contentToggle () {\r\n      this.optionContentHide = !this.optionContentHide\r\n    },\r\n    contentShow () {\r\n      this.optionContentHide = false\r\n    },\r\n    contentHide () {\r\n      this.optionContentHide = true\r\n    },\r\n    stateToggle () {\r\n      this.optionLoading = !this.optionLoading\r\n    },\r\n    stateLoading () {\r\n      this.optionLoading = true\r\n    },\r\n    stateNormal () {\r\n      this.optionLoading = false\r\n    },\r\n    open () {\r\n      this.optionHide = false\r\n    },\r\n    close () {\r\n      this.optionHide = true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n"]}]}