{"remainingRequest":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-element-comps\\EfSelect.vue?vue&type=style&index=0&id=1292fa76&lang=scss&scoped=true&","dependencies":[{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\src\\components\\ef-element-comps\\EfSelect.vue","mtime":1656319345633},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\兴才svn平台\\01苏州医保局\\88苏州医保中心岗位职责动态管理系统（SZYBGZDTGL）\\0工程\\5Vue\\SZYBGZDTGL-avue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.el-select-dropdown__item.hover, .el-select-dropdown__item:hover{\n\tbackground: #edf0f4;\n}\n",{"version":3,"sources":["EfSelect.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoMA;AACA;AACA","file":"EfSelect.vue","sourceRoot":"src/components/ef-element-comps","sourcesContent":["<template>\r\n\t<el-form-item :class=\"placeholderClass\" :label-width=\"compLabelWidth\"  :label=\"label\" :prop=\"name\" :rules=\"rules\" inline-message=\"true\">\r\n    <span slot=\"label\">{{ label }}</span>\r\n    <el-select\r\n        :ref=\"name\"\r\n        :size=\"formStyle[0].size\"\r\n\t\t\t\tv-model=\"compValue\"\r\n\t\t\t\t:multiple=\"compMultiple\"\r\n\t\t\t\t:disabled=\"compReadonly\"\r\n\t\t\t\t:clearable=\"compClearable\"\r\n\t\t\t\t:filterable=\"compFilterable\"\r\n\t\t\t\t:placeholder=\"placeholder\"\r\n\t\t\t\t:collapse-tags=\"compCollapseTags\"\r\n\t\t\t\tstyle=\"width: 100%\"\r\n\t\t\t\t@change=\"change\"\r\n\t\t\t\t@visible-change=\"visibleChange\">\r\n\t\t\t<el-option v-if=\"compEmptyOption\" key=\"\" label=\"\" value=\"\"/>\r\n\t\t\t<el-option\r\n\t\t\t\t\tv-for=\"item in optionLists\"\r\n\t\t\t\t\t:key=\"listKey ? item[listKey] : item.code\"\r\n\t\t\t\t\t:label=\"listValue ? item[listValue] : item.name\"\r\n\t\t\t\t\t:value=\"listKey ? item[listKey] : item.code\" />\r\n\t\t</el-select>\r\n\t</el-form-item>\r\n</template>\r\n<script type=\"text/javascript\">\r\n\timport {BaseFieldTag} from './BaseFieldTag';\r\n\timport store from \"../../store\";\r\n\texport default {\r\n\t\tname: 'EfSelect',\r\n\t\tmixins: [BaseFieldTag],         //继承基础BaseFieldTag\r\n\t\tprops: {\r\n\t\t\tdictionaryNo: { // 数据字典编号。\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: null,\r\n\t\t\t},\r\n\t\t\tdictionaryGroup: {  //分组\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: null,\r\n\t\t\t},\r\n\t\t\tlist: {  //分组\r\n\t\t\t\ttype: [String, Array],\r\n\t\t\t\tdefault: null,\r\n\t\t\t},\r\n\t\t\tlistKey: {  //列中内容字段\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: 'code',\r\n\t\t\t},\r\n\t\t\tlistValue: {  //列中标题字段\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: \"name\",\r\n\t\t\t},\r\n\t\t\tqueryNo: {  //列中标题字段\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: null,\r\n\t\t\t},\r\n\t\t\temptyOption: { // 是否包含空选项， 默认false，非必传。\r\n\t\t\t\ttype: [String, Boolean],\r\n\t\t\t\tdefault: false,\r\n\t\t\t},\r\n\t\t\t//...BaseFieldTag.props,\r\n\t\t\tmultiple: { // 是否多选，默认false，非必传。\r\n\t\t\t\ttype: [String, Boolean],\r\n\t\t\t\tdefault: false,\r\n\t\t\t},\r\n\t\t\tcollapseTags: { // 多选用数字替代\r\n\t\t\t\ttype: [String, Boolean],\r\n\t\t\t\tdefault: false,\r\n\t\t\t},\r\n\t\t\tclearable: { // 是否可清空选项，默认true，非必传。\r\n\t\t\t\ttype: [String, Boolean],\r\n\t\t\t\tdefault: true,\r\n\t\t\t},\r\n\t\t\tfilterable: { // 是否可搜索， 默认false，非必传。\r\n\t\t\t\ttype: [String, Boolean],\r\n\t\t\t\tdefault: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tcomponentType:'EfSelect',\r\n\t\t\t\tcompEmptyOption:false,\r\n\t\t\t\tcompMultiple:false,\r\n\t\t\t\tcompClearable:false,\r\n\t\t\t\tcompFilterable:false,\r\n\t\t\t\tcompValidateTrigger:'change', //校验触发事件,select为change\r\n\t\t\t\toptionLists: [],\r\n\t\t\t\tcompCollapseTags:false,\r\n\t\t\t};\r\n\t\t},\r\n    computed:{\r\n      formStyle(){\r\n        return this.$store.state.common.formStyle\r\n      },\r\n      placeholderClass(){\r\n        return this.$store.state.common.formStyle[0].size\r\n      }\r\n    },\r\n\t\twatch: {\r\n\t\t\tlist() {\r\n\t\t\t\tthis.getOptions();\r\n\t\t\t},\r\n\t\t\tvalue() {\r\n\t\t\t\tthis.compValue = this.value;\r\n\t\t\t},\r\n\t\t},\r\n\t\tcreated(){\r\n\t\t\tif(typeof (this.emptyOption)==\"string\") {\r\n\t\t\t\tthis.compEmptyOption = this.emptyOption === 'true';\r\n\t\t\t}else{\r\n\t\t\t\tthis.compEmptyOption = this.emptyOption === true;\r\n\t\t\t}\r\n\t\t\tif(typeof (this.multiple)==\"string\") {\r\n\t\t\t\tthis.compMultiple = this.multiple === 'true';\r\n\t\t\t}else{\r\n\t\t\t\tthis.compMultiple = this.multiple === true;\r\n\t\t\t}\r\n\t\t\tif(typeof (this.collapseTags)==\"string\") {\r\n\t\t\t\tthis.compCollapseTags = this.collapseTags === 'true';\r\n\t\t\t}else{\r\n\t\t\t\tthis.compCollapseTags = this.collapseTags === true;\r\n\t\t\t}\r\n\t\t\tif(typeof (this.clearable)==\"string\") {\r\n\t\t\t\tthis.compClearable = this.clearable === 'true';\r\n\t\t\t}else{\r\n\t\t\t\tthis.compClearable = this.clearable === true;\r\n\t\t\t}\r\n\t\t\tif(typeof (this.filterable)==\"string\") {\r\n\t\t\t\tthis.compFilterable = this.filterable === 'true';\r\n\t\t\t}else{\r\n\t\t\t\tthis.compFilterable = this.filterable === true;\r\n\t\t\t}\r\n\t\t\tthis.getOptions();\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\t/**\r\n\t\t\t * 获取下拉框的选择项数据\r\n\t\t\t */\r\n\t\t\tgetOptions() {\r\n\t\t\t\tif(this.dictionaryNo){\r\n\t\t\t\t\t//this.$eframe.loadDicItem( {dicId:this.dictionaryNo},(data)=>{ this.optionLists = data;  } );\r\n\t\t\t\t\tlet form={\r\n\t\t\t\t\t\tdicId:this.dictionaryNo,\r\n\t\t\t\t\t\tdicListGroup:this.dictionaryGroup,  //字典分组\r\n\t\t\t\t\t\tlanguage:'', //语种\r\n\t\t\t\t\t\tcatchFlag:this.compCatch, //是否使用缓存，默认true\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.dispatch('LoadDicItem',form).then((data)=>{ this.optionLists = data; }).catch((msg) => {\r\n\t\t\t\t\t\tthis.$eframe.alertError(msg);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.list) {\r\n\t\t\t\t\tif (this.$eframe.isArray(this.list)) { // 如果父组件有下拉选项数据，则不进行数据请求\r\n\t\t\t\t\t\tthis.optionLists = this.list;\r\n\t\t\t\t\t} else if (typeof (this.list) === \"string\") { // 如果父组件有下拉选项数据，则不进行数据请求\r\n\t\t\t\t\t\tthis.optionLists = JSON.parse(this.list);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * 选择框change事件，将所选值和所选值所在的对象回传给父组件\r\n\t\t\t * @val {String} 当前选中值\r\n\t\t\t **/\r\n\t\t\tchange(val) {\r\n\t\t\t\tthis.$emit('compChange', val);    // 更新 model\r\n\t\t\t\tthis.$emit('onChange', val);\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * 下拉框出现/隐藏时触发\r\n\t\t\t * @isShow {Boolean} 标识：true为下拉框展开；false为下拉框隐藏\r\n\t\t\t **/\r\n\t\t\tvisibleChange(isShow) {\r\n\t\t\t\tthis.$emit('onVisibleChange', isShow);\r\n\t\t\t},\r\n      getValue(){\r\n\t\t\t  var list=this.optionLists;\r\n        for (let k in list ){\r\n          // if (list[k].[this.listKey]===this.value){\r\n          //   return list[k].[this.listValue];\r\n          // }\r\n        }\r\n        return this.value;\r\n      },\r\n      setFocus(){\r\n        this.$refs[this.name].focus()\r\n      },\r\n      setBlur(){\r\n        this.$refs[this.name].blur()\r\n      }\r\n\t\t},\r\n\t}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n\t.el-select-dropdown__item.hover, .el-select-dropdown__item:hover{\r\n\t\tbackground: #edf0f4;\r\n\t}\r\n</style>\r\n"]}]}