"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalizationProvider = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
var provide = allVue.provide;

var LocalizationService_1 = require("./LocalizationService");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * A Vue component which provides a localization service.
 * Expects a language string as a property of the component.
 */


var LocalizationProvider = {
  props: {
    language: String
  },
  data: function data() {
    return this.getChildContext();
  },
  watch: {
    language: function language(newLanguage) {
      this.$data.kendoLocalizationService.language = newLanguage;
    }
  },
  // @ts-ignore
  setup: function setup(props) {
    var v3 = !!gh;
    var localizationService = ref(new LocalizationService_1.LocalizationService(props.language));
    provide('kendoLocalizationService', localizationService);
    return {
      v3: v3
    };
  },
  provide: function provide() {
    return {
      kendoLocalizationService: this.$data.kendoLocalizationService
    };
  },
  methods: {
    /**
     * Returns a localization service.
     * The method is suitable for overriding when you
     * implement custom localization behavior.
     */
    getLocalizationService: function getLocalizationService() {
      return new LocalizationService_1.LocalizationService(this.$props.language);
    },

    /**
     * @hidden
     */
    getChildContext: function getChildContext() {
      return {
        kendoLocalizationService: this.getLocalizationService()
      };
    }
  },

  /**
   * @hidden
   */
  // @ts-ignore
  render: function render(createElement) {
    // @ts-ignore
    var h = gh || createElement;
    var defaultSlot = kendo_vue_common_1.getDefaultSlots(this);
    return h("div", [defaultSlot]);
  }
};
exports.LocalizationProvider = LocalizationProvider;