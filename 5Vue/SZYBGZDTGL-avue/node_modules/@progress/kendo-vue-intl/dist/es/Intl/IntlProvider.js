// @ts-ignore
import * as aVue from 'vue';
var allVue = aVue;
var gh = allVue.h;
var ref = allVue.ref;
var provide = allVue.provide;
import { IntlService } from './IntlService';
import { getDefaultSlots } from '@progress/kendo-vue-common';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
/**
 * A Vue component which provides an internationalization service.
 * Expects a locale string as a property of the component.
 */

var IntlProvider = {
  props: {
    locale: String
  },
  data: function data() {
    return this.getChildContext();
  },
  // @ts-ignore
  setup: function setup(props) {
    var v3 = !!gh;
    var intlService = ref(new IntlService(props.locale));
    provide('kendoIntlService', intlService);
    return {
      v3: v3
    };
  },
  watch: {
    locale: function locale(newLocale) {
      this.$data.kendoIntlService.locale = newLocale;
    }
  },
  provide: function provide() {
    return {
      kendoIntlService: this.$data.kendoIntlService
    };
  },
  methods: {
    /**
     * Returns an internationalization service.
     * The method is suitable for overriding when you
     * implement custom internationalization behavior.
     */
    getIntlService: function getIntlService() {
      return new IntlService(this.$props.locale);
    },

    /**
     * @hidden
     */
    getChildContext: function getChildContext() {
      return {
        kendoIntlService: this.getIntlService()
      };
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
  },

  /**
   * @hidden
   */
  // @ts-ignore
  render: function render(createElement) {
    // @ts-ignore
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("div", [defaultSlot]);
  }
};
export { IntlProvider };