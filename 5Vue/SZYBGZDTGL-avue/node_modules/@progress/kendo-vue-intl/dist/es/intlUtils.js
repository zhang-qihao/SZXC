import { IntlService } from './Intl/IntlService';
import { LocalizationService } from './Localization/LocalizationService';
/**
 * Provides an internationalization service.
 * When the passed component is a direct or indirect child of
 * `IntlProvider`, the returned service uses the locale of the provider.
 * Otherwise, uses `en` as a default locale.
 * To handle locale changes, call the method on each `render`.
 *
 * @param componentClass - The Vue component class that will use the internationalization service.
 */
export function provideIntlService(component) {
    if (!component && process.env.NODE_ENV !== 'production') {
        throw "Passed component - " + component + " is invalid.";
    }
    var intlServiceFromContext = component.kendoIntlService;
    return (intlServiceFromContext &&
        Object.keys(intlServiceFromContext).some(function (item) { return item === 'locale'; }))
        ? intlServiceFromContext : new IntlService('en');
}
/**
 * Provides a localization service.
 * When the passed component is a direct or indirect child of
 * `LocalizationProvider`, the returned service uses the language of the provider.
 * To handle locale changes, call the method on each `render`.
 *
 * @param componentClass - The Vue component class that will use the internationalization service.
 */
export function provideLocalizationService(component) {
    if (!component && process.env.NODE_ENV !== 'production') {
        throw "Passed component - " + component + " is invalid.";
    }
    var localizationServiceFromContext = component.kendoLocalizationService;
    return (localizationServiceFromContext &&
        Object.keys(localizationServiceFromContext).some(function (item) { return item === 'language'; }))
        ? localizationServiceFromContext : new LocalizationService();
}
