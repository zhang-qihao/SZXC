"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Zoom = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;

var Animation_1 = require("./Animation");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var EXITING_ANIMATION_STYLE = {
  position: 'absolute',
  top: '0',
  left: '0'
};
/**
 * Represents the default `Zoom` component.
 */

var Zoom = {
  props: {
    appear: {
      type: Boolean,
      default: false
    },
    enter: {
      type: Boolean,
      default: true
    },
    exit: {
      type: Boolean,
      default: true
    },
    stackChildren: {
      type: Boolean,
      default: false
    },
    transitionEnterDuration: {
      type: Number,
      default: 300
    },
    transitionExitDuration: {
      type: Number,
      default: 300
    },
    childFactory: Object,
    className: String,
    direction: {
      type: String,
      default: 'out'
    },
    tag: String,
    id: String
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = kendo_vue_common_1.getDefaultSlots(this);
    var transitionName = "zoom-" + this.$props.direction;
    return (// @ts-ignore function children
      h(Animation_1.Animation, {
        transitionName: transitionName,
        attrs: this.v3 ? undefined : {
          transitionName: transitionName,
          appear: this.$props.appear,
          enter: this.$props.enter,
          exit: this.$props.exit,
          transitionEnterDuration: this.$props.transitionEnterDuration,
          transitionExitDuration: this.$props.transitionExitDuration,
          animationExitingStyle: this.$props.stackChildren ? EXITING_ANIMATION_STYLE : undefined
        },
        appear: this.$props.appear,
        enter: this.$props.enter,
        exit: this.$props.exit,
        transitionEnterDuration: this.$props.transitionEnterDuration,
        transitionExitDuration: this.$props.transitionExitDuration,
        animationExitingStyle: this.$props.stackChildren ? EXITING_ANIMATION_STYLE : undefined
      }, this.v3 ? function () {
        return [defaultSlot];
      } : [defaultSlot])
    );
  }
};
exports.Zoom = Zoom;