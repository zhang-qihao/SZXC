import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { AnimationInterface } from './AnimationInterface';
/**
 * Specifies the direction of the Slide Animation ([see example]({% slug direction_animation_native %}#toc-slide)).
 *
 * The supported directions are:
 * * `up`&mdash;On showing, slides the content from bottom to top, and vice-versa.
 * * (Default) `down`&mdash;On showing, slides the content from top to bottom, and vice-versa.
 * * `left`&mdash;On showing, slides the content from right to left, and vice-versa.
 * * `right`&mdash;On showing, slides the content from left to right, and vice-versa.
 */
export declare type SlideDirection = 'up' | 'down' | 'left' | 'right';
/**
 * Represent the props of the [KendoVue Slide Animation component]({% slug animationtypes_animation_native %}#toc-slide).
 *
 * @example
 * ```html-preview
 * ```
 */
export interface SlideProps extends AnimationInterface {
    /**
     * After the element reaches its exit state, it is no longer available in the DOM.
     * If a DOM operation is required, access it trough the `childFactory` function.
     */
    childFactory?: any;
    /**
     * Specifies the CSS class names which are set to the Animation.
     */
    className?: string | string[];
    /**
     * Specifies the direction of the Slide Animation. Defaults to `down`.
     */
    direction?: string;
    /**
     * Specifies the node type of the parent Animation. Defaults to `div`.
     */
    tag?: string;
    /**
     * Specifies the tag.
     */
    component?: string;
    /**
     * Specifies the id of the Animation.
     */
    id?: string;
    /**
     * Specifies the style of the parent Animation.
     */
    style?: any;
}
/**
 * @hidden
 */
export interface SlideMethods extends Vue {
    onEntering: (e: any) => void;
    onEnter: (e: any) => void;
    onExit: (e: any) => void;
    onExiting: (e: any) => void;
    onExited: (e: any) => void;
    onEntered: (e: any) => void;
}
/**
 * Represents the default `Slide` component.
 */
declare let Slide: ComponentOptions<Vue, DefaultData<{}>, DefaultMethods<SlideMethods>, {}, RecordPropsDefinition<SlideProps>>;
export { Slide };
