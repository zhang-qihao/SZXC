var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}; // @ts-ignore


import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
var Transition = allVue.Transition;
import util from './util';
import { getDefaultSlots } from '@progress/kendo-vue-common';
var styles = util.styles;
/**
 * Represents the default `Animation` component.
 */

var AnimationChild = {
  props: {
    in: Boolean,
    transitionName: {
      type: String,
      required: true
    },
    transitionStyle: Object,
    componentChildClassName: [Array],
    className: String,
    appear: {
      type: Boolean,
      default: true
    },
    enter: {
      type: Boolean,
      default: true
    },
    exit: {
      type: Boolean,
      default: true
    },
    transitionEnterDuration: Number,
    transitionExitDuration: Number,
    mountOnEnter: Boolean,
    unmountOnExit: Boolean,
    animationEnteringStyle: Object,
    animationEnteredStyle: Object,
    animationExitingStyle: Object,
    animationExitedStyle: Object
  },
  created: function created() {
    this.animationStep = '';
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var elementRef = ref(null);
    return {
      v3: v3,
      elementRef: elementRef
    };
  },
  mounted: function mounted() {
    this._element = this.v3 ? this.elementRef || null : this.$refs.element || null;
  },
  computed: {
    element: {
      get: function get() {
        return this._element;
      }
    }
  },
  methods: {
    onBeforeEnter: function onBeforeEnter(e) {
      this.$emit('beforeenter', {
        animatedElement: e,
        target: this
      });
    },
    onEnter: function onEnter(e) {
      this.animationStep = 'entering';
      this.$emit('entering', {
        animatedElement: e,
        target: this
      });
    },
    onAfterEnter: function onAfterEnter(e) {
      this.animationStep = 'entered';
      this.$emit('entered', {
        animatedElement: e,
        target: this
      });
    },
    onBeforeLeave: function onBeforeLeave(e) {
      this.$emit('exit', {
        animatedElement: e,
        target: this
      });
    },
    onLeave: function onLeave(e) {
      this.animationStep = 'exiting';
      this.$emit('exiting', {
        animatedElement: e,
        target: this
      });
    },
    onAfterLeave: function onAfterLeave(e) {
      this.animationStep = 'exited';
      this.$emit('exited', {
        animatedElement: e,
        target: this
      });
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;

    var h = gh || createElement;

    var _a = this.$props,
        appear = _a.appear,
        enter = _a.enter,
        exit = _a.exit,
        transitionName = _a.transitionName,
        transitionEnterDuration = _a.transitionEnterDuration,
        transitionExitDuration = _a.transitionExitDuration,
        className = _a.className,
        componentChildClassName = _a.componentChildClassName,
        mountOnEnter = _a.mountOnEnter,
        unmountOnExit = _a.unmountOnExit,
        animationEnteringStyle = _a.animationEnteringStyle,
        animationEnteredStyle = _a.animationEnteredStyle,
        animationExitingStyle = _a.animationExitingStyle,
        animationExitedStyle = _a.animationExitedStyle,
        other = __rest(_a, ["appear", "enter", "exit", "transitionName", "transitionEnterDuration", "transitionExitDuration", "className", "componentChildClassName", "mountOnEnter", "unmountOnExit", "animationEnteringStyle", "animationEnteredStyle", "animationExitingStyle", "animationExitedStyle"]);

    var defaultSlot = getDefaultSlots(this);
    var hasChildren = this.v3 ? appear : !!defaultSlot;
    var transitionTag = this.v3 ? Transition : 'transition';
    var childAnimationContainerClassNames = [componentChildClassName, styles['child-animation-container']];
    var enterDuration = enter ? transitionEnterDuration : 0;
    var exitDuration = exit ? transitionExitDuration : 0;

    var defaultStyle = __assign({
      transitionDelay: '0ms',
      transitionDuration: hasChildren ? enterDuration + "ms" : exitDuration + "ms"
    }, this.$props.transitionStyle);

    var animationStyle = {
      entering: __assign({
        transitionDuration: enterDuration + "ms"
      }, animationEnteringStyle),
      entered: __assign({}, animationEnteredStyle),
      exiting: __assign({
        transitionDuration: exitDuration + "ms"
      }, animationExitingStyle),
      exited: __assign({}, animationExitedStyle)
    };
    var childElementStyles = [defaultStyle, animationStyle[this.animationStep]];
    var duration = {
      enter: enterDuration,
      leave: exitDuration
    };
    var rendererChildren = [hasChildren ? h('div', {
      style: childElementStyles,
      'class': childAnimationContainerClassNames,
      ref: this.v3 ? function (el) {
        _this.elementRef = el;
      } : 'element'
    }, [defaultSlot]) : null];
    return h(transitionTag, {
      duration: duration,
      attrs: this.v3 ? null : {
        duration: duration,
        name: transitionName,
        appear: appear,
        appearClass: styles[transitionName + "-appear"] || transitionName + "-appear",
        appearToClass: styles[transitionName + "-appear-active"] || transitionName + "-appear-active",
        enterClass: styles[transitionName + "-enter"] || transitionName + "-enter",
        enterToClass: styles[transitionName + "-enter-active"] || transitionName + "-enter-active",
        leaveClass: styles[transitionName + "-exit"] || transitionName + "-exit",
        leaveToClass: styles[transitionName + "-exit-active"] || transitionName + "-exit-active"
      },
      name: transitionName,
      appear: appear,
      appearFromClass: styles[transitionName + "-appear"] || transitionName + "-appear",
      enterFromClass: styles[transitionName + "-enter"] || transitionName + "-enter",
      leaveFromClass: styles[transitionName + "-exit"] || transitionName + "-exit",
      appearToClass: styles[transitionName + "-appear-active"] || transitionName + "-appear-active",
      enterToClass: styles[transitionName + "-enter-active"] || transitionName + "-enter-active",
      leaveToClass: styles[transitionName + "-exit-active"] || transitionName + "-exit-active",
      onBeforeEnter: this.onBeforeEnter,
      on: this.v3 ? null : {
        'beforeEnter': this.onBeforeEnter,
        'enter': this.onEnter,
        'afterEnter': this.onAfterEnter,
        'beforeLeave': this.onBeforeLeave,
        'leave': this.onLeave,
        'afterLeave': this.onAfterLeave
      },
      onEnter: this.onEnter,
      onAfterEnter: this.onAfterEnter,
      onBeforeLeave: this.onBeforeLeave,
      onLeave: this.onLeave,
      onAfterLeave: this.onAfterLeave
    }, this.v3 ? function () {
      return rendererChildren;
    } : rendererChildren);
  }
};
export { AnimationChild };