import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { AnimationInterface } from './AnimationInterface';
/**
 * @hidden
 */
export interface AnimationProps extends AnimationInterface {
    /**
     * When the element reaches its exit state, it is no longer available
     *  in the DOM.
     */
    childFactory?: any;
    /**
     * Specifies the name of the CSS class which is set to the Animation.
     */
    className?: string;
    /**
     * Specifies the node type of the parent Animation. Defaults to `div`.
     */
    tag?: string;
    /**
     * Specifies the id of the Animation.
     */
    id?: string;
    /**
     * Specifies the id of the Animation.
     */
    key?: string;
    /**
     * Specifies whether the Animation children will stack on top of each other
     *  without interfering ([see example]({% slug stacked_animation_native %})).
     */
    stackChildren?: boolean;
    /**
     * Specifies the `classNames` which will be applied during the
     *  transition ([see example]({% slug customizing_animation_native %})).
     */
    transitionName: string;
    /**
     * Specifies the style which will be applied when the Animation reaches its entering state.
     */
    animationEnteringStyle?: any;
    /**
     * Specifies the style which will be applied when the Animation reaches its entered state.
     */
    animationEnteredStyle?: any;
    /**
     * Specifies the style which will be applied when the Animation reaches its exiting state.
     */
    animationExitingStyle?: any;
    /**
     * Specifies the style which will be applied when the Animation reaches its exited state.
     */
    animationExitedStyle?: any;
}
/**
 * @hidden
 */
export interface AnimationMethods extends Vue {
    onEntering: (e: any) => void;
    onEnter: (e: any) => void;
    onEntered: (e: any) => void;
    onExit: (e: any) => void;
    onExiting: (e: any) => void;
    onExited: (e: any) => void;
}
/**
 * Represents the default `Animation` component.
 */
declare let Animation: ComponentOptions<Vue, DefaultData<{}>, DefaultMethods<AnimationMethods>, {}, RecordPropsDefinition<AnimationProps>>;
export { Animation };
