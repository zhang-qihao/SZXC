var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}; // @ts-ignore


import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
import { Animation } from './Animation';
import util from './util';
import { getDefaultSlots } from '@progress/kendo-vue-common';
/**
 * @hidden
 */

var noop = function noop() {};
/**
 * Represents the default `Reveal` component.
 */


var Reveal = {
  props: {
    appear: {
      type: Boolean,
      default: false
    },
    enter: {
      type: Boolean,
      default: true
    },
    exit: {
      type: Boolean,
      default: true
    },
    transitionEnterDuration: {
      type: Number,
      default: 300
    },
    transitionExitDuration: {
      type: Number,
      default: 300
    },
    childFactory: Object,
    className: String,
    direction: {
      type: String,
      default: 'vertical'
    },
    tag: String,
    id: String
  },
  data: function data() {
    return {
      maxHeight: '',
      maxWidth: ''
    };
  },
  methods: {
    componentWillEnter: function componentWillEnter(event) {
      var onEnter = this.$props.onEnter;
      this.updateContainerDimensions(event.animatedElement, function () {
        if (onEnter) {
          onEnter.call(undefined, event);
        }
      });
    },
    componentIsEntering: function componentIsEntering(event) {
      var onEntering = this.$props.onEntering;
      this.updateContainerDimensions(event.animatedElement, function () {
        if (onEntering) {
          onEntering.call(undefined, event);
        }
      });
    },
    componentWillExit: function componentWillExit(event) {
      var onExit = this.$props.onExit;
      this.updateContainerDimensions(event.animatedElement, function () {
        if (onExit) {
          onExit.call(undefined, event);
        }
      });
    },
    updateContainerDimensions: function updateContainerDimensions(node, done) {
      if (done === void 0) {
        done = noop;
      }

      var content = node ? node.firstElementChild : null;

      if (content) {
        var newHeight = util.outerHeight(content);
        var newWidth = util.outerWidth(content);
        this.$data.maxHeight = newHeight;
        this.$data.maxWidth = newWidth;
        done();
      }
    }
  },
  computed: {
    animationEnteringStyle: {
      get: function get() {
        var maxOffset;

        if (this.$props.direction === 'vertical') {
          maxOffset = {
            maxHeight: this.maxHeight ? this.maxHeight + "px" : null
          };
        } else {
          maxOffset = {
            maxWidth: this.maxWidth ? this.maxWidth + "px" : null
          };
        }

        return {
          maxHeight: maxOffset.maxHeight,
          maxWidth: maxOffset.maxWidth
        };
      }
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);

    var _a = this.$props,
        direction = _a.direction,
        childFactory = _a.childFactory,
        other = __rest(_a, ["direction", "childFactory"]);

    var transitionName = "reveal-" + this.$props.direction;
    return (// @ts-ignore function children
      h(Animation, {
        appear: this.$props.appear,
        attrs: this.v3 ? undefined : {
          appear: this.$props.appear,
          enter: this.$props.enter,
          exit: this.$props.exit,
          transitionEnterDuration: this.$props.transitionEnterDuration,
          transitionExitDuration: this.$props.transitionExitDuration,
          animationEnteringStyle: this.animationEnteringStyle,
          transitionName: transitionName
        },
        enter: this.$props.enter,
        exit: this.$props.exit,
        transitionEnterDuration: this.$props.transitionEnterDuration,
        transitionExitDuration: this.$props.transitionExitDuration,
        onEnter: this.componentWillEnter,
        on: this.v3 ? undefined : {
          "enter": this.componentWillEnter,
          "entering": this.componentIsEntering,
          "exit": this.componentWillExit
        },
        onEntering: this.componentIsEntering,
        onExit: this.componentWillExit,
        animationEnteringStyle: this.animationEnteringStyle,
        transitionName: transitionName
      }, this.v3 ? function () {
        return [defaultSlot];
      } : [defaultSlot])
    );
  }
};
export { Reveal };