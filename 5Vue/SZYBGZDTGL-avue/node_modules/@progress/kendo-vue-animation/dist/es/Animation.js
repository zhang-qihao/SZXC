var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}; // @ts-ignore


import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
import { AnimationChild } from './AnimationChild';
import { getDefaultSlots } from '@progress/kendo-vue-common';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from './package-metadata';
import util from './util';
var styles = util.styles;
/**
 * Represents the default `Animation` component.
 */

var Animation = {
  props: {
    childFactory: Object,
    className: String,
    tag: String,
    id: String,
    animationEnteringStyle: Object,
    animationExitingStyle: Object,
    componentChildClassName: [Array],
    transitionName: {
      type: String,
      required: true
    },
    appear: {
      type: Boolean,
      default: true
    },
    enter: {
      type: Boolean,
      default: true
    },
    exit: {
      type: Boolean,
      default: true
    },
    transitionEnterDuration: {
      type: Number
    },
    transitionExitDuration: {
      type: Number
    }
  },
  methods: {
    onEntering: function onEntering(e) {
      this.$emit('entering', e);
    },
    onEnter: function onEnter(e) {
      this.$emit('enter', e);
    },
    onEntered: function onEntered(e) {
      this.$emit('entered', e);
    },
    onExit: function onExit(e) {
      this.$emit('exit', e);
    },
    onExiting: function onExiting(e) {
      this.$emit('exiting', e);
    },
    onExited: function onExited(e) {
      this.$emit('exited', e);
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  created: function created() {
    validatePackage(packageMetadata);
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);

    var _a = this.$props,
        id = _a.id,
        tag = _a.tag,
        className = _a.className,
        childFactory = _a.childFactory,
        stackChildren = _a.stackChildren,
        componentChildStyle = _a.componentChildStyle,
        componentChildClassName = _a.componentChildClassName,
        other = __rest(_a, ["id", "tag", "className", "childFactory", "stackChildren", "componentChildStyle", "componentChildClassName"]);

    var parentDivClass = [styles['animation-container'], styles['animation-container-relative'], className];
    return h("div", {
      id: this.$props.id,
      attrs: this.v3 ? undefined : {
        id: this.$props.id
      },
      "class": parentDivClass
    }, [// @ts-ignore function children
    h(AnimationChild, {
      key: 'some',
      appear: this.$props.appear,
      attrs: this.v3 ? undefined : {
        appear: this.$props.appear,
        enter: this.$props.enter,
        exit: this.$props.exit,
        transitionName: this.$props.transitionName,
        componentChildClassName: this.$props.componentChildClassName,
        animationEnteringStyle: this.$props.animationEnteringStyle,
        animationExitingStyle: this.$props.animationExitingStyle,
        transitionEnterDuration: this.$props.transitionEnterDuration,
        transitionExitDuration: this.$props.transitionExitDuration
      },
      enter: this.$props.enter,
      exit: this.$props.exit,
      transitionName: this.$props.transitionName,
      componentChildClassName: this.$props.componentChildClassName,
      onBeforeenter: this.onEnter,
      on: this.v3 ? undefined : {
        "beforeenter": this.onEnter,
        "entering": this.onEntering,
        "entered": this.onEntered,
        "exit": this.onExit,
        "exiting": this.onExiting,
        "exited": this.onExited
      },
      onEntering: this.onEntering,
      onEntered: this.onEntered,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited,
      animationEnteringStyle: this.$props.animationEnteringStyle,
      animationExitingStyle: this.$props.animationExitingStyle,
      transitionEnterDuration: this.$props.transitionEnterDuration,
      transitionExitDuration: this.$props.transitionExitDuration
    }, this.v3 ? function () {
      return [defaultSlot];
    } : [defaultSlot])]);
  }
};
export { Animation };