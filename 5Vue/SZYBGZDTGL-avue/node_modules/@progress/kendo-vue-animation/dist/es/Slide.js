var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}; // @ts-ignore


import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
import { Animation } from './Animation';
import { getDefaultSlots } from '@progress/kendo-vue-common';
/**
 * Represents the default `Slide` component.
 */

var Slide = {
  props: {
    appear: {
      type: Boolean,
      default: false
    },
    enter: {
      type: Boolean,
      default: true
    },
    exit: {
      type: Boolean,
      default: true
    },
    transitionEnterDuration: {
      type: Number,
      default: 300
    },
    transitionExitDuration: {
      type: Number,
      default: 300
    },
    componentChildClassName: [Array],
    childFactory: Object,
    className: String,
    direction: {
      type: String,
      default: 'down'
    },
    tag: String,
    id: String
  },
  methods: {
    onEntering: function onEntering(e) {
      this.$emit('entering', e);
    },
    onEnter: function onEnter(e) {
      this.$emit('enter', e);
    },
    onEntered: function onEntered(e) {
      this.$emit('entered', e);
    },
    onExit: function onExit(e) {
      this.$emit('exit', e);
    },
    onExiting: function onExiting(e) {
      this.$emit('exiting', e);
    },
    onExited: function onExited(e) {
      this.$emit('exited', e);
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);

    var _a = this.$props,
        direction = _a.direction,
        other = __rest(_a, ["direction"]);

    var transitionName = "slide-" + this.$props.direction;
    return (// @ts-ignore function children
      h(Animation, {
        transitionName: transitionName,
        attrs: this.v3 ? undefined : {
          transitionName: transitionName,
          componentChildClassName: this.$props.componentChildClassName,
          appear: this.$props.appear,
          enter: this.$props.enter,
          exit: this.$props.exit,
          transitionEnterDuration: this.$props.transitionEnterDuration,
          transitionExitDuration: this.$props.transitionExitDuration
        },
        componentChildClassName: this.$props.componentChildClassName,
        appear: this.$props.appear,
        enter: this.$props.enter,
        exit: this.$props.exit,
        onEnter: this.onEnter,
        on: this.v3 ? undefined : {
          "enter": this.onEnter,
          "entering": this.onEntering,
          "entered": this.onEntered,
          "exit": this.onExit,
          "exiting": this.onExiting,
          "exited": this.onExited
        },
        onEntering: this.onEntering,
        onEntered: this.onEntered,
        onExit: this.onExit,
        onExiting: this.onExiting,
        onExited: this.onExited,
        transitionEnterDuration: this.$props.transitionEnterDuration,
        transitionExitDuration: this.$props.transitionExitDuration
      }, this.v3 ? function () {
        return [defaultSlot];
      } : [defaultSlot])
    );
  }
};
export { Slide };