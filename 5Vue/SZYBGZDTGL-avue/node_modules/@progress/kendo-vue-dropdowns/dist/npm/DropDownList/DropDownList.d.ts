import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => DropDownListData);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { FormComponentValidity } from '@progress/kendo-vue-common';
import { DropDownListProps } from './DropDownListProps';
import { DropDownStateBase, InternalState } from './../common/settings';
/**
 * @hidden
 */
export interface DropDownListState extends DropDownStateBase {
}
/**
 * @hidden
 */
export interface DropDownListMethods extends Vue {
    focus: (e: any) => void;
    computedValue: () => any;
    validity: () => FormComponentValidity;
    handleItemSelect: (index: number, state: InternalState) => void;
    onNavigate: (state: InternalState, keyCode: number) => void;
    search: (event: any) => void;
    selectNext: (event: any) => void;
    handleKeyDown: (event: any) => void;
    handleItemClick: (index: number, event: any) => void;
    handleFocus: (event: any) => void;
    handleBlur: (event: any) => void;
    handleDefaultItemClick: (event: any) => void;
    handleWrapperClick: (event: any) => void;
    handleKeyPress: (event: any) => void;
    handleListFilterChange: (event: any) => void;
    onPopupOpened: () => void;
    onPopupClosed: () => void;
    focusedIndex: () => number;
    focusElement: (element: HTMLElement) => void;
    setValidity: () => void;
    triggerOnChange: (item: any, state: InternalState) => void;
    applyState: (state: InternalState) => void;
}
/**
 * @hidden
 */
export interface DropDownListState {
    anchor: string;
    typingTimeout: any;
    base: any;
    select: any;
    filterInput: any;
    virtualHasChanged: any;
    inputId: string;
    prevOpened: any;
    prevCurrentOpened: any;
    prevValue: any;
    prevCurrnetValue: any;
    selectRef: any;
    baseWrapperRef: any;
    listRef: any;
    filterInputRef: any;
    scrollElementRef: any;
    scrollerRef: any;
    kendoAnchorRef: any;
    v3: boolean;
}
/**
 * @hidden
 */
export interface DropDownListData {
    hasMounted: boolean;
    currentText?: string;
    currentValue?: any;
    currentFocused?: boolean;
    currentOpened?: boolean;
    searchState?: any;
    _skipFocusEvent: boolean;
    valueDuringOnChange: any;
    _navigated: boolean;
}
/**
 * @hidden
 */
export interface DropDownListComputed {
    spanClassNames: any;
    index: number;
}
/**
 * @hidden
 */
export interface DropDownListAll extends DropDownListMethods, DropDownListState, DropDownListData, DropDownListComputed {
}
/**
 * Represents the default `DropDownList` component.
 */
declare let DropDownList: ComponentOptions<Vue, DefaultData<DropDownListData>, DefaultMethods<DropDownListAll>, DropDownListComputed, RecordPropsDefinition<DropDownListProps>>;
export { DropDownList };
