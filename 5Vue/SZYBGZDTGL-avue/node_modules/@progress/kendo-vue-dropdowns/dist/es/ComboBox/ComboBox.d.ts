import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => ComboBoxData);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { ComboBoxProps } from './ComboBoxProps';
import { DropDownStateBase, InternalState } from './../common/settings';
import { FormComponentValidity } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
export interface ComboBoxMethods extends Vue {
    focus: (e: any) => void;
    computedValue: () => any;
    validity: () => FormComponentValidity;
    handleItemSelect: (index: number, state: InternalState) => void;
    onNavigate: (state: InternalState, keyCode: number) => void;
    toggleBtnClick: (event: any) => void;
    applyValueOnEnter: (value: string, state: InternalState) => void;
    applyValueOnRejectSuggestions: (text: string, state: InternalState) => void;
    selectFocusedItem: (text: string, state: InternalState) => void;
    handleItemClick: (index: number, event: any) => void;
    handleFocus: (event: any) => void;
    handleBlur: (event: any) => void;
    onInputKeyDown: (event: any) => void;
    inputOnChange: (event: any) => void;
    clearButtonClick: (event: any) => void;
    getFocusedIndex: () => number;
    suggestValue: (value?: string) => void;
    setValidity: () => void;
    triggerOnChange: (item: any, state: InternalState) => void;
    applyState: (state: InternalState) => void;
}
/**
 * @hidden
 */
export interface ComboBoxState extends DropDownStateBase {
    anchor: string;
    typingTimeout: any;
    base: any;
    input: any;
    element: any;
    inputId: string;
    virtualHasChanged: any;
    prevOpened: any;
    prevCurrentOpened: any;
    prevValue: any;
    prevCurrentValue: any;
    inputRef: any;
    elementRef: any;
    baseWrapperRef: any;
    listRef: any;
    filterInputRef: any;
    scrollElementRef: any;
    scrollerRef: any;
    kendoAnchorRef: any;
    v3: boolean;
}
/**
 * @hidden
 */
export interface ComboBoxData {
    suggested?: string;
    focusedItem?: any;
    hasMounted: boolean;
    currentText?: string;
    currentValue?: any;
    currentFocused?: boolean;
    currentOpened?: boolean;
    currentFocusedItem?: any;
    searchState?: any;
    _skipFocusEvent: boolean;
    valueDuringOnChange: any;
    valueOnDidUpdate: any;
    virtualTotalHasChanged?: boolean;
    _navigated: boolean;
}
/**
 * @hidden
 */
export interface ComboBoxComputed {
    spanClassNames: any;
    index: number;
}
/**
 * @hidden
 */
export interface ComboBoxAll extends ComboBoxMethods, ComboBoxState, ComboBoxData, ComboBoxComputed {
}
/**
 * Represents the default `ComboBox` component.
 */
declare let ComboBox: ComponentOptions<Vue, DefaultData<ComboBoxData>, DefaultMethods<ComboBoxAll>, ComboBoxComputed, RecordPropsDefinition<ComboBoxProps>>;
export { ComboBox };
