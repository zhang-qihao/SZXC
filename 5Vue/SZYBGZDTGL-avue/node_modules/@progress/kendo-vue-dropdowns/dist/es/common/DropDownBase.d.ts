import { VNode } from 'vue';
import VirtualScroll from './VirtualScroll';
import { Navigation } from './Navigation';
import { ListItemProps } from './ListItem';
import { InternalState, DropDownStateBase, Page, DropDownsPopupSettings, VirtualizationSettings } from './settings';
/**
 * @hidden
 */
export interface DropDownComponentProps {
    data?: any[];
    opened?: boolean;
    value?: any;
    disabled?: boolean;
    tabIndex?: number;
    dir?: string;
    defaultItem?: any;
    filterable?: boolean;
    filter?: string | null;
    textField?: string;
    dataItemKey?: string;
    popupSettings?: DropDownsPopupSettings;
    style?: any;
    virtual?: VirtualizationSettings;
    onOpen?: (event: any) => void;
    onClose?: (event: any) => void;
    onFocus?: (event: any) => void;
    onBlur?: (event: any) => void;
    onChange?: (event: any) => void;
    onFilterChange?: (event: any) => void;
    onPageChange?: (event: any) => void;
    itemRender?: (li: Element, itemProps: ListItemProps) => VNode;
    listNoDataRender?: (element: any) => VNode;
    header?: VNode;
    footer?: VNode;
}
/**
 * @hidden
 */
export interface DropDownComponent {
    state: DropDownStateBase;
    element: HTMLSpanElement | null;
    handleItemSelect: Function;
    value: any;
    currentOpened: boolean;
    currentFocused: boolean;
}
/**
 * @hidden
 */
export default class DropDownBase {
    static defaultProps: {
        popupSettings: {
            animate: boolean;
            height: string;
        };
        required: boolean;
        validityStyles: boolean;
    };
    popupWidth?: string;
    wrapper: any;
    list: HTMLUListElement;
    dirCalculated?: string;
    readonly vs: VirtualScroll;
    readonly navigation: Navigation;
    readonly listBoxId: string;
    readonly guid: string;
    readonly component: DropDownComponent;
    constructor(component: any);
    didMount(): void;
    calculateDir(): void;
    calculatePopupWidth(): void;
    scrollToItem(itemIndex: number, vsEnabled?: boolean): void;
    handleItemClick: (index: number, event: any) => void;
    handleFocus: any;
    filterChanged: (text: string | null, state: InternalState) => void;
    initState(): InternalState;
    applyState(state: InternalState): void;
    togglePopup: (state: InternalState) => void;
    pageChange: (page: Page, event: any) => void;
    triggerOnPageChange(state: InternalState, skip: number, take: number): void;
    triggerPageChangeCornerItems(item: any, state: InternalState): void;
    scrollToVirtualItem: (virtual: VirtualizationSettings, selectedItemIndex: number) => void;
}
