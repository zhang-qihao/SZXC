// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
var inject = allVue.inject;
import { ListItem } from './ListItem';
import { areSame } from './utils';
import { getTemplate } from '@progress/kendo-vue-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, nodata } from '../messages';
/**
 * Represents the default `List` component.
 */

var List = {
  name: 'list',
  props: {
    id: String,
    show: Boolean,
    dataItems: Array,
    value: [Object, String, Number, Boolean, Array],
    textField: String,
    valueField: String,
    optionsGuid: String,
    wrapperCssClass: String,
    wrapperStyle: Object,
    listStyle: Object,
    skip: Number,
    focusedIndex: Number,
    highlightSelected: {
      type: Boolean,
      default: true
    },
    itemRender: [String, Function, Object],
    noDataRender: [String, Function, Object]
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var listRef = ref(null);
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      listRef: listRef,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  mounted: function mounted() {
    this.list = this.v3 ? this.listRef : this.$refs.list;
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit('listclick', e);
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;

    var h = gh || createElement;
    var localizationService = provideLocalizationService(this);
    var _a = this.$props,
        id = _a.id,
        show = _a.show,
        wrapperCssClass = _a.wrapperCssClass,
        wrapperStyle = _a.wrapperStyle,
        listStyle = _a.listStyle,
        listRef = _a.listRef;

    var renderNoValueElement = function renderNoValueElement() {
      var noDataRender = this.$props.noDataRender;
      var noDataElement = h("div", {
        "class": 'k-nodata'
      }, [h("div", [localizationService.toLanguageString(nodata, messages[nodata])])]);
      return getTemplate.call(this, {
        h: h,
        template: noDataRender,
        defaultRendering: noDataElement
      });
    };

    var renderItems = function renderItems() {
      var _a = this.$props,
          textField = _a.textField,
          valueField = _a.valueField,
          optionsGuid = _a.optionsGuid,
          _b = _a.skip,
          skip = _b === void 0 ? 0 : _b,
          focusedIndex = _a.focusedIndex,
          highlightSelected = _a.highlightSelected,
          value = _a.value,
          itemRender = _a.itemRender;
      var isArray = Array.isArray(value);
      return this.$props.dataItems.map(function (item, index) {
        var realIndex = skip + index;
        var selected = highlightSelected && (!isArray && areSame(item, value, valueField) || isArray && value.findIndex(function (i) {
          return areSame(i, item, valueField);
        }) !== -1);
        return (// @ts-ignore
          h(ListItem, {
            id: "option-" + optionsGuid + "-" + realIndex,
            attrs: this.v3 ? undefined : {
              id: "option-" + optionsGuid + "-" + realIndex,
              dataItem: item,
              selected: selected,
              focused: focusedIndex === index,
              index: realIndex,
              textField: textField,
              render: itemRender
            },
            dataItem: item,
            selected: selected,
            focused: focusedIndex === index,
            index: realIndex,
            key: realIndex,
            onItemclick: this.handleClick,
            on: this.v3 ? undefined : {
              "itemclick": this.handleClick
            },
            textField: textField,
            render: itemRender
          })
        );
      }, this);
    };

    var items = renderItems.call(this);
    return items.length ? h("div", {
      "class": wrapperCssClass,
      style: wrapperStyle,
      unselectable: 'on',
      attrs: this.v3 ? undefined : {
        unselectable: 'on'
      }
    }, [h("ul", {
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        role: "listbox",
        "aria-hidden": !show ? true : undefined
      },
      role: "listbox",
      "aria-hidden": !show ? true : undefined,
      "class": 'k-list k-reset',
      ref: this.v3 ? function (el) {
        _this.listRef = el;
      } : 'list',
      style: listStyle
    }, [items])]) : renderNoValueElement.call(this);
  }
};
export { List };