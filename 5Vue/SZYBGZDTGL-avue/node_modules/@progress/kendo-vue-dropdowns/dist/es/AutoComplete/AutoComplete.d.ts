import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => AutoCompleteData);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { AutoCompleteProps } from './AutoCompleteProps';
import { DropDownStateBase, InternalState } from './../common/settings';
import { FormComponentValidity } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
export interface AutoCompleteState extends DropDownStateBase {
    focusedItem?: any;
    value?: string;
}
/**
 * @hidden
 */
export interface AutoCompleteInternalState extends InternalState {
    data: AutoCompleteState;
}
/**
 * @hidden
 */
export interface AutoCompleteMethods extends Vue {
    focus: (e: any) => void;
    computedValue: () => any;
    validity: () => FormComponentValidity;
    handleItemSelect: (index: number, state: AutoCompleteInternalState) => void;
    itemFocus: (index: number, state: AutoCompleteInternalState) => void;
    togglePopup: (state: InternalState) => void;
    onNavigate: (state: AutoCompleteInternalState, keyCode: number) => void;
    applyInputValue: (value: string, state: AutoCompleteInternalState, eventKey?: number) => void;
    setValidity: () => void;
    handleItemClick: (index: number, event: any) => void;
    onChangeHandler: (event: any) => void;
    clearButtonClick: (event: any) => void;
    onInputKeyDown: (event: any) => void;
    handleBlur: (event: any) => void;
    triggerOnChange: (newValue: string, state: AutoCompleteInternalState, eventArgs?: any) => void;
    applyState: (state: AutoCompleteInternalState) => void;
    suggestValue: (value: string) => void;
    focusedIndex: (value?: string) => any;
}
/**
 * @hidden
 */
export interface AutoCompleteState extends DropDownStateBase {
    anchor: string;
    typingTimeout: any;
    base: any;
    input: any;
    element: any;
    inputId: string;
    virtualHasChanged: any;
    prevOpened: any;
    prevCurrentOpened: any;
    prevData: any;
    prevFocusedItem: any;
    inputRef: any;
    listRef: any;
    filterInputRef: any;
    scrollElementRef: any;
    scrollerRef: any;
    kendoAnchorRef: any;
    v3: boolean;
}
/**
 * @hidden
 */
export interface AutoCompleteData {
    suggested?: string;
    focusedItem?: any;
    hasMounted: boolean;
    currentText?: string;
    currentValue?: any;
    currentFocused?: boolean;
    currentOpened?: boolean;
    currentFocusedItem?: any;
    searchState?: any;
    _skipFocusEvent: boolean;
    valueDuringOnChange: any;
    valueOnDidUpdate: any;
    virtualTotalHasChanged?: boolean;
}
/**
 * @hidden
 */
export interface AutoCompleteComputed {
    spanClassNames: any;
}
/**
 * @hidden
 */
export interface AutoCompleteAll extends AutoCompleteMethods, AutoCompleteState, AutoCompleteData, AutoCompleteComputed {
}
/**
 * Represents the default `AutoComplete` component.
 */
declare let AutoComplete: ComponentOptions<Vue, DefaultData<AutoCompleteData>, DefaultMethods<AutoCompleteAll>, AutoCompleteComputed, RecordPropsDefinition<AutoCompleteProps>>;
export { AutoComplete };
