var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
}; // @ts-ignore


import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
import { templateRendering, getListeners, classNames, Keys, guid, noop, getTemplate } from '@progress/kendo-vue-common';
import { ListContainer } from '../common/ListContainer';
import { ListFilter } from '../common/ListFilter';
import { ListDefaultItem } from '../common/ListDefaultItem';
import { List } from '../common/List';
import DropDownBase from '../common/DropDownBase';
import { isPresent, getItemValue, sameCharsOnly, shuffleData, matchText, areSame, preventDefaultNonInputs, getFocusedItem } from '../common/utils';
var VALIDATION_MESSAGE = 'Please select a value from the list!';
/**
 * Represents the default `DropDownList` component.
 */

var DropDownList = {
  model: {
    event: 'changemodel'
  },
  props: {
    id: String,
    dataItemKey: {
      type: [Object, String]
    },
    defaultValue: {
      type: [String, Object, Number, Boolean],
      default: undefined
    },
    name: String,
    modelValue: {
      type: [String, Object, Number, Boolean],
      default: undefined
    },
    value: {
      type: [String, Object, Number, Boolean],
      default: undefined
    },
    label: {
      type: String
    },
    placeholder: String,
    required: {
      type: Boolean,
      default: false
    },
    valid: {
      type: Boolean,
      default: undefined
    },
    validate: {
      type: Boolean
    },
    validationMessage: {
      type: String,
      default: undefined
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    delay: {
      type: Number,
      default: 500
    },
    ignoreCase: {
      type: Boolean,
      default: true
    },
    iconClassName: String,
    defaultItem: [Object, String],
    valueRender: [String, Function, Object],
    valueMap: Function,
    opened: {
      type: Boolean,
      default: undefined
    },
    disabled: Boolean,
    dir: {
      type: String,
      default: undefined
    },
    tabIndex: {
      type: Number,
      default: 0
    },
    accessKey: String,
    dataItems: Array,
    textField: String,
    className: String,
    loading: Boolean,
    popupSettings: {
      type: Object,
      default: function _default() {
        return {
          animate: true,
          height: '200px'
        };
      }
    },
    itemRender: [String, Function, Object],
    listNoDataRender: [String, Function, Object],
    focusedItemIndex: Function,
    header: [String, Function, Object],
    footer: [String, Function, Object],
    filterable: Boolean,
    filter: {
      type: String,
      default: undefined
    },
    virtual: {
      type: Object,
      default: undefined
    },
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  data: function data() {
    return {
      hasMounted: false,
      currentText: '',
      currentValue: '',
      currentFocused: false,
      currentOpened: false,
      searchState: {
        word: '',
        last: ''
      },
      _skipFocusEvent: false,
      valueDuringOnChange: {},
      _navigated: false
    };
  },
  watch: {
    currentOpened: function currentOpened(_, oldValue) {
      // @ts-ignore
      this.prevCurrentOpened = oldValue;
    },
    opened: function opened(_, oldValue) {
      // @ts-ignore
      this.prevOpened = oldValue;
    },
    value: function value(_, oldValue) {
      // @ts-ignore
      this.prevValue = oldValue;
    },
    currentValue: function currentValue(_, oldValue) {
      // @ts-ignore
      this.prevCurrnetValue = oldValue;
    },
    virtual: function virtual(_newValue, _oldValue) {
      // @ts-ignore
      if (_newValue.total !== _oldValue.total) {
        // @ts-ignore
        this.virtualTotalHasChanged = true;
      } // @ts-ignore


      this.virtualHasChanged = true;
    }
  },
  created: function created() {
    this.valueDuringOnChange = undefined;
    this.currentText = undefined;
    this.currentValue = undefined;
    this.currentFocused = undefined;
    this.currentOpened = undefined;
    this.base = new DropDownBase(this);
    this.anchor = guid();
    this.inputId = guid();
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var selectRef = ref(null);
    var baseWrapperRef = ref(null);
    var kendoAnchorRef = ref(null);
    return {
      v3: v3,
      selectRef: selectRef,
      baseWrapperRef: baseWrapperRef,
      kendoAnchorRef: kendoAnchorRef
    };
  },
  mounted: function mounted() {
    this.hasMounted = true;
    this.select = this.v3 ? this.selectRef : this.$refs.select;
    this.base.wrapper = this.v3 ? this.baseWrapperRef : this.$refs.baseWrapper;
    this.base.didMount();
    this.setValidity();
  },
  updated: function updated() {
    var _a = this.$props,
        _b = _a.dataItems,
        dataItems = _b === void 0 ? [] : _b,
        dataItemKey = _a.dataItemKey,
        virtual = _a.virtual;
    var opened = this.$props.opened !== undefined ? this.$props.opened : this.currentOpened;
    var prevOpened = this.prevOpened !== undefined ? this.prevOpened : this.prevCurrentOpened;
    var opening = !prevOpened && opened;
    var closing = prevOpened && !opened;
    var list = this.$refs.list;
    var filterInput = this.$refs.filterInput;
    var scrollElement = this.$refs.scrollElement;
    var scroller = this.$refs.scroller;

    if (list) {
      // @ts-ignore
      this.base.vs.list = list.list; // @ts-ignore

      this.base.list = list.list;
    }

    if (scrollElement) {
      this.base.vs.scrollElement = scrollElement;
    }

    if (filterInput) {
      this.filterInput = filterInput;
    }

    if (scroller) {
      this.base.vs.scrollerRef(scroller);
    }

    if (!this.$props.popupSettings.animate) {
      if (opening) {
        this.onPopupOpened();
      } else if (closing) {// this.onPopupClosed();
      }
    } // @ts-ignore


    if (virtual && this.virtualTotalHasChanged) {
      this.base.vs.calcScrollElementHeight();
      this.base.vs.reset(); // @ts-ignore

      this.virtualTotalHasChanged = false;
    } else {
      var selectedItem_1 = this.computedValue();
      var prevSelectedItem = this.prevValue !== undefined ? this.prevValue : this.prevCurrnetValue;
      var selectedItemIndex = dataItems.findIndex(function (i) {
        return areSame(i, selectedItem_1, dataItemKey);
      });
      var selectedItemChanged = !areSame(prevSelectedItem, selectedItem_1, dataItemKey);

      if (opening && virtual) {
        this.base.scrollToVirtualItem(virtual, selectedItemIndex);
        this.prevCurrentOpened = true;
      } else if (opening && !virtual) {
        this.base.scrollToItem(selectedItemIndex);
        this.prevCurrentOpened = true;
      } else if (opened && prevOpened && selectedItem_1 && selectedItemChanged && !this._navigated) {
        this.base.scrollToItem(selectedItemIndex);
      } else if (opened && prevOpened && this._navigated) {
        if (this._navigated && virtual && virtual.skip === 0) {
          this.base.vs.reset();
        } else if (this._navigated && virtual && virtual.skip === virtual.total - virtual.pageSize) {
          this.base.vs.scrollToEnd();
        }
      }
    }

    this._navigated = false;
    this.setValidity();
  },
  computed: {
    index: {
      get: function get() {
        var _a = this.$props,
            _b = _a.dataItems,
            dataItems = _b === void 0 ? [] : _b,
            dataItemKey = _a.dataItemKey;
        var value = this.computedValue(); // TO DO: deprecate it!

        return dataItems.findIndex(function (i) {
          return areSame(i, value, dataItemKey);
        });
      }
    },
    spanClassNames: {
      get: function get() {
        var isValid = !this.hasMounted || !this.$props.validityStyles || this.validity().valid;
        return {
          'k-textbox-container': true,
          'k-state-focused': this.currentFocused,
          'k-state-empty': !this.computedValue(),
          'k-state-invalid': !isValid && isValid !== undefined,
          'k-rtl': this.$props.dir === 'rtl'
        };
      }
    }
  },
  methods: {
    focus: function focus() {
      if (this.base.wrapper) {
        this.base.wrapper.focus();
      }
    },
    computedValue: function computedValue() {
      var value;

      if (this.valueDuringOnChange !== undefined) {
        value = this.valueDuringOnChange;
      } else if (this.$props.value !== undefined) {
        value = this.$props.value;
      } else if (this.$props.modelValue !== undefined) {
        value = this.$props.modelValue;
      } else if (this.currentValue !== undefined) {
        value = this.currentValue;
      } else if (this.$props.defaultValue !== undefined) {
        value = this.$props.defaultValue;
      }

      if (!isPresent(value) && this.$props.defaultItem !== undefined) {
        value = this.$props.defaultItem;
      }

      return value;
    },
    validity: function validity() {
      var customError = this.$props.validationMessage !== undefined;
      var isValid = !this.$props.required || this.computedValue() !== null && this.computedValue() !== '' && this.computedValue() !== undefined;
      var valid = this.$props.valid !== undefined ? this.$props.valid : isValid;
      return {
        customError: customError,
        valid: valid,
        valueMissing: this.computedValue() === null
      };
    },
    handleItemSelect: function handleItemSelect(index, state) {
      var _a = this.$props,
          _b = _a.dataItems,
          dataItems = _b === void 0 ? [] : _b,
          virtual = _a.virtual,
          dataItemKey = _a.dataItemKey,
          defaultItem = _a.defaultItem;
      var skip = virtual ? virtual.skip : 0;
      var item = index === -1 && defaultItem !== undefined ? defaultItem : dataItems[index - skip];
      var newSelected = !areSame(item, this.computedValue(), dataItemKey);
      this.triggerOnChange(item, state);

      if (newSelected) {
        this.base.triggerPageChangeCornerItems(item, state);
      }
    },
    onNavigate: function onNavigate(state, keyCode) {
      var _a = this.$props,
          _b = _a.dataItems,
          dataItems = _b === void 0 ? [] : _b,
          defaultItem = _a.defaultItem,
          dataItemKey = _a.dataItemKey,
          _c = _a.virtual,
          virtual = _c === void 0 ? {
        skip: 0,
        total: 0,
        pageSize: 0
      } : _c;
      var vs = this.base.vs;
      var value = this.computedValue();
      var index = dataItems.findIndex(function (i) {
        return areSame(i, value, dataItemKey);
      });
      var newIndex = this.base.navigation.navigate({
        current: virtual.skip + index,
        max: (vs.enabled ? virtual.total : dataItems.length) - 1,
        min: defaultItem !== undefined ? -1 : 0,
        keyCode: keyCode
      });

      if (newIndex !== undefined) {
        this.handleItemSelect(newIndex, state);
      }

      this.applyState(state);
    },
    search: function search(event) {
      var _this = this;

      clearTimeout(this.typingTimeout);

      if (!this.$props.filterable) {
        this.typingTimeout = setTimeout(function () {
          return _this.searchState.word = '';
        }, this.$props.delay);
        this.selectNext(event);
      }
    },
    selectNext: function selectNext(event) {
      var _this = this;

      var _a = this.$props,
          _b = _a.dataItems,
          dataItems = _b === void 0 ? [] : _b,
          dataItemKey = _a.dataItemKey;
      var mappedData = dataItems.map(function (item, idx) {
        return {
          item: item,
          itemIndex: idx
        };
      });
      var word = this.searchState.word;
      var last = this.searchState.last;
      var isInLoop = sameCharsOnly(word, last);
      var dataLength = mappedData.length;
      var startIndex = Math.max(0, dataItems.findIndex(function (i) {
        return areSame(i, _this.computedValue(), dataItemKey);
      }));
      var defaultItem;

      if (this.$props.defaultItem) {
        defaultItem = {
          item: this.$props.defaultItem,
          itemIndex: -1
        };
        dataLength += 1;
        startIndex += 1;
      }

      startIndex += isInLoop ? 1 : 0;
      mappedData = shuffleData(mappedData, startIndex, defaultItem);
      var text,
          loopMatch,
          nextMatch,
          index = 0;
      var _c = this.$props,
          textField = _c.textField,
          ignoreCase = _c.ignoreCase;

      for (; index < dataLength; index++) {
        text = getItemValue(mappedData[index].item, textField);
        loopMatch = isInLoop && matchText(text, last, ignoreCase);
        nextMatch = matchText(text, word, ignoreCase);

        if (loopMatch || nextMatch) {
          index = mappedData[index].itemIndex;
          break;
        }
      }

      if (index !== dataLength) {
        var state = this.base.initState();
        state.event = event;
        this.handleItemSelect(index, state);
        this.applyState(state);
        this.valueDuringOnChange = undefined;
      }
    },
    handleKeyDown: function handleKeyDown(event) {
      var _a = this.$props,
          _b = _a.dataItems,
          dataItems = _b === void 0 ? [] : _b,
          filterable = _a.filterable,
          disabled = _a.disabled,
          _c = _a.virtual,
          virtual = _c === void 0 ? {
        skip: 0,
        total: 0,
        pageSize: 0
      } : _c;
      var opened = this.$props.opened !== undefined ? this.$props.opened : this.currentOpened;
      var keyCode = event.keyCode;
      var homeOrEndKeys = keyCode === Keys.home || keyCode === Keys.end;
      var upOrDownKeys = keyCode === Keys.up || keyCode === Keys.down;
      var shouldOpen = !opened && (event.altKey && keyCode === Keys.down || keyCode === Keys.enter || keyCode === Keys.space);
      var shouldClose = opened && (event.altKey && keyCode === Keys.up || keyCode === Keys.esc);
      var leftOrRightKeys = keyCode === Keys.left || keyCode === Keys.right;
      var shouldNavigate = upOrDownKeys || !filterable && (leftOrRightKeys || homeOrEndKeys);
      var state = this.base.initState();
      state.event = event;

      if (disabled) {
        return;
      } else if (homeOrEndKeys && this.base.vs.enabled) {
        if (keyCode === Keys.home) {
          if (virtual.skip !== 0) {
            this.base.triggerOnPageChange(state, 0, virtual.pageSize);
            this._navigated = true;
          } else {
            this.triggerOnChange(dataItems[0], state);
          }
        } else {
          if (virtual.skip < virtual.total - virtual.pageSize) {
            this.base.triggerOnPageChange(state, virtual.total - virtual.pageSize, virtual.pageSize);
            this._navigated = true;
          } else {
            this.triggerOnChange(dataItems[dataItems.length - 1], state);
          }
        }
      } else if (opened && keyCode === Keys.enter) {
        var focusedIndex = this.focusedIndex();

        if (focusedIndex !== undefined) {
          this.handleItemSelect(focusedIndex, state);
        }

        this.base.togglePopup(state);
        event.preventDefault();
      } else if (shouldOpen || shouldClose) {
        this.base.togglePopup(state);
        event.preventDefault();
      } else if (shouldNavigate) {
        this.onNavigate(state, keyCode);
        event.preventDefault();
      }

      this.applyState(state);
    },
    handleItemClick: function handleItemClick(index, event) {
      this.base.handleItemClick(index, event);
      this.valueDuringOnChange = undefined;
    },
    handleFocus: function handleFocus(event) {
      if (this._skipFocusEvent) {
        return;
      }

      this.base.handleFocus(event);
    },
    handleBlur: function handleBlur(event) {
      if (this._skipFocusEvent || !this.currentFocused) {
        return;
      }

      var opened = this.$props.opened !== undefined ? this.$props.opened : this.currentOpened;
      var state = this.base.initState();
      state.event = event;
      state.data.currentFocused = false;
      state.events.push({
        type: 'blur'
      });

      if (opened) {
        this.base.togglePopup(state);
      }

      this.applyState(state);
    },
    handleDefaultItemClick: function handleDefaultItemClick(event) {
      var state = this.base.initState();
      state.event = event;
      this.base.togglePopup(state);
      this.triggerOnChange(this.$props.defaultItem, state);
      this.applyState(state);
    },
    handleWrapperClick: function handleWrapperClick(event) {
      var state = this.base.initState();
      state.event = event;

      if (!this.currentFocused) {
        // @ts-ignore
        state.data.currentFocused = true;
      }

      this.base.togglePopup(state);
      this.applyState(state);
    },
    handleKeyPress: function handleKeyPress(event) {
      if (this.$props.filterable || event.keyCode === Keys.enter) {
        return;
      }

      var character = String.fromCharCode(event.charCode || event.keyCode);

      if (this.$props.ignoreCase) {
        character = character.toLowerCase();
      }

      if (character === ' ') {
        event.preventDefault();
      }

      this.searchState = {
        word: this.searchState.word + character,
        last: this.searchState.last + character
      };
      this.search(event);
    },
    handleListFilterChange: function handleListFilterChange(event) {
      var state = this.base.initState();
      state.event = event;

      if (this.$props.filter === undefined) {
        // @ts-ignore
        state.data.currentText = event.target.value;
      }

      this.base.filterChanged(event.target.value, state);
      this.applyState(state);
    },
    onPopupOpened: function onPopupOpened() {
      if (this.filterInput) {
        this.focusElement(this.filterInput.input);
      }
    },
    onPopupClosed: function onPopupClosed() {
      var _this = this;

      if (this.currentFocused) {
        setTimeout(function () {
          if (_this.currentFocused && _this.base.wrapper) {
            _this.focusElement(_this.base.wrapper);
          }
        });
      }
    },
    focusedIndex: function focusedIndex() {
      var filterText = isPresent(this.$props.filter) ? this.$props.filter : this.currentText;
      var _a = this.$props,
          _b = _a.dataItems,
          dataItems = _b === void 0 ? [] : _b,
          _c = _a.virtual,
          virtual = _c === void 0 ? {
        skip: 0
      } : _c,
          dataItemKey = _a.dataItemKey,
          textField = _a.textField,
          focusedItemIndex = _a.focusedItemIndex;
      var value = this.computedValue();
      var selectedIndex = dataItems.findIndex(function (i) {
        return areSame(i, value, dataItemKey);
      });
      var hasSelected = !(selectedIndex < 0 && !this.$props.defaultItem);

      if (!hasSelected && filterText && virtual.skip === 0) {
        return focusedItemIndex ? focusedItemIndex(dataItems, filterText, textField) : dataItems.indexOf(getFocusedItem(dataItems, filterText, textField));
      } else {
        return !hasSelected && virtual.skip === 0 ? 0 : undefined;
      }
    },
    focusElement: function focusElement(element) {
      var _this = this;

      this._skipFocusEvent = true;
      element.focus();
      setTimeout(function () {
        return _this._skipFocusEvent = false;
      }, 30);
    },
    setValidity: function setValidity() {
      if (this.select && this.select.setCustomValidity) {
        this.select.setCustomValidity(this.validity().valid ? '' : this.$props.validationMessage || VALIDATION_MESSAGE);
      }
    },
    triggerOnChange: function triggerOnChange(item, state) {
      if (areSame(this.computedValue(), item, this.$props.dataItemKey)) {
        return;
      }

      if (this.$props.value === undefined) {
        this.currentValue = item;
      }

      this.valueDuringOnChange = item;
      state.events.push({
        type: 'change'
      });
    },
    applyState: function applyState(state) {
      this.base.applyState(state);
      this.valueDuringOnChange = undefined;
    }
  },
  render: function render(createElement) {
    var _this = this;

    var h = gh || createElement;
    var _a = this.$props,
        style = _a.style,
        className = _a.className,
        label = _a.label,
        dir = _a.dir,
        _b = _a.virtual,
        virtual = _b === void 0 ? {
      skip: 0
    } : _b;
    var opened = this.$props.opened !== undefined ? this.$props.opened : this.currentOpened;
    var text = getItemValue(this.computedValue(), this.$props.textField);
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var base = this.base;
    var vs = base.vs;
    var id = this.$props.id || this.inputId;
    vs.enabled = this.$props.virtual !== undefined;
    var popupSettings = Object.assign({}, {
      animate: true,
      height: '200px'
    }, this.$props.popupSettings);

    var dummySelect = function dummySelect(value) {
      var _this = this;
      /* Dummy component to support forms */


      return h("select", {
        name: this.$props.name,
        attrs: this.v3 ? undefined : {
          name: this.$props.name,
          id: id,
          tabIndex: -1,
          "aria-hidden": true,
          title: this.$props.label
        },
        id: id,
        ref: this.v3 ? function (el) {
          _this.selectRef = el;
        } : 'select',
        tabIndex: -1,
        "aria-hidden": true,
        title: this.$props.label,
        style: {
          opacity: 0,
          width: 1,
          border: 0,
          zIndex: -1,
          position: 'absolute',
          left: '50%'
        }
      }, [h("option", {
        value: this.v3 ? this.$props.valueMap ? this.$props.valueMap.call(undefined, value) : value : null,
        domProps: this.v3 ? undefined : {
          "value": this.$props.valueMap ? this.$props.valueMap.call(undefined, value) : value
        }
      })]);
    };

    var renderDropDownWrapper = function renderDropDownWrapper() {
      var _this = this;

      var _a = this.$props,
          dataItemKey = _a.dataItemKey,
          _b = _a.dataItems,
          dataItems = _b === void 0 ? [] : _b,
          disabled = _a.disabled,
          tabIndex = _a.tabIndex,
          loading = _a.loading,
          iconClassName = _a.iconClassName;
      var valueRender = templateRendering.call(this, this.$props.valueRender, getListeners.call(this));
      var focused = this.currentFocused;
      var value = this.computedValue();
      var selectedIndex = dataItems.findIndex(function (i) {
        return areSame(i, value, dataItemKey);
      });
      var valueDefaultRendering = h("span", {
        "class": "k-input"
      }, [text]);
      var valueElement = getTemplate.call(this, {
        h: h,
        template: valueRender,
        defaultRendering: valueDefaultRendering,
        additionalProps: __assign({
          value: this.computedValue()
        }, this.$data)
      });
      return h("span", {
        ref: this.v3 ? function (el) {
          _this.baseWrapperRef = el;
        } : 'baseWrapper',
        role: 'listbox',
        attrs: this.v3 ? undefined : {
          role: 'listbox',
          tabIndex: disabled ? undefined : tabIndex,
          accessKey: this.$props.accessKey,
          "aria-disabled": disabled || undefined,
          "aria-haspopup": true,
          "aria-expanded": opened || false,
          "aria-owns": this.base.listBoxId,
          "aria-activedescendant": 'option-' + this.base.guid + '-' + (selectedIndex + virtual.skip),
          "aria-label": this.$props.label,
          "aria-labelledby": this.$props.ariaLabelledBy,
          "aria-describedby": this.$props.ariaDescribedBy
        },
        tabIndex: disabled ? undefined : tabIndex,
        accessKey: this.$props.accessKey,
        "class": classNames('k-dropdown-wrap', {
          'k-state-default': !disabled,
          'k-state-focused': focused,
          'k-state-disabled': disabled
        }),
        style: this.$props.style,
        onKeydown: this.handleKeyDown,
        on: this.v3 ? undefined : {
          "keydown": this.handleKeyDown,
          "keypress": this.handleKeyPress,
          "click": disabled ? noop : this.handleWrapperClick
        },
        onKeypress: this.handleKeyPress,
        onClick: disabled ? noop : this.handleWrapperClick,
        "aria-disabled": disabled || undefined,
        "aria-haspopup": true,
        "aria-expanded": opened || false,
        "aria-owns": this.base.listBoxId,
        "aria-activedescendant": 'option-' + this.base.guid + '-' + (selectedIndex + virtual.skip),
        "aria-label": this.$props.label,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy
      }, [valueElement, h("span", {
        "class": "k-select"
      }, [h("span", {
        "class": classNames('k-icon', iconClassName, {
          'k-i-arrow-s': !loading && !iconClassName,
          'k-i-loading': loading && !iconClassName
        })
      })]), dummySelect.call(this, value)]);
    };

    var renderDefaultItem = function renderDefaultItem() {
      var _a = this.$props,
          textField = _a.textField,
          defaultItem = _a.defaultItem,
          dataItemKey = _a.dataItemKey;
      return defaultItem !== undefined && // @ts-ignore
      h(ListDefaultItem, {
        defaultItem: defaultItem,
        attrs: this.v3 ? undefined : {
          defaultItem: defaultItem,
          textField: textField,
          selected: areSame(this.computedValue(), defaultItem, dataItemKey)
        },
        textField: textField,
        selected: areSame(this.computedValue(), defaultItem, dataItemKey),
        key: "defaultitemkey",
        onDefaultitemclick: this.handleDefaultItemClick,
        on: this.v3 ? undefined : {
          "defaultitemclick": this.handleDefaultItemClick
        }
      });
    };

    var renderList = function renderList() {
      var _a = this.$props,
          _b = _a.dataItems,
          dataItems = _b === void 0 ? [] : _b,
          textField = _a.textField,
          dataItemKey = _a.dataItemKey;
      var itemRender = templateRendering.call(this, this.$props.itemRender, getListeners.call(this));
      var listNoDataRender = templateRendering.call(this, this.$props.listNoDataRender, getListeners.call(this));
      var skip = virtual.skip;
      var translate = "translateY(" + vs.translate + "px)";
      return (// @ts-ignore
        h(List, {
          id: this.base.listBoxId,
          attrs: this.v3 ? undefined : {
            id: this.base.listBoxId,
            show: opened,
            dataItems: dataItems.slice(),
            focusedIndex: this.focusedIndex(),
            value: this.computedValue(),
            textField: textField,
            valueField: dataItemKey,
            optionsGuid: this.base.guid,
            wrapperStyle: !vs.enabled ? {
              maxHeight: popupSettings.height
            } : {
              float: 'left',
              width: '100%'
            },
            wrapperCssClass: !vs.enabled ? 'k-list-scroller' : undefined,
            listStyle: vs.enabled ? {
              transform: translate
            } : undefined,
            skip: skip,
            itemRender: itemRender,
            noDataRender: listNoDataRender
          },
          show: opened,
          dataItems: dataItems.slice(),
          focusedIndex: this.focusedIndex(),
          value: this.computedValue(),
          textField: textField,
          valueField: dataItemKey,
          optionsGuid: this.base.guid,
          ref: 'list',
          wrapperStyle: !vs.enabled ? {
            maxHeight: popupSettings.height
          } : {
            float: 'left',
            width: '100%'
          },
          wrapperCssClass: !vs.enabled ? 'k-list-scroller' : undefined,
          listStyle: vs.enabled ? {
            transform: translate
          } : undefined,
          key: "listkey",
          skip: skip,
          onListclick: this.handleItemClick,
          on: this.v3 ? undefined : {
            "listclick": this.handleItemClick
          },
          itemRender: itemRender,
          noDataRender: listNoDataRender
        })
      );
    };

    var renderListFilter = function renderListFilter() {
      var filterText = this.$props.filter !== undefined ? this.$props.filter : this.currentText;
      return this.$props.filterable && // @ts-ignore
      h(ListFilter, {
        value: filterText,
        attrs: this.v3 ? undefined : {
          value: filterText
        },
        ref: 'filterInput',
        onChange: this.handleListFilterChange,
        on: this.v3 ? undefined : {
          "change": this.handleListFilterChange,
          "keydown": this.handleKeyDown
        },
        onKeydown: this.handleKeyDown
      });
    }; // Common rendering


    var renderScrollWrapper = function renderScrollWrapper(children) {
      return vs.enabled ? h("div", {
        onScroll: vs.scrollHandler,
        on: this.v3 ? undefined : {
          "scroll": vs.scrollHandler
        },
        ref: 'scroller',
        style: {
          height: popupSettings.height,
          overflowY: 'scroll'
        }
      }, [children]) : children;
    };

    var renderScrollElement = function renderScrollElement() {
      return vs.enabled && h("div", {
        ref: 'scrollElement',
        key: 'scrollElementKey'
      });
    };

    var renderListContainer = function renderListContainer() {
      var _this2 = this;

      var headerTemplate = templateRendering.call(this, this.$props.header, getListeners.call(this));
      var footerTemplate = templateRendering.call(this, this.$props.footer, getListeners.call(this));
      var header = getTemplate.call(this, {
        h: h,
        template: headerTemplate
      });
      var footer = getTemplate.call(this, {
        h: h,
        template: footerTemplate
      });
      var popupWidth = popupSettings.width !== undefined ? popupSettings.width : base.popupWidth;
      return (// @ts-ignore  function children
        h(ListContainer, {
          onMousedown: preventDefaultNonInputs,
          on: this.v3 ? undefined : {
            "mousedown": preventDefaultNonInputs,
            "open": this.onPopupOpened,
            "close": this.onPopupClosed,
            "blur": this.handleBlur
          },
          dir: dir !== undefined ? dir : base.dirCalculated,
          attrs: this.v3 ? undefined : {
            dir: dir !== undefined ? dir : base.dirCalculated,
            width: popupWidth // @ts-ignore
            ,
            popupSettings: {
              className: classNames('k-list-container k-reset', popupSettings.className),
              animate: popupSettings.animate,
              anchor: this.anchor,
              show: opened
            }
          },
          width: popupWidth,
          popupSettings: {
            className: classNames('k-list-container k-reset', popupSettings.className),
            animate: popupSettings.animate,
            anchor: this.anchor,
            show: opened
          },
          onOpen: this.onPopupOpened,
          onClose: this.onPopupClosed,
          onBlur: this.handleBlur
        }, this.v3 ? function () {
          return [renderListFilter.call(_this2), _this2.$props.virtual ? renderDefaultItem.call(_this2) : undefined, _this2.$props.virtual && header, renderScrollWrapper.call(_this2, !_this2.$props.virtual ? [renderDefaultItem.call(_this2), header, renderList.call(_this2), footer, renderScrollElement.call(_this2)] : [renderList.call(_this2), renderScrollElement.call(_this2)]), _this2.$props.virtual && footer];
        } : [renderListFilter.call(_this2), _this2.$props.virtual ? renderDefaultItem.call(_this2) : undefined, _this2.$props.virtual && header, renderScrollWrapper.call(_this2, !_this2.$props.virtual ? [renderDefaultItem.call(_this2), header, renderList.call(_this2), footer, renderScrollElement.call(_this2)] : [renderList.call(_this2), renderScrollElement.call(_this2)]), _this2.$props.virtual && footer])
      );
    };

    if (this.$props.virtual !== undefined) {
      base.vs.skip = virtual.skip; // @ts-ignore

      base.vs.total = virtual.total; // @ts-ignore

      base.vs.pageSize = virtual.pageSize;
    }

    var dropdownlist = h("span", {
      ref: this.v3 ? function (el) {
        _this.kendoAnchorRef = el;
      } : this.anchor,
      "class": classNames('k-widget k-dropdown k-header', {
        'k-state-invalid': !isValid
      }, className),
      style: !label ? style : __assign(__assign({}, style), {
        width: undefined
      }),
      dir: dir,
      attrs: this.v3 ? undefined : {
        dir: dir
      },
      onMousedown: opened ? preventDefaultNonInputs : noop,
      on: this.v3 ? undefined : {
        "mousedown": opened ? preventDefaultNonInputs : noop,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur
    }, [renderDropDownWrapper.call(this), renderListContainer.call(this)]);
    return label ? h("span", {
      "class": this.spanClassNames,
      onFocusin: this.handleFocus,
      on: this.v3 ? undefined : {
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusout: this.handleBlur,
      dir: this.$props.dir,
      attrs: this.v3 ? undefined : {
        dir: this.$props.dir
      }
    }, [dropdownlist, this.$props.label ? id ? h("label", {
      "for": id,
      attrs: this.v3 ? undefined : {
        "for": id
      },
      "class": "k-label"
    }, [this.$props.label]) : h("span", {
      "class": "k-label"
    }, [this.$props.label]) : null]) : dropdownlist;
  }
};
export { DropDownList };