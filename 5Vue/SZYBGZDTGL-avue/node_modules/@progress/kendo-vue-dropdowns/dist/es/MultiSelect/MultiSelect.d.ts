import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => MultiSelectData);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { FormComponentValidity } from '@progress/kendo-vue-common';
import { TagData } from './TagList';
import { MultiSelectProps } from './MultiSelectProps';
import { DropDownStateBase, InternalState, ActiveDescendant } from './../common/settings';
declare enum FocusedItemType {
    None = 0,
    ListItem = 1,
    CustomItem = 2
}
interface ListFocusedState {
    focusedItem?: any;
    focusedIndex: number;
    focusedType: FocusedItemType;
}
/**
 * @hidden
 */
export interface MultiSelectInternalState extends InternalState {
    data: MultiSelectData;
}
/**
 * @hidden
 */
export interface MultiSelectData extends DropDownStateBase {
    hasMounted: boolean;
    selectedItems?: Array<any>;
    valuesItemsDuringOnChange?: Array<any> | null;
    currentText?: string;
    currentFocusedIndex?: number;
    currentFocused?: boolean;
    currentOpened?: boolean;
    currentFocusedTag?: any;
    currentValue?: Array<any>;
    activedescendant?: ActiveDescendant;
    _skipFocusEvent: boolean;
}
/**
 * @hidden
 */
export interface MultiSelectMethods extends Vue {
    focus: (e: any) => void;
    computedValue: () => any;
    validity: () => FormComponentValidity;
    handleItemSelect: (index: number, state: InternalState) => void;
    onNavigate: (state: InternalState, keyCode: number) => void;
    handleFocus: (event: any) => void;
    handleBlur: (event: any) => void;
    handleWrapperClick: (event: any) => void;
    onTagDelete: (itemsToRemove: Array<any>, event: any) => void;
    onPopupOpened: () => void;
    onPopupClosed: () => void;
    clearButtonClick: (event: any) => void;
    searchBarRef: () => void;
    onInputKeyDown: (event: any) => void;
    onChangeHandler: (event: any) => void;
    handleItemClick: (index: number, event: any) => void;
    setItems: (srcItems: Array<any>, destItems: Array<any>) => void;
    itemFocus: (index: number, state: MultiSelectInternalState) => void;
    getFocusedState: () => ListFocusedState;
    customItemSelect: (e: any) => void;
    selectFocusedItem: (e: any) => void;
    focusElement: (element: HTMLElement) => void;
    onTagsNavigate: (event: any, state: MultiSelectInternalState) => void;
    setValidity: () => void;
    triggerOnChange: (item: any, state: InternalState) => void;
    applyState: (state: InternalState) => void;
}
/**
 * @hidden
 */
export interface MultiSelectState {
    anchor: string;
    scrollToFocused: boolean;
    base: any;
    _tags: Array<TagData>;
    input: any;
    element: any;
    inputId: string;
    focusedIndex?: number;
    focusedTag?: TagData;
    prevOpened?: any;
    virtualTotalHasChanged?: any;
    prevCurrentOpened?: any;
    baseWrapperRef: any;
    inputRef: any;
    kendoAnchorRef: any;
    v3: boolean;
}
/**
 * @hidden
 */
export interface MultiSelectComputed {
    spanClassNames: any;
}
/**
 * @hidden
 */
export interface MultiSelectAll extends MultiSelectMethods, MultiSelectState, MultiSelectData, MultiSelectComputed {
}
/**
 * Represents the default `MultiSelect` component.
 */
declare let MultiSelect: ComponentOptions<Vue, DefaultData<MultiSelectData>, DefaultMethods<MultiSelectAll>, MultiSelectComputed, RecordPropsDefinition<MultiSelectProps>>;
export { MultiSelect };
