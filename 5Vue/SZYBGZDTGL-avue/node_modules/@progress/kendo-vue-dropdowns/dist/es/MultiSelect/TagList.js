var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
}; // @ts-ignore


import { getTemplate } from '@progress/kendo-vue-common';
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
var tagClassName = 'k-button';
var focusedTagClassName = tagClassName + ' k-state-focused';

var preventDefault = function preventDefault(event) {
  return event.preventDefault();
};

var stopPropagation = function stopPropagation(event) {
  return event.stopPropagation();
};
/**
 * Represents the default `TagList` component.
 */


var TagList = {
  name: 'TagList',
  props: {
    dataItems: Array,
    guid: String,
    focused: Object,
    tagRender: [String, Function, Object]
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  methods: {
    onTagDelete: function onTagDelete(tagData, event) {
      this.$emit('tagdelete', tagData, event);
    }
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
        dataItems = _a.dataItems,
        guid = _a.guid;
    return h("ul", {
      "class": "k-reset",
      role: "listbox",
      attrs: this.v3 ? undefined : {
        role: "listbox",
        id: 'tagslist-' + guid
      },
      id: 'tagslist-' + guid
    }, [dataItems.map(function (tagData, index) {
      var _this = this;

      var defaultRendering = h("li", {
        "class": tagData === this.$props.focused ? focusedTagClassName : tagClassName,
        key: tagData.text + index,
        id: "tag-" + guid + "-" + tagData.text.replace(/\s+/g, '-'),
        attrs: this.v3 ? undefined : {
          id: "tag-" + guid + "-" + tagData.text.replace(/\s+/g, '-'),
          "aria-selected": true,
          role: "option",
          "aria-setsize": dataItems.length
        },
        onMousedown: preventDefault,
        on: this.v3 ? undefined : {
          "mousedown": preventDefault,
          "click": stopPropagation
        },
        onClick: stopPropagation,
        "aria-selected": true,
        role: "option",
        "aria-setsize": dataItems.length
      }, [h("span", [tagData.text]), h("span", {
        "aria-label": "delete",
        attrs: this.v3 ? undefined : {
          "aria-label": "delete"
        },
        "class": "k-select",
        onClick: function onClick(e) {
          return _this.onTagDelete(tagData.data, e);
        },
        on: this.v3 ? undefined : {
          "click": function onClick(e) {
            return _this.onTagDelete(tagData.data, e);
          }
        }
      }, [h("span", {
        "class": "k-icon k-i-close"
      })])]);
      return getTemplate.call(this, {
        h: h,
        template: this.$props.tagRender,
        defaultRendering: defaultRendering,
        additionalProps: __assign(__assign({}, this.$props), {
          tagData: tagData,
          index: index
        }),
        additionalListeners: {
          tagdelete: this.onTagDelete
        }
      });
    }, this)]);
  }
};
export { TagList };