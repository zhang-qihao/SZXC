import { NumericTextBoxData } from '../interfaces/NumericTextBoxData';
import { NumberFormatOptions } from '@progress/kendo-vue-intl';
/**
 * @hidden
 */
export declare const getInitialState: () => NumericTextBoxData;
/**
 * @hidden
 */
export declare const getStateOrPropsValue: (value: number | null | undefined, stateValue: number | null | undefined) => number | null | undefined;
/**
 * @hidden
 */
export declare const formatValue: (value: string | number | null | undefined, format: string | NumberFormatOptions | undefined, intlService: any) => string;
/**
 * @hidden
 */
export declare const increaseValue: (value: any, newState: any, step: any, min: any, max: any, format: any, intlService: any) => void;
/**
 * @hidden
 */
export declare const decreaseValue: (value: any, newState: any, step: any, min: any, max: any, format: any, intlService: any) => void;
/**
 * @hidden
 */
export declare const rangeValue: (value: number | null, min: any, max: any) => number | null;
/**
 * @hidden
 */
export declare const getMaxCursorPosition: (nextValue: string, formatInfo: string[][]) => number;
/**
 * @hidden
 */
export declare const getMinCursorPosition: (nextValue: string, formatInfo: string[][]) => number;
/**
 * @hidden
 */
export declare const rangeSelection: (nextLooseValue: string, formatInfo: string[][], newState: NumericTextBoxData) => void;
/**
 * @hidden
 */
export declare const setSelection: (newState: NumericTextBoxData, newIndex: number, nextLooseValue: string, formatInfo: string[][]) => void;
/**
 * @hidden
 */
export declare const setInvalid: (newState: NumericTextBoxData, format: string | NumberFormatOptions | undefined, formatInfo: string[][], intlService: any) => void;
/**
 * @hidden
 */
export declare const isMinusSymbolAdded: (newState: NumericTextBoxData, symbols: any) => boolean;
/**
 * @hidden
 */
export declare const isDecimalDuplicated: (newState: NumericTextBoxData, symbols: any) => boolean;
/**
 * @hidden
 */
export declare const getFormatPrefixSufix: (format: string | NumberFormatOptions | undefined, intlService: any) => {
    positiveInfo: string[];
    negativeInfo: string[];
    zeroInfo: string[];
    oneInfo: string[];
};
/**
 * @hidden
 */
export declare const getFormatSymbols: (format: string | NumberFormatOptions | undefined, intlService: any) => string;
/**
 * @hidden
 */
export declare const getInitialPosition: (nextLooseValue: string, symbols: any) => number;
/**
 * @hidden
 */
export declare const reverseString: (str: string) => string;
/**
 * @hidden
 */
export declare const getLastNumberIndex: (currentLooseValue: string, inputRegex: RegExp) => number;
/**
 * @hidden
 */
export declare const getPrefix: (str: string) => string;
/**
 * @hidden
 */
export declare const getSuffix: (str: string) => string;
/**
 * @hidden
 */
export declare const getFirstNumberIndex: (prevLooseValue: string, inputRegex: RegExp) => number;
/**
 * @hidden
 */
export declare const getDecimalCount: (value: string, decimal: string) => number;
/**
 * @hidden
 */
export declare const changeBasedSelection: (currentValue: string, nextValue: string, selectionPosition: number, isDelete: boolean, sanitizeRegex: any) => number;
/**
 * @hidden
 */
export declare const sanitizeNumber: (state: any, format: string | NumberFormatOptions | undefined, intlService: any) => NumericTextBoxData;
