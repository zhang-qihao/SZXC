import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { FormComponentProps, DraggableDragEvent, DraggablePressEvent } from '@progress/kendo-vue-common';
import { Direction } from '../interfaces/Direction';
/**
 * The arguments for the `change` Slider event.
 */
export interface SliderChangeEvent {
    /**
     * The current value of the Slider.
     */
    value: number;
}
/**
 * Represents the props of the [Kendo UI for Vue Slider component]({% slug overview_slider %}).
 */
export interface SliderProps extends FormComponentProps {
    /**
     * The value of the Slider.
     */
    value?: number;
    /**
     * @hidden
     */
    modelValue?: number;
    /**
     * The default value of the Slider.
     */
    defaultValue?: number;
    /**
     * The minimum value of the Slider.
     */
    min: number;
    /**
     * The maximum value of the Slider.
     */
    max: number;
    /**
     * Specifies the step of the value increase and decrease.
     */
    step?: number;
    /**
     * Determines the event handler that will be fired when the user edits the value.
     */
    change?: (event: SliderChangeEvent) => void;
    /**
     * Renders the arrow side buttons of the Slider if set to true.
     */
    buttons?: boolean;
    /**
     * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
     * of the Slider.
     */
    tabIndex?: number;
    /**
     * Determines whether the Slider is disabled.
     *
     */
    disabled?: boolean;
    /**
     * If `vertical` is set to `true`, the orientation of the Slider changes from horizontal to vertical
     * ([see example]({% slug orientation_slider %})).
     */
    vertical?: boolean;
    /**
     * Specifies the id of the component.
     */
    id?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    dir?: String;
}
/**
 * @hidden
 */
export interface SliderData {
    currentValue: number;
    currentFocused: boolean;
    currentDir?: Direction;
}
/**
 * @hidden
 */
export interface SliderState {
    _sliderTrack: any;
    draggable: any;
}
/**
 * @hidden
 */
export interface SliderMethods {
    focus: () => void;
    isLabel: (target: any) => boolean;
    onFocus: () => void;
    onBlur: () => void;
    onKeyDown: (e: any) => void;
    decrement: (e: any) => void;
    increment: (e: any) => void;
    dragStart: (e: DraggablePressEvent) => void;
    dragOver: (e: DraggableDragEvent) => void;
    drag: (e: any) => void;
    change: (e: any, value: number) => void;
}
/**
 * @hidden
 */
export interface SliderComputed {
    sliderTrack: any;
    computedValue: number;
}
/**
 * @hidden
 */
export interface SliderAll extends Vue, SliderMethods, SliderComputed, SliderState, SliderData {
}
declare let Slider: ComponentOptions<SliderAll, DefaultData<SliderData>, DefaultMethods<SliderAll>, SliderComputed, RecordPropsDefinition<SliderProps>>;
export { Slider };
