"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
var inject = allVue.inject;

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var kendo_vue_common_2 = require("@progress/kendo-vue-common");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var messages_1 = require("./../messages");

var SliderLabel_1 = require("./SliderLabel");

var kendo_licensing_1 = require("@progress/kendo-licensing");

var package_metadata_1 = require("../package-metadata");

var Slider = {
  name: 'KendoSlider',
  model: {
    event: 'changemodel'
  },
  props: {
    modelValue: {
      type: Number,
      default: undefined
    },
    defaultValue: {
      type: Number,
      default: undefined
    },
    name: String,
    buttons: Boolean,
    tabIndex: Number,
    disabled: Boolean,
    dir: String,
    step: Number,
    min: {
      type: Number,
      required: true
    },
    max: {
      type: Number,
      required: true
    },
    value: Number,
    vertical: Boolean,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  provide: function provide() {
    return {
      kendoMin: this.$props.min,
      kendoMax: this.$props.max,
      kendoVertical: this.$props.vertical
    };
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      currentValue: undefined,
      currentFocused: false,
      currentDir: 'ltr'
    };
  },
  computed: {
    computedValue: function computedValue() {
      var value = this.$props.value !== undefined ? this.$props.value : this.currentValue;
      var _a = this.$props,
          min = _a.min,
          max = _a.max;
      return value === undefined ? value : Math.min(Math.max(value, min), max);
    },
    sliderTrack: function sliderTrack() {
      return this._sliderTrack;
    }
  },
  created: function created() {
    kendo_licensing_1.validatePackage(package_metadata_1.packageMetadata);

    if (this.$props.value !== undefined) {
      this.$data.currentValue = this.$props.value;
    } else if (this.$props.modelValue !== undefined) {
      this.$data.currentValue = this.$props.modelValue;
    } else if (this.$props.defaultValue !== undefined) {
      this.$data.currentValue = this.$props.defaultValue;
    } else {
      this.$data.currentValue = this.$props.min;
    }

    this.currentFocused = false;
    this.currentDir = this.$props.dir;
  },
  mounted: function mounted() {
    this._sliderTrack = this.$refs.sliderTrack;

    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }

    if (!this.currentDir && window && this.$el) {
      // Note: getComputedStyle forces reflow
      var direction = window.getComputedStyle(this.$el).direction;

      if (direction) {
        this.currentDir = direction;
      }
    }
  },
  updated: function updated() {
    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var inputRef = ref(null);
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      inputRef: inputRef,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var _this = this;

    var _a, _b;

    var h = gh || createElement;
    var lS = kendo_vue_intl_1.provideLocalizationService(this);
    var percentValue = (this.computedValue - this.$props.min) / (this.$props.max - this.$props.min) * 100;
    var defaultSlot = kendo_vue_common_1.getDefaultSlots(this);
    var trackStyles = this.$props.vertical ? {
      marginTop: '0.5rem',
      marginBottom: '0.5rem'
    } : {
      marginLeft: '0.5rem',
      marginRight: '0.5rem'
    };
    var sliderItemsStyle = this.$props.vertical ? {
      paddingTop: 0,
      height: '100%'
    } : {};
    return h("div", {
      "aria-valuemin": this.$props.min,
      attrs: this.v3 ? undefined : {
        "aria-valuemin": this.$props.min,
        "aria-valuemax": this.$props.max,
        "aria-valuenow": this.computedValue,
        "aria-disabled": this.$props.disabled ? 'true' : undefined,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        dir: this.currentDir,
        role: "slider",
        id: this.$props.id,
        tabIndex: kendo_vue_common_2.getTabIndex(this.$props.tabIndex, this.$props.disabled, undefined)
      },
      "aria-valuemax": this.$props.max,
      "aria-valuenow": this.computedValue,
      "aria-disabled": this.$props.disabled ? 'true' : undefined,
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      dir: this.currentDir,
      role: "slider",
      id: this.$props.id,
      style: this.$props.style,
      tabIndex: kendo_vue_common_2.getTabIndex(this.$props.tabIndex, this.$props.disabled, undefined),
      onFocus: this.onFocus,
      on: this.v3 ? undefined : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "keydown": this.onKeyDown
      },
      onBlur: this.onBlur,
      onKeydown: this.onKeyDown,
      "class": kendo_vue_common_2.classNames('k-slider k-widget k-state-default', {
        'k-state-focused': this.currentFocused,
        'k-state-disabled': this.$props.disabled,
        'k-slider-horizontal': !this.$props.vertical,
        'k-slider-vertical': this.$props.vertical
      }, this.$props.className)
    }, [h("div", {
      "class": kendo_vue_common_2.classNames('k-slider-wrap', {
        'k-slider-buttons': this.$props.buttons
      }),
      style: {
        display: 'flex',
        position: 'relative',
        flexDirection: this.$props.vertical ? 'column-reverse' : 'row'
      }
    }, [this.$props.buttons && h("a", {
      "class": "k-button k-button-decrease",
      style: {
        position: 'relative'
      },
      title: lS.toLanguageString(messages_1.sliderDecreaseValue, messages_1.messages[messages_1.sliderDecreaseValue]),
      attrs: this.v3 ? undefined : {
        title: lS.toLanguageString(messages_1.sliderDecreaseValue, messages_1.messages[messages_1.sliderDecreaseValue])
      },
      onClick: this.decrement,
      on: this.v3 ? undefined : {
        "click": this.decrement
      }
    }, [h("span", {
      "class": kendo_vue_common_2.classNames('k-icon', {
        'k-i-arrow-s': this.$props.vertical,
        'k-i-arrow-w': !this.$props.vertical
      })
    })]), // @ts-ignore  function children
    h(kendo_vue_common_2.Draggable, {
      onDrag: this.dragOver,
      on: this.v3 ? undefined : {
        "drag": this.dragOver,
        "press": this.dragStart
      },
      onPress: this.dragStart,
      ref: 'draggable'
    }, this.v3 ? function () {
      return [h("div", {
        "class": "k-slider-track-wrap",
        style: __assign({
          flexGrow: 1,
          position: 'relative',
          touchAction: 'none'
        }, trackStyles)
      }, [defaultSlot && h("ul", {
        "class": "k-reset k-slider-items",
        style: __assign({
          margin: 0
        }, sliderItemsStyle)
      }, [defaultSlot]), h("div", {
        "class": "k-slider-track",
        style: _this.$props.vertical ? {
          bottom: 0,
          height: '100%'
        } : (_a = {}, _a[_this.currentDir === 'rtl' ? 'right' : 'left'] = 0, _a.width = '100%', _a),
        ref: 'sliderTrack'
      }, [h("div", {
        "class": "k-slider-selection",
        style: _this.$props.vertical ? {
          height: percentValue + '%'
        } : {
          width: percentValue + '%'
        }
      }), h("a", {
        "class": "k-draghandle",
        title: lS.toLanguageString(messages_1.sliderDragTitle, messages_1.messages[messages_1.sliderDragTitle]),
        attrs: _this.v3 ? undefined : {
          title: lS.toLanguageString(messages_1.sliderDragTitle, messages_1.messages[messages_1.sliderDragTitle])
        },
        style: _this.$props.vertical ? {
          bottom: 'calc(' + percentValue + '% - 8px)',
          zIndex: 1
        } : (_b = {}, _b[_this.currentDir === 'rtl' ? 'right' : 'left'] = 'calc(' + percentValue + '% - 8px)', _b.zIndex = 1, _b)
      })])])];
    } : [h("div", {
      "class": "k-slider-track-wrap",
      style: __assign({
        flexGrow: 1,
        position: 'relative',
        touchAction: 'none'
      }, trackStyles)
    }, [defaultSlot && h("ul", {
      "class": "k-reset k-slider-items",
      style: __assign({
        margin: 0
      }, sliderItemsStyle)
    }, [defaultSlot]), h("div", {
      "class": "k-slider-track",
      style: _this.$props.vertical ? {
        bottom: 0,
        height: '100%'
      } : (_a = {}, _a[_this.currentDir === 'rtl' ? 'right' : 'left'] = 0, _a.width = '100%', _a),
      ref: 'sliderTrack'
    }, [h("div", {
      "class": "k-slider-selection",
      style: _this.$props.vertical ? {
        height: percentValue + '%'
      } : {
        width: percentValue + '%'
      }
    }), h("a", {
      "class": "k-draghandle",
      title: lS.toLanguageString(messages_1.sliderDragTitle, messages_1.messages[messages_1.sliderDragTitle]),
      attrs: _this.v3 ? undefined : {
        title: lS.toLanguageString(messages_1.sliderDragTitle, messages_1.messages[messages_1.sliderDragTitle])
      },
      style: _this.$props.vertical ? {
        bottom: 'calc(' + percentValue + '% - 8px)',
        zIndex: 1
      } : (_b = {}, _b[_this.currentDir === 'rtl' ? 'right' : 'left'] = 'calc(' + percentValue + '% - 8px)', _b.zIndex = 1, _b)
    })])])]), this.$props.buttons && h("a", {
      "class": "k-button k-button-increase",
      style: {
        position: 'relative'
      },
      title: lS.toLanguageString(messages_1.sliderIncreaseValue, messages_1.messages[messages_1.sliderIncreaseValue]),
      attrs: this.v3 ? undefined : {
        title: lS.toLanguageString(messages_1.sliderIncreaseValue, messages_1.messages[messages_1.sliderIncreaseValue])
      },
      onClick: this.increment,
      on: this.v3 ? undefined : {
        "click": this.increment
      }
    }, [h("span", {
      "class": kendo_vue_common_2.classNames('k-icon', {
        'k-i-arrow-n': this.$props.vertical,
        'k-i-arrow-e': !this.$props.vertical
      })
    })])])]);
  },
  methods: {
    focus: function focus() {
      if (this.$el) {
        // @ts-ignore
        this.$el.focus();
      }
    },
    isLabel: function isLabel(target) {
      var currentTarget = target;

      while (currentTarget) {
        if (Boolean(currentTarget.getAttribute(SliderLabel_1.SLIDER_LABEL_ATTRIBUTE))) {
          return true;
        }

        currentTarget = currentTarget.parentElement;
      }

      return false;
    },
    onFocus: function onFocus() {
      this.currentFocused = true;
    },
    onBlur: function onBlur() {
      this.currentFocused = false;
    },
    onKeyDown: function onKeyDown(e) {
      var newValue = undefined;

      if (e.keyCode === kendo_vue_common_2.Keys.left || e.keyCode === kendo_vue_common_2.Keys.down) {
        newValue = this.currentValue - (this.$props.step || 0);
      } else if (e.keyCode === kendo_vue_common_2.Keys.right || e.keyCode === kendo_vue_common_2.Keys.up) {
        newValue = this.currentValue + (this.$props.step || 0);
      } else if (e.keyCode === kendo_vue_common_2.Keys.home) {
        newValue = this.$props.min;
      } else if (e.keyCode === kendo_vue_common_2.Keys.end) {
        newValue = this.$props.max;
      }

      if (newValue !== undefined) {
        e.preventDefault();
        this.change(e, newValue);
      }
    },
    decrement: function decrement(e) {
      e.preventDefault();
      this.change(e, this.currentValue - (this.$props.step || 0));
    },
    increment: function increment(e) {
      e.preventDefault();
      this.change(e, this.currentValue + (this.$props.step || 0));
    },
    dragStart: function dragStart(e) {
      if (!this.isLabel(e.originalEvent.target)) {
        if (e.isTouch) {
          e.originalEvent.preventDefault();
        }

        this.drag(e);
      }
    },
    dragOver: function dragOver(e) {
      e.originalEvent.preventDefault();
      this.drag(e);
    },
    drag: function drag(e) {
      var computed = this.draggable.element.getBoundingClientRect();
      var distance = this.$props.vertical ? computed.bottom - e.clientY : this.currentDir === 'rtl' ? computed.right - e.clientX : e.clientX - computed.left;
      var size = this.$props.vertical ? computed.height : computed.width;
      var percentage = distance / size;
      this.change(e, this.$props.min + percentage * (this.$props.max - this.$props.min));
    },
    change: function change(e, value) {
      value = Math.min(Math.max(value, this.$props.min), this.$props.max);
      this.currentValue = value;
      this.$emit('change', {
        event: e,
        value: value,
        component: this,
        target: {
          name: this.$props.name,
          value: value
        }
      });
      this.$emit('changemodel', value);
      this.$emit('update:modelValue', value);
    }
  }
};
exports.Slider = Slider;