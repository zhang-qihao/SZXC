"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SliderLabel = exports.SLIDER_LABEL_ATTRIBUTE = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;

var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */


exports.SLIDER_LABEL_ATTRIBUTE = 'data-slider-label'; // tslint:enable:max-line-length

var SliderLabel = {
  name: 'KendoSliderLabel',
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    position: Number,
    title: String,
    vertical: Boolean
  },
  data: function data() {
    return {
      currentDir: 'ltr'
    };
  },
  inject: ['kendoMax', 'kendoMin', 'kendoVertical'],
  mounted: function mounted() {
    this.sliderLabelRef = this.$refs.sliderLabelRef;

    if (!this.currentDir && window && this.$el) {
      // Note: getComputedStyle forces reflow
      var direction = window.getComputedStyle(this.$el).direction;

      if (direction) {
        this.currentDir = direction;
      }
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _a;

    var h = gh || createElement;
    var dir = this.currentDir;
    var defaultSlot = kendo_vue_common_1.getDefaultSlots(this);
    var position = 100 * (this.$props.position - this.kendoMin) / (this.kendoMax - this.kendoMin);
    var vertical = this.kendoVertical;
    var style = vertical ? {
      bottom: position + "%",
      height: '1px',
      width: '100%'
    } : (_a = {}, _a[dir === 'rtl' ? 'right' : 'left'] = position + "%", _a.width = '1px', _a);
    return h("li", {
      ref: 'sliderLabelRef',
      role: "presentation",
      attrs: this.v3 ? undefined : {
        role: "presentation",
        title: this.$props.title
      },
      "class": "k-tick k-tick-large",
      title: this.$props.title,
      style: __assign({
        zIndex: 1,
        position: 'absolute'
      }, style)
    }, [h("span", {
      "data-slider-label": true,
      attrs: this.v3 ? undefined : {
        "data-slider-label": true
      },
      "class": "k-label",
      onClick: this.onClick,
      on: this.v3 ? undefined : {
        "click": this.onClick
      }
    }, [defaultSlot])]);
  },
  methods: {
    onClick: function onClick(event) {
      this.$emit('click', event);
    }
  }
};
exports.SliderLabel = SliderLabel;