import { FormComponentProps } from '@progress/kendo-vue-common';
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => InputData);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * Represents the props of the [KendoVue Input component]({% slug overview_textbox_native %}).
 * Extends the [native input props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement).
 */
export interface InputProps extends FormComponentProps {
    /**
     * Renders a floating label for the Input component.
     */
    id?: string;
    label?: string;
    value?: string | string[] | number;
    modelValue?: string | number;
    defaultValue?: string | string[] | number | undefined;
    validate?: boolean;
    dir?: string;
    onChange?: Element;
    onFocus?: (event: any) => void;
    onBlur?: (event: any) => void;
    /**
     * Specifies the placeholder of an `input` element. Used to define if the input is empty.
     */
    placeholder?: string;
}
/**
 * @hidden
 */
export interface InputData {
    hasMounted?: boolean;
    autofill?: boolean;
    currentValue?: string | string[] | number;
    valueDuringOnChange?: string;
    input?: any;
    inputId?: string;
    focused?: boolean;
}
/**
 * @hidden
 */
export interface InputState {
    inputRef: any;
    v3: boolean;
}
/**
 * @hidden
 */
export interface InputMethods {
    emitBlur?: (_: any) => void;
    emitFocus?: (_: any) => void;
    handleBlur?: (_: any) => void;
    handleFocus?: (_: any) => void;
    focus?: () => void;
    inputClassNames: () => any;
    validity: () => any;
    isInvalid: (state: any) => any;
    setValidity: () => void;
    handleInput?: () => void;
    handleChange?: (event: any) => void;
    handleAutoFill?: (e: any) => void;
    handleAutoFillEnd?: (e: any) => void;
}
/**
 * @hidden
 */
export interface InputComputed {
    computedValue?: any;
    spanClassNames?: any;
}
/**
 * @hidden
 */
export interface InputAllMethods extends Vue, InputMethods, InputComputed, InputState {
}
declare let Input: ComponentOptions<InputAllMethods, DefaultData<InputData>, DefaultMethods<InputAllMethods>, InputComputed, RecordPropsDefinition<InputProps>>;
export { Input };
