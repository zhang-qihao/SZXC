"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Checkbox = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
var inject = allVue.inject;

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var kendo_licensing_1 = require("@progress/kendo-licensing");

var package_metadata_1 = require("../package-metadata");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var messages_1 = require("./../messages");

var Checkbox = {
  name: 'KendoCheckbox',
  // @ts-ignore
  emits: {
    change: null,
    focus: null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  props: {
    checked: {
      type: Boolean,
      default: undefined
    },
    defaultChecked: Boolean,
    defaultValue: [String, Boolean],
    dir: String,
    disabled: Boolean,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    label: String,
    labelPlacement: String,
    labelOptional: Boolean,
    name: String,
    tabIndex: Number,
    value: {
      type: [String, Boolean],
      default: function _default() {
        return undefined;
      }
    },
    validationMessage: String,
    required: Boolean,
    valid: {
      type: Boolean,
      default: undefined
    }
  },
  data: function data() {
    return {
      currentDir: 'ltr'
    };
  },
  created: function created() {
    kendo_licensing_1.validatePackage(package_metadata_1.packageMetadata);
    this.calculatedId = kendo_vue_common_1.guid();
    this.currentChecked = this.$props.defaultChecked;
    this.currentValue = this.$props.defaultValue;
    this.currentDir = this.$props.dir;
  },
  mounted: function mounted() {
    if (!this.currentDir && window && this.$el) {
      // Note: getComputedStyle forces reflow
      var direction = window.getComputedStyle(this.$el).direction;

      if (direction) {
        this.currentDir = direction;
      }
    }

    this.setValidity();
  },
  updated: function updated() {
    this.setValidity();
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
        ariaDescribedBy = _a.ariaDescribedBy,
        ariaLabelledBy = _a.ariaLabelledBy,
        checked = _a.checked,
        disabled = _a.disabled,
        id = _a.id,
        label = _a.label,
        labelPlacement = _a.labelPlacement,
        name = _a.name,
        labelOptional = _a.labelOptional,
        tabIndex = _a.tabIndex,
        value = _a.value,
        required = _a.required,
        valid = _a.valid,
        validityStyles = _a.validityStyles;
    var defaultSlot = kendo_vue_common_1.getDefaultSlots(this);
    var valueIsBoolean = typeof value === 'boolean' || value === null;
    var isCheckedControlled = checked !== undefined;
    var isValueControlled = value !== undefined && valueIsBoolean;
    var currentValue = isValueControlled ? value : this.currentValue;
    var currentChecked = isCheckedControlled ? checked : this.currentChecked;
    var useValueAsChecked = currentChecked === undefined && currentValue;
    var checkedProp = useValueAsChecked ? currentValue : currentChecked;
    var valueProp = useValueAsChecked || isValueControlled ? value === null ? value : undefined : value || currentValue;
    var indeterminateProp = checkedProp === null || valueProp === null;
    this.localizationService = kendo_vue_intl_1.provideLocalizationService(this);
    this.defaultValidationMessage = this.localizeMessage(messages_1.checkboxValidation);
    this.optionalMessage = this.localizeMessage(messages_1.checkboxOptionalText);
    var isValid = valid !== undefined ? valid : !required ? true : currentChecked ? true : false; // const dir = useDir(elementRef, props.dir);

    var checkboxClasses = kendo_vue_common_1.classNames({
      'k-state-default': !disabled,
      'k-state-disabled': disabled
    });
    var inputClasses = kendo_vue_common_1.classNames({
      'k-checkbox': true,
      'k-state-indeterminate': indeterminateProp,
      'k-state-invalid k-invalid': !(isValid || validityStyles !== undefined || validityStyles === true)
    });

    var checkboxInput = function checkboxInput() {
      return h("input", {
        type: 'checkbox',
        attrs: this.v3 ? undefined : {
          type: 'checkbox',
          name: name,
          id: id || this.calculatedId,
          "aria-labelledby": ariaLabelledBy,
          "aria-describedby": ariaDescribedBy,
          disabled: disabled,
          tabIndex: kendo_vue_common_1.getTabIndex(tabIndex, disabled),
          role: 'checkbox',
          required: required !== undefined ? required : false,
          "aria-checked": currentChecked || checkedProp ? true : indeterminateProp ? 'mixed' : false,
          "aria-disabled": disabled || undefined
        },
        "class": inputClasses,
        name: name,
        id: id || this.calculatedId,
        "aria-labelledby": ariaLabelledBy,
        "aria-describedby": ariaDescribedBy,
        checked: this.v3 ? Boolean(checkedProp) : null,
        domProps: this.v3 ? undefined : {
          "checked": Boolean(checkedProp)
        },
        disabled: disabled,
        tabIndex: kendo_vue_common_1.getTabIndex(tabIndex, disabled),
        role: 'checkbox',
        required: required !== undefined ? required : false,
        "aria-checked": currentChecked || checkedProp ? true : indeterminateProp ? 'mixed' : false,
        "aria-disabled": disabled || undefined,
        onChange: this.onChangeHandler,
        on: this.v3 ? undefined : {
          "change": this.onChangeHandler,
          "keydown": this.onKeyDownHandler,
          "focus": this.onFocusHandler
        },
        onKeydown: this.onKeyDownHandler,
        onFocus: this.onFocusHandler
      });
    };

    var checkboxLabel = function checkboxLabel() {
      return label !== undefined ? h("label", {
        "class": 'k-checkbox-label',
        "for": id || this.calculatedId,
        attrs: this.v3 ? undefined : {
          "for": id || this.calculatedId
        },
        style: {
          userSelect: 'none'
        }
      }, [label, labelOptional && h("span", {
        "class": "k-label-optional"
      }, [this.optionalMessage])]) : null;
    };

    return labelPlacement === 'before' ? h("span", {
      "class": checkboxClasses,
      dir: 'rtl',
      attrs: this.v3 ? undefined : {
        dir: 'rtl'
      }
    }, [checkboxInput.call(this), checkboxLabel.call(this), defaultSlot]) : h("span", {
      "class": checkboxClasses,
      dir: this.currentDir,
      attrs: this.v3 ? undefined : {
        dir: this.currentDir
      }
    }, [checkboxInput.call(this), checkboxLabel.call(this), defaultSlot]);
  },
  methods: {
    setValidity: function setValidity() {
      var isValid = this.$props.valid !== undefined ? this.$props.valid : !this.$props.required ? true : this.currentChecked ? true : false; // @ts-ignore

      if (this.$el && this.$el.setCustomValidity) {
        // @ts-ignore
        this.$el.setCustomValidity(isValid ? '' : this.$props.validationMessage || this.defaultValidationMessage);
      }
    },
    localizeMessage: function localizeMessage(message) {
      return this.localizationService.toLanguageString(message, messages_1.messages[message]);
    },
    focusElement: function focusElement() {
      if (this.$el) {
        // @ts-ignore
        this.$el.focus();
      }
    },
    setValue: function setValue(e, val) {
      if (!this.$props.checked !== undefined && !this.$props.disabled) {
        if (!this.$props.value !== undefined && !this.$props.disabled) {
          this.currentValue = val;
        }

        this.currentChecked = val;
      }

      if (!this.$props.disabled) {
        var handle = {
          element: this.$el,
          focus: null // focusElement

        };
        this.$emit('change', {
          e: e,
          handle: handle,
          value: val
        });
      }
    },
    onChangeHandler: function onChangeHandler(e) {
      var newValue = e.target.checked;
      this.setValue(e, newValue);
    },
    onKeyDownHandler: function onKeyDownHandler(e) {
      if (this.$props.disabled) {
        return;
      }

      var keyCode = e.keyCode;
      var currentVal = e.currentTarget.checked;

      if (keyCode === kendo_vue_common_1.Keys.space) {
        e.preventDefault();
        e.stopPropagation();
        this.setValue(e, !currentVal);
      }
    },
    onFocusHandler: function onFocusHandler(e) {
      if (!this.$props.disabled) {
        var handle = {
          element: this.$el,
          focus: null // focusElement

        };
        this.$emit('focus', {
          e: e,
          handle: handle
        });
      }
    }
  }
};
exports.Checkbox = Checkbox;