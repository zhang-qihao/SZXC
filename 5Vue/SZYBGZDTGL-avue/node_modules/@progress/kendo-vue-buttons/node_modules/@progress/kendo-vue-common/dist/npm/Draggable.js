"use strict";

var _Draggable;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Draggable = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;

var kendo_draggable_1 = require("@telerik/kendo-draggable");

var defaultSlots_1 = require("./defaultSlots");
/**
 * Represents the default `Draggable` component.
 */


var Draggable = (_Draggable = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    this.draggable = new kendo_draggable_1.default({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!gh ? undefined : function () {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit('press', event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit('drag', event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit('release', event, this.element);
      }
    }
  }
}, _defineProperty(_Draggable, "setup", !gh ? undefined : function () {
  var v3 = !!gh;
  return {
    v3: v3
  };
}), _defineProperty(_Draggable, "render", function render(createElement) {
  // @ts-ignore
  var h = gh || createElement;
  return defaultSlots_1.getDefaultSlots(this);
}), _Draggable);
exports.Draggable = Draggable;