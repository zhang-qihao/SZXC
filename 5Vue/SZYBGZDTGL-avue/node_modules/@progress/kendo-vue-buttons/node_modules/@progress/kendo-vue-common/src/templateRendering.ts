// @ts-ignore
import * as Vue from 'vue';
const allVue = Vue as any;
const gh = allVue.h;
/**
 * @hidden
 */
export function templateRendering(this: any, template: any, listeners: any) {
    if (!template) {
         return undefined;
    }
    
    let scopedSlot = gh ? 
        this.$slots[template] ||
        (template.toLowerCase ? this.$slots[template.toLowerCase()]
        : null) :
        this.$scopedSlots[template] ||
        (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()]
        : null);
     // @ts-ignore
    if (typeof template === 'string' && scopedSlot) {
     // @ts-ignore
        return {type: 'slot', render: scopedSlot, listeners: listeners };
    } 
 
    if (typeof template === 'string' || typeof template === 'object' ||
         (typeof template === 'function' && template.component)) {
        return {type: 'component', render: template, listeners: listeners};
    }
 
    return {type: 'renderFunction', render: template, listeners: listeners}; 
 }

/**
 * @hidden
 */
export  function getTemplate(
    this: any,
    { 
        h: h, 
        template: template, 
        defaultRendering: defaultRendering,
        defaultSlots: defaultSlots,
        additionalProps: additionalProps,
        additionalListeners: additionalListeners,
        swapDefaultSlots: swapDefaultSlots
    }: any) {
    if (!template) {
        return defaultRendering;
    }
    let events;
    let props;
    let componentOptions;

    if (gh) {
        const passedProps = defaultRendering ? defaultRendering.props : {};
        events = { 
            ...transformListeners(additionalListeners),
            ...template.listeners
        };
        props = {
            ...passedProps,
            ...additionalProps
        };
        componentOptions = {
            ...props,
            ...events
        };
    } else {
        const hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
        const defaultListeners = hasComponentOptions ? 
            defaultRendering.componentOptions.listeners : {};
        const defaultProps = hasComponentOptions ? 
        defaultRendering.componentOptions.propsData : {};

        events = { 
            ...defaultListeners,
            ...additionalListeners,
            ...template.listeners
        };
        props = {
            ...defaultProps,
            ...additionalProps
        };
        componentOptions = {props: props, on: events };
    }     

    if (template.type === 'slot') {
        return template.render({ props: props, listeners: events, methods: events,
            defaultSlots: defaultSlots })[0];
    } else if (template.type === 'renderFunction') {
        if (swapDefaultSlots) { 
            return template.render(h, defaultRendering, defaultSlots, props, events);
        }
        return template.render(h, defaultRendering, props, events, defaultSlots);
    } else {

        return h(
            template.render, 
            componentOptions, 
            gh ? () => [defaultSlots] : [defaultSlots]);
    }
}

/**
 * @hidden
 */
export  function transformListeners(listeners: any) {
    if (!listeners) {
        return listeners;
    }

    const newListeners = {};
    const listenersKeys = Object.keys(listeners);

    for (let i = 0; i < listenersKeys.length; i++) {
        let currentKey = listenersKeys[i];
        newListeners['on' + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] =
         listeners[currentKey];
      }

    return newListeners;
}
