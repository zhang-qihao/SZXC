// @ts-ignore
import * as Vue from 'vue';
const allVue = Vue as any;
const gh = allVue.h;
import KendoDraggable from '@telerik/kendo-draggable';
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
type DefaultData<V> =  object | ((this: V) => {});
type DefaultMethods<V> =  { [key: string]: (this: V, ...args: any[]) => any };
import { getDefaultSlots } from './defaultSlots';

/**
 * @hidden
 */
export interface DraggableProps {
    key?: any;   
    onPressHandler?: (draggableEvent: any, element: HTMLElement) => void;
    onDragHandler?: (draggableEvent: any, element: HTMLElement ) => void;
    onReleaseHandler?: (draggableEvent: any) => void;
}

/**
 * @hidden
 */
export interface DraggableMethods extends Vue {
    press: (event: any) => void;
    drag: (event: any)  => void;
    release: (event: any) => void;
}

/**
 * @hidden
 */
export interface DraggableState {
    element: any | null;
    draggable: any;
}

/**
 * @hidden
 */
export interface DraggableAll extends DraggableMethods,
 DraggableState {
}

/**
 * @hidden
 */
export interface DraggablePressEvent {
    event: any;
    element: HTMLElement;
}

/**
 * @hidden
 */
export interface DraggableDragEvent {
    event: any;
    element: HTMLElement;
}

/**
 * @hidden
 */
export interface DraggableReleaseEvent {
    event: any;
}
/**
 * Represents the default `Draggable` component.
 */
let Draggable: ComponentOptions<Vue, DefaultData<{}>,
DefaultMethods<DraggableAll>, {}, RecordPropsDefinition<DraggableProps>> = {
    // @ts-ignore
    emits: {
        press: null,
        drag: null,
        release: null
    },
    inheritAttrs: false,
    created(this: DraggableAll) {
        this.element = null;
        this.draggable = new KendoDraggable({
            press: this.press,
            drag: this.drag,
            release: this.release
        });
    },
    // @ts-ignore
    setup: (!gh) ? undefined : function() {
        const v3 = !!gh;
        return {
            v3
        };
    },
    mounted(this: DraggableAll) {
        if (this.$el) {
            this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
            this.draggable.bindTo(this.element);
        }
    },
    destroyed: (!!gh) ? undefined : function(this: DraggableAll) {
        this.draggable.destroy();
    },
    // @ts-ignore
    unmounted(this: DraggableAll) {
        this.draggable.destroy();
    },
    methods: {
        press (event: any) {
            if (this.element) {
                this.$emit('press', event, this.element);
            }
        },
        drag (event: any) {
            if (this.element) {
                this.$emit('drag', event, this.element);
            }
        },
        release (event: any) {
            if (this.element) {
                this.$emit('release', event, this.element);
            }
        }
    },
    // @ts-ignore
    setup: (!gh) ? undefined : function() {
        const v3 = !!gh;

        return {
            v3
        };
    },
    // @ts-ignore
    render(this: DraggableAll, createElement: any) {
         // @ts-ignore
        const h = gh || createElement;
        return getDefaultSlots(this);
    }
};

export { Draggable };
