// @ts-ignore
import * as Vue from 'vue';
const allVue = Vue as any;
const gh = allVue.h;
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
type DefaultData<V> =  object | ((this: V) => {});
type DefaultMethods<V> =  { [key: string]: (this: V, ...args: any[]) => any };
import { Animation } from './Animation';
import { AnimationInterface } from './AnimationInterface';
import { VNode } from 'vue';
import { getDefaultSlots } from '@progress/kendo-vue-common';

// tslint:disable:max-line-length 
/**
 * Specifies the direction of the Slide Animation ([see example]({% slug direction_animation_native %}#toc-slide)).
 *
 * The supported directions are:
 * * `up`&mdash;On showing, slides the content from bottom to top, and vice-versa.
 * * (Default) `down`&mdash;On showing, slides the content from top to bottom, and vice-versa.
 * * `left`&mdash;On showing, slides the content from right to left, and vice-versa.
 * * `right`&mdash;On showing, slides the content from left to right, and vice-versa.
 */
export type SlideDirection = 'up' | 'down' | 'left' | 'right';

/**
 * Represent the props of the [KendoVue Slide Animation component]({% slug animationtypes_animation_native %}#toc-slide).
 *
 * @example
 * ```html-preview
 * ```
 */
export interface SlideProps extends AnimationInterface {
    /**
     * After the element reaches its exit state, it is no longer available in the DOM. 
     * If a DOM operation is required, access it trough the `childFactory` function.
     */
    childFactory?: any;
    /**
     * Specifies the CSS class names which are set to the Animation.
     */
    className?: string | string[];
    /**
     * Specifies the direction of the Slide Animation. Defaults to `down`.
     */
    direction?: string;
    /**
     * Specifies the node type of the parent Animation. Defaults to `div`.
     */
    tag?: string;
    /**
     * Specifies the tag.
     */
    component?: string;
    /**
     * Specifies the id of the Animation.
     */
    id?: string;
    /**
     * Specifies the style of the parent Animation.
     */
    style?: any;
}
// tslint:enable:max-line-length
/**
 * @hidden
 */
export interface SlideMethods extends Vue {
    onEntering: (e: any) => void;
    onEnter: (e: any) => void;
    onExit: (e: any) => void;
    onExiting: (e: any) => void;
    onExited: (e: any) => void;
    onEntered: (e: any) => void;
}

/**
 * Represents the default `Slide` component.
 */
let Slide: ComponentOptions<Vue, DefaultData<{}>, 
DefaultMethods<SlideMethods>, {}, RecordPropsDefinition<SlideProps>> = {
    props: {
        appear: {
            type: Boolean,
            default: false
        },
        enter: {
            type: Boolean,
            default: true
        },
        exit: {
            type: Boolean,
            default: true
        },
        transitionEnterDuration: {
            type: Number,
            default: 300
        },
        transitionExitDuration: {
            type: Number,
            default: 300
        },
        componentChildClassName: [Array],
        childFactory: Object,
        className: String,
        direction: {
            type: String,
            default: 'down'
        },
        tag: String,
        id: String
    },
    methods: {
        onEntering(e: any): any {
            this.$emit('entering', e);
        },
        onEnter(e: any): any {
            this.$emit('enter', e);
        },
        onEntered(e: any): any {
            this.$emit('entered', e);
        },
        onExit(e: any): any {
            this.$emit('exit', e);
        },
        onExiting(e: any): any {
            this.$emit('exiting', e);
        },
        onExited(e: any): any {
            this.$emit('exited', e);
        }
    },
    // @ts-ignore
    setup: (!gh) ? undefined : function() {
        const v3 = !!gh;
        return {
            v3
        };
    },
    // @ts-ignore
    render(this: SlideMethods, createElement: any): VNode {
        const h = gh || createElement;
        const defaultSlot = getDefaultSlots(this);
        const {
            direction,
            ...other
        } = this.$props;

        const transitionName = `slide-${this.$props.direction}`;

        return (
             // @ts-ignore function children
            <Animation
             transitionName= {transitionName}
             componentChildClassName={ this.$props.componentChildClassName }
             appear = { this.$props.appear }
             enter = { this.$props.enter }
             exit = { this.$props.exit }
             onEnter={this.onEnter}
             onEntering={this.onEntering}
             onEntered={this.onEntered}
             onExit = {this.onExit}
             onExiting = {this.onExiting}
             onExited = {this.onExited}
             transitionEnterDuration = { this.$props.transitionEnterDuration }
             transitionExitDuration = { this.$props.transitionExitDuration }>
                {defaultSlot}
            </Animation>
        );
    }
};

export { Slide };
