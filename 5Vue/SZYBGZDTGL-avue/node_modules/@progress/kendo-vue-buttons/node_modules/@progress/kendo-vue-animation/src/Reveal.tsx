// @ts-ignore
import * as Vue from 'vue';
const allVue = Vue as any;
const gh = allVue.h;
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
type DefaultData<V> =  object | ((this: V) => RevealData);
type DefaultMethods<V> =  { [key: string]: (this: V, ...args: any[]) => any };
import { Animation } from './Animation';
import { AnimationInterface, AnimationEventArguments } from './AnimationInterface';
import util from './util';
import { VNode } from 'vue';
import { getDefaultSlots } from '@progress/kendo-vue-common';
// import { deepEqual } from 'assert';

// tslint:disable:max-line-length
/**
 * Specifies the direction of the Reveal Animation ([see example]({% slug direction_animation_native %}#toc-reveal)).
 *
 * The supported directions are:
 * * (Default) `vertical`&mdash;Reveals the height of the content.
 * * `horizontal`&mdash;Reveals the width of the content.
 */
export type RevealDirection = 'horizontal' | 'vertical';

/**
 * @hidden
 */
const noop = function () { /* */ };

/**
 * Represent the props of the [KendoVue Reveal Animation component]({% slug animationtypes_animation_native %}#toc-rveal).
 *
 * @example
 * ```html-preview
 * 
 * ```
 */
export interface RevealProps extends AnimationInterface {
    /**
     * After the element reaches its exit state, it is no longer available in the DOM.
     *  If a DOM operation is required, access it trough the `childFactory` function.
     */
    childFactory?: any;
    /**
     * Specifies the CSS class names which are set to the Animation.
     */
    className?: string;
    /**
     * Specifies the direction of the Reveal Animation. Defaults to `vertical`.
     */
    direction?: string;
    /**
     * Specifies the node type of the parent Animation. Defaults to `div`.
     */
    component?: string;
    /**
     * Specifies the tag.
     */
    tag?: string;
    /**
     * Specifies the id of the Animation.
     */
    id?: string;
    /**
     * Specifies the style of the parent Animation.
     */
    style?: any;
}
// tslint:enable:max-line-length

/**
 * @hidden
 */
export interface RevealData {
    maxHeight?: number;
    maxWidth?: number;
}

/**
 * @hidden
 */
export interface RevealComputed {
    animationEnteringStyle?: any;
}

/**
 * @hidden
 */
export interface RevealMethods extends Vue {
    componentWillEnter: (event: AnimationEventArguments) => void;
    componentIsEntering: (event: AnimationEventArguments) => void;
    componentWillExit: (event: AnimationEventArguments) => void;
    updateContainerDimensions: (node: HTMLElement, done: () => any) => void;
}

/**
 * @hidden
 */
export interface RevealAll extends RevealMethods, RevealData, RevealComputed {
}

/**
 * Represents the default `Reveal` component.
 */
let Reveal: ComponentOptions<Vue, DefaultData<RevealData>, 
DefaultMethods<RevealAll>, {}, RecordPropsDefinition<RevealProps>> = {
    props: {
        appear: {
            type: Boolean,
            default: false
        },
        enter: {
            type: Boolean,
            default: true
        },
        exit: {
            type: Boolean,
            default: true
        },
        transitionEnterDuration: {
            type: Number,
            default: 300
        },
        transitionExitDuration: {
            type: Number,
            default: 300
        },
        childFactory: Object,
        className: String,
        direction: {
            type: String,
            default: 'vertical'
        },
        tag: String,
        id: String
    },
    data() {
        return {
            maxHeight: '',
            maxWidth: ''
        };
    },
    methods: {
        componentWillEnter(event: AnimationEventArguments) {
            const { onEnter } = this.$props;
            this.updateContainerDimensions(event.animatedElement, () => {
                if (onEnter) {
                    onEnter.call(undefined, event);
                }
            });
        },
        componentIsEntering(event: AnimationEventArguments) {
            const { onEntering } = this.$props;

            this.updateContainerDimensions(event.animatedElement, () => {
                if (onEntering) {
                    onEntering.call(undefined, event);
                }
            });
        },
        componentWillExit(event: AnimationEventArguments) {
            const { onExit } = this.$props;

            this.updateContainerDimensions(event.animatedElement, () => {
                if (onExit) {
                    onExit.call(undefined, event);
                }
            });
        },
        updateContainerDimensions(node: HTMLElement, done: () => any = noop) {
            const content = node ? node.firstElementChild : null;

            if (content) {
                const newHeight = util.outerHeight(content);
                const newWidth = util.outerWidth(content);
    
                this.$data.maxHeight = newHeight;
                this.$data.maxWidth = newWidth;
                done();
            }
        }
    },
    computed: {
        animationEnteringStyle: {
            get(this: RevealAll): any {
                let maxOffset;

                if (this.$props.direction === 'vertical') {
                    maxOffset = { maxHeight: this.maxHeight ? `${this.maxHeight}px` : null };
                } else {
                    maxOffset = { maxWidth: this.maxWidth ? `${this.maxWidth}px` : null };
                }
        
                return {
                    maxHeight: maxOffset.maxHeight,
                    maxWidth: maxOffset.maxWidth
                };
            }
        }
    },
    // @ts-ignore
    setup: (!gh) ? undefined : function() {
        const v3 = !!gh;
        return {
            v3
        };
    },
    // @ts-ignore
    render(this: RevealAll, createElement: any): VNode {
        const h = gh || createElement;
        const defaultSlot = getDefaultSlots(this);
        const {
            direction,
            childFactory,
            ...other
        } = this.$props;

        const transitionName = `reveal-${this.$props.direction}`;
        return (
             // @ts-ignore function children
            <Animation
                appear = { this.$props.appear }
                enter = { this.$props.enter }
                exit = { this.$props.exit }
                transitionEnterDuration = { this.$props.transitionEnterDuration }
                transitionExitDuration = { this.$props.transitionExitDuration }
                onEnter={this.componentWillEnter}
                onEntering={this.componentIsEntering}
                onExit={this.componentWillExit}
                animationEnteringStyle={this.animationEnteringStyle}
                transitionName={transitionName}
            >
                 {defaultSlot}
            </Animation>
        );
    }
};

export { Reveal };
