// @ts-ignore
import * as Vue from 'vue';
const allVue = Vue as any;
const gh = allVue.h;
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
type DefaultData<V> =  object | ((this: V) => {});
type DefaultMethods<V> =  { [key: string]: (this: V, ...args: any[]) => any };
import { Animation } from './Animation';
import { AnimationInterface } from './AnimationInterface';
import { VNode } from 'vue';
import { getDefaultSlots } from '@progress/kendo-vue-common';

const EXITING_ANIMATION_STYLE = { position: 'absolute', top: '0', left: '0' };

// tslint:disable:max-line-length
/**
 * Specifies the direction of the Push Animation ([see example]({% slug direction_animation_native %}#toc-push)).
 *
 * The supported directions are:
 * * `up`&mdash;Pushes the content from bottom to top.
 * * `down`&mdash;Pushes the content from top to bottom.
 * * `left`&mdash;Pushes the content from right to left.
 * * (Default) `right`&mdash;Pushes the content from left to right.
 */
export type PushDirection = 'up' | 'down' | 'left' | 'right';

/**
 * Represent the props of the [KendoVue Push Animation component]({% slug animationtypes_animation_native %}#toc-push).
 *
 * @example
 * ```html-preview
 * ```
 */

export interface PushProps extends AnimationInterface {
    /**
     * After the element reaches its exit state, it is no longer available in the DOM.
     * If a DOM operation is required, access it trough the `childFactory` function.
     */
    childFactory?: any;
    /**
     * Specifies the CSS class names which are set to the Animation.
     */
    className?: string;
    /**
     * Specifies the direction of the Push Animation. Defaults to `right`.
     */
    direction?: string;
    /**
     * Specifies the node type of the parent Animation. Defaults to `div`.
     */
    component?: string;
    /**
     * Specifies the tag.
     */
    tag?: string;
    /**
     * Specifies the id of the Animation.
     */
    id?: string;
    /**
     * Specifies the style of the parent Animation.
     */
    style?: any;
    /**
     * Specifies whether the child elements will stack on top of each other without
     *  interfering ([more information and examples]({% slug stacked_animation_native %})).
     */
    stackChildren?: boolean;
}

/**
 * Represents the default `Push` component.
 */
let Push: ComponentOptions<Vue, DefaultData<{}>, 
DefaultMethods<{}>, {}, RecordPropsDefinition<PushProps>> = {
    props: {
        appear: {
            type: Boolean,
            default: false
        },
        enter: {
            type: Boolean,
            default: true
        },
        exit: {
            type: Boolean,
            default: true
        },
        transitionEnterDuration: {
            type: Number,
            default: 300
        },
        transitionExitDuration: {
            type: Number,
            default: 300
        },
        childFactory: Object,
        className: String,
        direction: {
            type: String,
            default: 'right'
        },
        tag: String,
        id: String
    },
    // @ts-ignore
    setup: (!gh) ? undefined : function() {
        const v3 = !!gh;
        return {
            v3
        };
    },
    // @ts-ignore
    render(this: Vue, createElement: any): VNode {
        const h = gh || createElement;
        const defaultSlot = getDefaultSlots(this);
        const transitionName = `push-${this.$props.direction}`;
        return (
             // @ts-ignore function children
            <Animation
                transitionName={transitionName}
                appear = { this.$props.appear }
                enter = { this.$props.enter }
                exit = { this.$props.exit }
                transitionEnterDuration = { this.$props.transitionEnterDuration }
                transitionExitDuration = { this.$props.transitionExitDuration }
                animationExitingStyle={this.$props.stackChildren
                    ? EXITING_ANIMATION_STYLE
                    : undefined}
            >
                 {defaultSlot}
            </Animation>
        );
    }
};

export { Push };
