// @ts-ignore
import * as Vue from 'vue';
const allVue = Vue as any;
const gh = allVue.h;
const ref = allVue.ref;
const Transition = allVue.Transition;
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
type DefaultData<V> =  object | ((this: V) => AnimationChildData);
type DefaultMethods<V> =  { [key: string]: (this: V, ...args: any[]) => any };
import { AnimationInterface } from './AnimationInterface';
import util from './util';
import { VNode } from 'vue';
import { getDefaultSlots } from '@progress/kendo-vue-common';
const styles = util.styles;

/**
 * Represents the props of the child Animation elements.
 */
export interface AnimationChildProps extends AnimationInterface {
    /**
     * Controlled by `TransitionGroup` if present. Otherwise, sets the state of the enter or exit Animations.
     */
    in?: boolean;
    /**
     * @hidden
     */
    className?: string;

    /**
     * @hidden
     */
    key?: any;
    /**
     * Specifies the transition name.
     */
    transitionStyle?: any;
    /**
     * Specifies the transition class which will be applied on the appear, enter, and exit transition.
     */
    transitionName: string;
    /**
     * Specifies the style which will be applied when the Animation reaches its entering state.
     */
    animationEnteringStyle?: any;
    /**
     * Specifies the style which will be applied when the Animation reaches its entered state.
     */
    animationEnteredStyle?: any;
    /**
     * Specifies the style which will be applied when the Animation reaches its exiting state.
     */
    animationExitingStyle?: any;
    /**
     * Specifies the style which will be applied when the Animation reaches its exited state.
     */
    animationExitedStyle?: any;
}

/**
 * @hidden
 */
export interface AnimationChildMethods extends Vue {
    onBeforeEnter: (e: any) => void;
    onEnter: (e: any) => void;
    onAfterEnter: (e: any) => void;
    onBeforeLeave: (e: any) => void;
    onLeave: (e: any) => void;
    onAfterLeave: (e: any) => void;
}

/**
 * @hidden
 */
export interface AnimationChildData {
    _element: any;
    animationStep: string;
    elementRef: any;
    v3: boolean;
}

/**
 * @hidden
 */
export interface AnimationChildAll extends AnimationChildMethods, AnimationChildData {
}

/**
 * Represents the default `Animation` component.
 */
let AnimationChild: ComponentOptions<Vue, DefaultData<AnimationChildData>, 
DefaultMethods<AnimationChildAll>, {}, RecordPropsDefinition<AnimationChildProps>> = {
    props: {
        in: Boolean,
        transitionName: {
            type: String,
            required: true
        },
        transitionStyle: Object,
        componentChildClassName: [Array],
        className: String,
        appear: {
            type: Boolean,
            default: true
        },
        enter: {
            type: Boolean,
            default: true
        },
        exit: {
            type: Boolean,
            default: true
        },
        transitionEnterDuration: Number,
        transitionExitDuration: Number,
        mountOnEnter: Boolean,
        unmountOnExit: Boolean,
        animationEnteringStyle: Object,
        animationEnteredStyle: Object,
        animationExitingStyle: Object,
        animationExitedStyle: Object
    },
    created: function(this: AnimationChildAll) {
        this.animationStep = '';
    },
    // @ts-ignore
    setup: (!gh) ? undefined : function() {
        const v3 = !!gh;
        const elementRef = ref(null);
        return {
            v3,
            elementRef
        };
    },
    mounted(this: AnimationChildAll) {
        this._element = this.v3 ? (this.elementRef || null) : (this.$refs.element || null);
    },
    computed: {
        element: {
            get(this: AnimationChildAll): any {
                return this._element;
            }
        }
    },
    methods: {
        onBeforeEnter(e: any): any {
            this.$emit(
                'beforeenter',
                {
                    animatedElement: e,
                    target: this
                });
        },
        onEnter(e: any): any {
            this.animationStep = 'entering'; 
            this.$emit(
                'entering',
                {
                    animatedElement: e,
                    target: this
                });
        },
        onAfterEnter(e: any): any {
            this.animationStep = 'entered';
            this.$emit(
                'entered',
                {
                    animatedElement: e,
                    target: this
                });
        },
        onBeforeLeave(e: any): any {
            this.$emit(
                'exit',
                {
                    animatedElement: e,
                    target: this
                });
        },
        onLeave(e: any): any {   
            this.animationStep = 'exiting'; 
            this.$emit(
                'exiting',
                {
                    animatedElement: e,
                    target: this
                });    
        },
        onAfterLeave(e: any): any {
            this.animationStep = 'exited'; 
            this.$emit(
                'exited',
                {
                    animatedElement: e,
                    target: this
                });
        }
    },
    // @ts-ignore
    render(this: AnimationChildAll, createElement: any): VNode {
        const h = gh || createElement;
        const {
            appear,
            enter,
            exit,
            transitionName,
            transitionEnterDuration,
            transitionExitDuration,
            className,
            componentChildClassName,
            mountOnEnter,
            unmountOnExit,
            animationEnteringStyle,
            animationEnteredStyle,
            animationExitingStyle,
            animationExitedStyle,
            ...other
        } = this.$props;
 
        const defaultSlot = getDefaultSlots(this);
        const hasChildren = this.v3 ? appear : (!!defaultSlot);
        const transitionTag = this.v3 ? Transition : 'transition';
        const childAnimationContainerClassNames = [
            componentChildClassName,
            styles['child-animation-container']
        ];
        let enterDuration = enter ? transitionEnterDuration : 0;
        let exitDuration = exit ? transitionExitDuration : 0;
        const defaultStyle = {
            transitionDelay: '0ms',
            transitionDuration: hasChildren ? `${enterDuration}ms` : `${exitDuration}ms`,
            ...this.$props.transitionStyle
        };
        const animationStyle = {
            entering: { transitionDuration: `${enterDuration}ms`, ...animationEnteringStyle },
            entered: { ...animationEnteredStyle },
            exiting: { transitionDuration: `${exitDuration}ms`, ...animationExitingStyle },
            exited: { ...animationExitedStyle }
        };

        let childElementStyles =  [ defaultStyle, animationStyle[this.animationStep]]; 

        const duration = {
            enter: enterDuration,
            leave: exitDuration
        };

        const rendererChildren = [ hasChildren ? h(
            'div', 
            {
                    style: childElementStyles,
                    'class': childAnimationContainerClassNames,
                    ref: this.v3 ? (el: any) => {
                        this.elementRef = el;
                    } : 'element'
            }, 
            [defaultSlot])
             : null];
        
        return h(
            transitionTag, 
            {
                duration: duration,
                attrs: this.v3 ? null : {
                duration: duration,
                name: transitionName,
                appear: appear,
                appearClass: styles[`${transitionName}-appear`] || `${transitionName}-appear`,
                appearToClass: styles[`${transitionName}-appear-active`] || `${transitionName}-appear-active`,
                enterClass: styles[`${transitionName}-enter`] || `${transitionName}-enter`,
                enterToClass: styles[`${transitionName}-enter-active`] || `${transitionName}-enter-active`,
                leaveClass: styles[`${transitionName}-exit`] || `${transitionName}-exit`,
                leaveToClass: styles[`${transitionName}-exit-active`] || `${transitionName}-exit-active`
                },
                name: transitionName,
                appear: appear,
                appearFromClass: styles[`${transitionName}-appear`] || `${transitionName}-appear`,
                enterFromClass: styles[`${transitionName}-enter`] || `${transitionName}-enter`,
                leaveFromClass: styles[`${transitionName}-exit`] || `${transitionName}-exit`,
                appearToClass: styles[`${transitionName}-appear-active`] || `${transitionName}-appear-active`,
                enterToClass: styles[`${transitionName}-enter-active`] || `${transitionName}-enter-active`,
                leaveToClass: styles[`${transitionName}-exit-active`] || `${transitionName}-exit-active`,
                onBeforeEnter: this.onBeforeEnter,
                on: this.v3 ? null : {
                'beforeEnter': this.onBeforeEnter,
                'enter': this.onEnter,
                'afterEnter': this.onAfterEnter,
                'beforeLeave': this.onBeforeLeave,
                'leave': this.onLeave,
                'afterLeave': this.onAfterLeave
                },
                onEnter: this.onEnter,
                onAfterEnter: this.onAfterEnter,
                onBeforeLeave: this.onBeforeLeave,
                onLeave: this.onLeave,
                onAfterLeave: this.onAfterLeave
            }, 
            this.v3 ? () => rendererChildren : rendererChildren );
    }
};

export { AnimationChild };
