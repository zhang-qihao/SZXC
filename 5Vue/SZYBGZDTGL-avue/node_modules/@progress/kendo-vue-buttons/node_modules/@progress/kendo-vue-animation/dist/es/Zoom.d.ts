import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { AnimationInterface } from './AnimationInterface';
/**
 * Specifies the direction of the Zoom Animation ([see example]({% slug direction_animation_native %}#toc-zoom)).
 *
 * The supported directions are:
 * * `in`&mdash;Zooms the content from the inside to the outside.
 * * (Default) `out`&mdash;Zooms the content from the outside to the inside.
 */
export declare type ZoomDirection = 'in' | 'out';
/**
 * Represent the props of the [KendoVue Zoom Animation component]({% slug animationtypes_animation_native %}#toc-zoom).
 *
 * @example
 * ```html-preview
 *
 * ```
 */
export interface ZoomProps extends AnimationInterface {
    /**
     * After the element reaches its exit state, it is no longer available in the DOM. If a DOM operation is required, access it trough the `childFactory` function.
     */
    childFactory?: any;
    /**
     * Specifies the CSS class names which are set to the Animation.
     */
    className?: string;
    /**
     * Specifies the direction of the Zoom Animation. Defaults to `out`.
     */
    direction?: string;
    /**
     * Specifies the node type of the parent Asnimation. Defaults to `div`.
     */
    component?: string;
    /**
     * Specifies the tag.
     */
    tag?: string;
    /**
     * Specifies the id of the Animation.
     */
    id?: string;
    /**
     * Specifies the style of the parent Animation.
     */
    style?: any;
    /**
     * Specifies whether the child elements will stack on top of each other without interfering ([more information and examples]({% slug stacked_animation_native %})).
     */
    stackChildren?: boolean;
}
/**
 * Represents the default `Zoom` component.
 */
declare let Zoom: ComponentOptions<Vue, DefaultData<{}>, DefaultMethods<{}>, {}, RecordPropsDefinition<ZoomProps>>;
export { Zoom };
