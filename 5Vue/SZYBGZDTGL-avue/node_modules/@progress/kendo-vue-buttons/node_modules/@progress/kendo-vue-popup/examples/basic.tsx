import Vue from 'vue';
import * as util from '@progress/kendo-popup-common';
import { Popup } from '../src/Popup';
interface AnchorProps {
    left?: number;
    right?: number;
    top?: number;
    bottom?: number;
}

const anchor = Vue.component('anchor', {
    props: {
        left: Number,
        right: Number,
        top: Number,
        bottom: Number
    },
    template: `<div class="anchor" :style="{ 
            position: 'absolute',
            left: this.left ? this.left + 'px' : null,
            right: this.right ? this.right + 'px' : null,
            top: this.top ? this.top + 'px' : null,
            bottom: this.bottom ? this.bottom + 'px' : null}">
        Anchor
    </div>`
});

const configselector = Vue.component('configselector', {
    props: {
        horizontalValues: Array,
        verticalValues: Array,
        defaultValues: Object
    },
    data: function() {
        return {
            initialDefaultValues: null,
            horizontal: String,
            vertical: String
        };
    },
    created() {
        // @ts-ignore
        this.initialDefaultValues = this.defaultValues;
    },
    methods: {
        changeHandler: function() {
            // @ts-ignore
            this.$emit('change', this.initialDefaultValues);
        }
    },
    template: ` <div>
    <label>
        Horizontal:
        <select
            class='horizontal'
            v-model="initialDefaultValues.horizontal" 
            @change="changeHandler"
        >
        <option v-for="val of horizontalValues" >{{val}}</option>
        </select>
    </label>

    <label>
        Vertical:
        <select
            class='vertical'
            v-model="initialDefaultValues.vertical"
            @change="changeHandler"
        >
        <option v-for="val of verticalValues">{{val}}</option>
        </select>
    </label>
</div>`
});

Vue.component('Popup', Popup);
// @ts-ignore
let a = new Vue({
    el: '#app',
    data: function () {
        return {
            animatePopup: false,
            anchorLeft: 500,
            anchorRight: null,
            anchorBottom: null,
            anchorTop: 100,
            staticTop: 100,
            staticLeft: 100,
            collision: {
                type: Object,
                default: function () {
                    return {
                        horizontal: util.Collision.fit,
                        vertical: util.Collision.flip
                    };
                }
            },
            collisionValues: Object.keys(util.Collision),
            horizontalValues: [util.AlignPoint.left, util.AlignPoint.center, util.AlignPoint.right],
            anchorAlign: {
                type: Object,
                default: function () {
                    return {
                        horizontal: util.AlignPoint.left,
                        vertical: util.AlignPoint.bottom
                    };
                }
            },
            popupAlign: {
                type: Object,
                default: function () {
                    return {
                        horizontal: util.AlignPoint.left,
                        vertical: util.AlignPoint.top
                    };
                }
            },
            show: false,
            showStatic: true,
            verticalValues: [util.AlignPoint.top, util.AlignPoint.center, util.AlignPoint.bottom]
        };
    },
    computed: {
        normalizedPopupAlign() {
           
          return Object.assign(
              {
                    horizontal: util.AlignPoint.left,
                    vertical: util.AlignPoint.top
              }, 
            // @ts-ignore
              this.popupAlign);
        },
        normalizedAnchorAlign() {
            return Object.assign(
                {
                    horizontal: util.AlignPoint.left,
                    vertical: util.AlignPoint.bottom
                }, 
                 // @ts-ignore
                this.anchorAlign);
        },
        normalizedCollision() {
            return Object.assign(
                {
                    horizontal: util.Collision.fit,
                    vertical: util.Collision.flip
                }, 
                 // @ts-ignore
                this.collision);
        }
    },
    methods: {
        collisionChange(collisions: any) {
            this.collision = collisions;
        },
        originChange(origins: any) {
            this.anchorAlign = origins;
            this.popupAlign = this.popupAlign;
        },
        positionChange(positions: any) {
            this.anchorAlign = this.anchorAlign;
            this.popupAlign = positions;
        }, 
        toggle() {
            this.show = !this.show;
        },
        toggleStatic () {
            this.showStatic = !this.showStatic;
        }
    }
});
