import { DOMService } from './domService';

import { ElementRect, OffsetPosition as Offset, ScrollInfo, AlignStrategy } from '@progress/kendo-popup-common';

import { AlignElementSettings } from '../models/AlignElementSettings';

import { eitherRect, removeStackingOffset } from '../util';

/**
 * @hidden
 */
export class AlignService {
    constructor(private _dom: DOMService) { }

    public alignElement(settings: AlignElementSettings): Offset {
        const { anchor, element, anchorAlign, elementAlign, offset } = settings;

        const fixedMode = !this._dom.hasOffsetParent(element);

        const anchorRect = fixedMode ?
            this.absoluteRect(anchor, element, offset as Offset) :
            this.relativeRect(anchor, element, offset as Offset);

        return this._dom.align({
            anchorAlign: anchorAlign as AlignStrategy,
            anchorRect: anchorRect,
            elementAlign: elementAlign,
            elementRect: this._dom.offset(element) as ElementRect
        });
    }

    private absoluteRect(anchor: any, element: any, offset: Offset): ElementRect {
        const dom = this._dom;
        const rect = eitherRect(dom.offset(anchor), offset);
        const stackingOffset = dom.stackingElementOffset(element);
        const removedOffset = removeStackingOffset(rect, stackingOffset);
        const stackingScroll = dom.stackingElementScroll(element);
        const withScroll = dom.addScroll(removedOffset, stackingScroll);
        const scrollPosition = this.elementScrollPosition(anchor, element);
        const result = dom.removeScroll(withScroll, scrollPosition);

        result.left += window.scrollX || window.pageXOffset;
        result.top += window.scrollY || window.pageYOffset;

        return result;
    }

    private elementScrollPosition(anchor: any, element: any): ScrollInfo {
        return anchor ? { x: 0, y: 0 } : this._dom.scrollPosition(element);
    }

    private relativeRect(anchor: any, element: any, offset: Offset): ElementRect {
        return eitherRect(this._dom.position(anchor, element) as ElementRect, offset);
    }
}
