// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
import { classNames, getDefaultSlots } from '@progress/kendo-vue-common';
import { ButtonWrap } from './ButtonWrap';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from './package-metadata';
import util from './util';
var styles = util.styles; // tslint:enable:max-line-length

var ButtonGroup = {
  name: 'KendoButtonGroup',
  props: {
    disabled: {
      type: Boolean,
      default: undefined
    },
    width: String,
    dir: {
      type: String,
      default: function _default() {
        return undefined;
      }
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _a;

    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);

    var renderButton = function renderButton(child, index, isLast, isRtl) {
      var _a;

      var className = classNames((_a = {}, _a[styles['state-disabled']] = this.$props.disabled, _a[styles['group-start']] = isRtl ? isLast : index === 0, _a[styles['group-end']] = isRtl ? index === 0 : isLast, _a));
      return h(ButtonWrap, {
        class: className,
        attrs: this.v3 ? undefined : {
          'aria-disabled': this.$props.disabled
        },
        'aria-disabled': this.$props.disabled
      }, this.v3 ? function () {
        return [child];
      } : [child]);
    };

    var mapButtons = function mapButtons(children) {
      var _this = this;

      var count = children.length;
      var rtl = this.$props.dir !== undefined ? this.$props.dir === 'rtl' : this.$el && getComputedStyle(this.$el).direction === 'rtl' || false;
      return children.map(function (child, index) {
        if (_this.isValidButton(child)) {
          return renderButton.call(_this, child, index, index === count - 1, rtl);
        }

        return child;
      });
    };

    var groupClasses = classNames([styles['button-group']], (_a = {}, _a[styles['state-disabled']] = this.$props.disabled, _a[styles['button-group-stretched']] = !!this.$props.width, _a));
    return h("div", {
      width: this.$props.width,
      attrs: this.v3 ? undefined : {
        width: this.$props.width,
        dir: this.$props.dir // Accessibility properties
        ,
        role: 'group',
        "aria-disabled": this.$props.disabled,
        "aria-multiselectable": true
      },
      dir: this.$props.dir,
      role: 'group',
      "aria-disabled": this.$props.disabled,
      "aria-multiselectable": true,
      "class": groupClasses
    }, [mapButtons.call(this, defaultSlot)]);
  },
  methods: {
    isValidButton: function isValidButton(child) {
      return child && child.tag && child.tag.toLowerCase().indexOf('button') !== -1 || child.componentOptions && child.componentOptions.tag && child.componentOptions.tag.toLowerCase().indexOf('button') !== -1 || child.type && child.type.name && child.type.name.toLowerCase().indexOf('kendobutton') !== -1;
    }
  }
};
export { ButtonGroup };