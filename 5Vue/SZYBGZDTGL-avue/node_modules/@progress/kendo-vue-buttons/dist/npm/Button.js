"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
var inject = allVue.inject;

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var kendo_licensing_1 = require("@progress/kendo-licensing");

var package_metadata_1 = require("./package-metadata");

var util_1 = require("./util");

var styles = util_1.default.styles; // tslint:enable:max-line-length

var Button = {
  name: 'KendoButton',
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    look: {
      type: String,
      default: function _default() {
        return 'default';
      }
    },
    primary: {
      type: Boolean,
      default: false
    },
    selected: {
      type: Boolean,
      default: undefined
    },
    togglable: {
      type: Boolean,
      default: false
    },
    icon: {
      type: String,
      default: function _default() {
        return undefined;
      }
    },
    iconClass: {
      type: String,
      default: function _default() {
        return undefined;
      }
    },
    imageUrl: {
      type: String,
      default: function _default() {
        return undefined;
      }
    },
    imageAlt: String,
    disabled: {
      type: Boolean,
      default: undefined
    }
  },
  created: function created() {
    kendo_licensing_1.validatePackage(package_metadata_1.packageMetadata);
    this.currentActive = this.$props.togglable === true && this.$props.selected === true;
  },
  data: function data() {
    return {
      currentActive: null
    };
  },
  computed: {
    currentSelected: function currentSelected() {
      return this._activeTemp !== undefined ? this._activeTemp : this.currentActive;
    }
  },
  updated: function updated() {
    if (this.$props.togglable && this.$props.selected !== undefined && this.$props.selected !== this.currentActive) {
      this.currentActive = this.$props.selected;
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  methods: {
    toggleIfApplicable: function toggleIfApplicable() {
      if (this.$props.togglable && this.$props.selected === undefined) {
        var active = !this.currentActive;
        this._activeTemp = active;
        this.currentActive = active;
        this._activeTemp = undefined;
      }
    },
    handleClick: function handleClick(event) {
      this.toggleIfApplicable();
      this.$emit('click', event);
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var _a;

    var h = gh || createElement;
    var _b = this.$props,
        look = _b.look,
        primary = _b.primary,
        togglable = _b.togglable,
        icon = _b.icon,
        iconClass = _b.iconClass,
        imageUrl = _b.imageUrl,
        imageAlt = _b.imageAlt;
    var hasIcon = icon !== undefined || iconClass !== undefined || imageUrl !== undefined;
    var defaultSlot = kendo_vue_common_1.getDefaultSlots(this);
    var hasChildren = defaultSlot;
    var buttonClasses = kendo_vue_common_1.classNames([styles.button], (_a = {}, _a[styles["" + look]] = look !== 'default', _a[styles.primary] = primary, _a[styles['state-disabled']] = this.$props.disabled, _a[styles['state-active']] = this.currentActive, _a[styles['button-icon']] = !hasChildren && hasIcon, _a[styles['button-icontext']] = hasChildren && hasIcon, _a), [styles["" + this.$props.dir]]);

    var iconElement = function iconElement() {
      if (imageUrl) {
        return h("img", {
          role: "presentation",
          attrs: this.v3 ? undefined : {
            role: "presentation",
            alt: imageAlt,
            src: imageUrl
          },
          "class": 'k-image',
          alt: imageAlt,
          src: imageUrl
        });
      } else if (icon) {
        var iconClasses = kendo_vue_common_1.classNames('k-icon', 'k-i-' + icon);
        return h("span", {
          role: "presentation",
          attrs: this.v3 ? undefined : {
            role: "presentation"
          },
          "class": iconClasses
        });
      } else if (iconClass) {
        return h("span", {
          role: "presentation",
          attrs: this.v3 ? undefined : {
            role: "presentation"
          },
          "class": iconClass
        });
      }

      return null;
    };

    return h("button", {
      "class": buttonClasses,
      onClick: this.handleClick // Accessibility properties
      ,
      on: this.v3 ? undefined : {
        "click": this.handleClick
      },
      role: togglable ? 'checkbox' : undefined,
      attrs: this.v3 ? undefined : {
        role: togglable ? 'checkbox' : undefined,
        "aria-disabled": this.$props.disabled || undefined,
        "aria-checked": togglable ? this.currentActive : undefined
      },
      "aria-disabled": this.$props.disabled || undefined,
      "aria-checked": togglable ? this.currentActive : undefined
    }, [iconElement.call(this), defaultSlot]);
  }
};
exports.Button = Button;