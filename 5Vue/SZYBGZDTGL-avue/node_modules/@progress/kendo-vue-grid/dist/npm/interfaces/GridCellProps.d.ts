/**
 * The props of the GridCell component.
 */
/**
 * @hidden
 */
export interface GridCellProps {
    /**
     * The field to which the cell is bound ([see example]({% slug sorting_grid_native %})).
     */
    key?: number;
    /**
     * The field to which the cell is bound ([see example]({% slug sorting_grid_native %})).
     */
    field: string;
    /**
     * The data object that represents the current row.
     */
    dataItem: any;
    /**
     *
     */
    dataIndex?: number;
    /**
     * The format that is applied to the value before the value is displayed. Takes the `{0:format}`
     * form where `format` is any of the following:
     * * A standard number format
     * * A custom number format
     * * A standard date format
     * * A custom date format
     *
     * For more information on the supported date and number formats,
     * refer to the [kendo-intl](https://github.com/telerik/kendo-intl/blob/develop/docs/index.md) documentation.
     */
    format?: string;
    /**
     * The custom CSS classes of the cells.
     */
    className?: string;
    /**
     * The index of all rendered columns.
     */
    columnIndex?: number;
    /**
     * The number of rendered columns in the Grid.
     */
    columnsCount?: number;
    /**
     * The type of the row.
     */
    rowType?: string;
    /**
     * @hidden
     */
    level?: number;
    /**
     * The expanded value of the cell when hierarchy or grouping are used.
     */
    expanded?: boolean;
    /**
     * The event that is fired when the cell is selected.
     */
    selectionchange?: (event: any, dataItem: any) => void;
    /**
     * @hidden
     */
    style?: any;
    /**
     * The column span of the cell.
     */
    colSpan?: number;
    /**
     * The event that is fired when the cell value is changed.
     */
    change?: (event: {
        dataItem: any;
        event: any;
        field?: string;
        value?: any;
    }) => void;
    /**
     * The event that is fired when the keydown event of the cell is triggered.
     */
    cellkeydown?: (event: {
        event: any;
        dataItem: any;
        field: string;
    }) => void;
    /**
     * The event that is fired when the cell is clicked.
     */
    cellclick?: (event: {
        dataItem: any;
        field: string;
    }) => void;
    /**
     * The event that is fired when the cell is about to be added.
     */
    add?: (event: {
        dataItem: any;
    }) => void;
    /**
     * The event that is fired when the cell is about to be edited.
     */
    edit?: (event: {
        dataItem: any;
    }) => void;
    /**
     * The event that is fired when the cell is about to be saved.
     */
    save?: (event: {
        dataItem: any;
    }) => void;
    /**
     * The event that is fired when the cell is about to be removed.
     */
    remove?: (event: {
        dataItem: any;
    }) => void;
    /**
     * The event that is fired when the cell is about to be canceled.
     */
    cancel?: (event: {
        dataItem: any;
    }) => void;
    /**
     * The type of the data which will be used when formatting the cell data.
     * Could be one of the following values 'text' | 'numeric' | 'boolean' | 'date'.
     */
    type?: string;
    /**
     * The type of the editor which will be used when the cell is in edit mode.
     * Could be one of the following values 'text' | 'numeric' | 'boolean' | 'date'.
     */
    editor?: string;
    /**
     * The method for rendering the cell.
     */
    render?: any;
}
