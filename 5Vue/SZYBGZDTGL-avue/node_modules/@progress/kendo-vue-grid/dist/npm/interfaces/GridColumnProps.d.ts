import { VNode } from 'vue';
import { GridFilterCellProps, GridHeaderCellProps, GridFooterCellProps, GridCellProps } from '../main';
/**
 * The props that can be assigned to the Grid column.
 */
export interface GridColumnProps {
    /**
     * The field to which the column is bound.
     */
    field?: string;
    /**
     * The title of the column.
     */
    title?: string;
    /**
     * Defines whether the column is editable
     * ([more information and examples]({% slug editing_inline_grid_native %})).
     */
    editable?: boolean;
    /**
     * Allows the column headers to be clicked and the `sortChange` event emitted.
     * You have to handle the `sortChange` event yourself and sort the data.
     */
    sortable?: boolean;
    /**
     * Defines the custom rendering of the cell. Accepts a Vue component, a `render` function, or a slot name.
     * If not set, a `GridCell` will be rendered by default.
     */
    cell?: ((h: any, defaultRendering: VNode | null, props: GridCellProps, listeners: any) => VNode) | string | any;
    /**
     * @hidden
     */
    internalCell?: any;
    /**
     * @hidden
     */
    internalHeaderCell?: any;
    /**
     * Defines the custom rendering of the filter cell. Accepts a Vue component, a `render` function, or a slot name.
     * If not set, a `GridFilterCell` will be rendered by default.
     */
    filterCell?: ((h: any, defaultRendering: VNode | null, props: GridFilterCellProps, listeners: any) => VNode) | string | any;
    /**
     * Defines if a filter UI will be displayed for this column. Defaults to `true`.
     */
    filterable?: boolean;
    /**
     * Defines the filter type that is displayed inside the filter row.
     * Defaults to `text`.
     */
    filter?: 'text' | 'numeric' | 'boolean' | 'date';
    /**
     * Defines the editor type. Used when the column enters the edit mode
     * ([more information and examples]({% slug editing_inline_grid_native %})).
     * Defaults to `text`.
     */
    editor?: 'text' | 'numeric' | 'boolean' | 'date';
    /**
     * The width of the column (in pixels).
     */
    width?: string | number;
    /**
     * The width of the column (in pixels) below which the user is not able to resize the column through the UI.
     * Defaults to `10`. It is responsible only for the minimal width that is observed after the manual drag and it is
     * not responsible for the width of the columns when the browser is resized
     */
    minResizableWidth?: number;
    /**
     * Defines the custom rendering of the header cell. Accepts a Vue component, a `render` function, or a slot name.
     * If not set, a `GridHeaderCell` will be rendered by default.
     */
    headerCell?: ((h: any, defaultRendering: VNode | null, props: GridHeaderCellProps, listeners: any) => VNode) | string | any;
    /**
     * Defines the custom rendering of the footer cell.
     * The footer cell have to render an `HTMLTableCellElement` (TD element) and
     *  apply its `style` and `colspan` values from the footer component `props`.
     * Accepts a Vue component, a `render` function, or a slot name.
     */
    footerCell?: ((h: any, defaultRendering: VNode | null, props: GridFooterCellProps, listeners: any) => VNode) | string | any;
    /**
     * Sets the custom CSS classes to the column footer cell if there is footer.
     */
    footerClassName?: string;
    /**
     * Defines if the header selection checkbox is checked.
     */
    headerSelectionValue?: boolean;
    /**
     * The format that is applied to the value before it is displayed. Takes the `{0:format}`
     * form where `format` is any of the following:
     * * A standard number format
     * * A custom number format
     * * A standard date format
     * * A custom date format
     *
     * For more information on the supported date and number formats,
     * refer to the [kendo-intl](https://github.com/telerik/kendo-intl/blob/develop/docs/index.md) documentation.
     */
    format?: string;
    /**
     * Indicates whether the column is hidden.
     */
    hidden?: boolean;
    /**
     * Sets the custom CSS classes to the column header cell.
     */
    headerClassName?: string;
    /**
     * Sets the custom CSS classes to the column cells.
     */
    className?: string;
    /**
     * Indicates whether the column is reorderable.
     */
    reorderable?: boolean;
    /**
     * Indicates whether the column is resizable.
     */
    resizable?: boolean;
    /**
     * Determinates the position of the column. Columns with smaller `orderIndex` will appear
     * before columns with bigger `orderIndex`. Defaults to `0`.
     */
    orderIndex?: number;
    /**
     * Determines if the column can be dragged to the group panel. Defaults to `true`.
     */
    groupable?: boolean;
    /**
     * A collection of child columns.
     */
    children?: (GridColumnProps)[] | (any)[];
    /**
     * Defines if the column menu will be shown for the column.
     * Accepts Boolean, a Vue component, a `render` function, or a slot name
     */
    columnMenu?: boolean | any;
    /**
     *
     */
    locked?: boolean;
}
