import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => GridData);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { ExtendedColumnProps } from './interfaces/ExtendedColumnProps';
import { SortDescriptor, CompositeFilterDescriptor, GroupDescriptor, State } from '@progress/kendo-data-query';
import { Page } from './paging/Page';
import { VirtualScroll } from './VirtualScroll';
import { ColumnResize } from './drag/ColumnResize';
import { CommonDragLogic } from './drag/CommonDragLogic';
import { GridProps } from './interfaces/GridProps';
import { GridColumnProps } from './interfaces/GridColumnProps';
/**
 * Represents the [native Vue Grid component by Kendo UI]({% slug overview_grid_native %}).
 *
 * @example
 * ```tsx-no-run
 *   <div id="app">
 *       <Grid
 *           :data-items="products"
 *           :columns="columns">
 *        </Grid>
 *   </div>
 *   <script>
 *       Vue.component('Grid', Grid);
 *       new Vue({
 *           el: '#app',
 *           data: function () {
 *               return {
 *                  products: [
 *                    { 'foo': 'A1', 'bar': 'B1' },
 *                       { 'foo': 'A2', 'bar': 'B2' },
 *                       { 'foo': 'A3', 'bar': 'B2' }
 *                   ],
 *                   columns: [
 *                       { field: 'foo'},
 *                       { field: 'bar'}
 *                   ]
 *               };
 *           }
 *       });
 *   </script>
 * ```
 */
/**
 * @hidden
 */
export interface GridMethods extends Vue {
    getColumns: () => GridColumnProps[];
    setRefs: () => void;
    gridUnmounted: () => void;
    resetVirtual: () => void;
    onSkipChanged: (value: number, oldValue: number) => void;
    onTotalChanged: (value: number, oldValue: number) => void;
    onRowHeightChanged: (value: number, oldValue: number) => void;
    scrollHandler: (event: any) => void;
    rowClick: (e: any, item: any) => void;
    rowDoubleClick: (e: any, item: any) => void;
    itemChange: (event: {
        dataItem: any;
        event: any;
        field?: string;
        value?: any;
    }) => void;
    cellClickHandler: (event: any) => void;
    cellKeydownHandler: (event: any) => void;
    editHandler: (dataItem: any) => void;
    removeHandler: (dataItem: any) => void;
    saveHandler: (dataItem: any) => void;
    cancelHandler: (dataItem: any) => void;
    selectionChangeHandler: (event: any) => void;
    onHeaderSelectionChangeHandler: (event: any) => void;
    pageChangeHandler: (page: Page, event: any) => void;
    sortChangeHandler: (sort: SortDescriptor[], event: any) => void;
    filterChangeHandler: (filter: CompositeFilterDescriptor, event: any) => void;
    groupChangeHandler: (groups: GroupDescriptor[], event: any) => void;
    raiseDataEvent: (handler: string, data: {}, moreData: State, event: any) => void;
    columnReorder: (prev: number, next: number, event: any) => void;
    groupReorder: (prevIndex: number, nextIndex: number, event: any) => void;
    columnToGroup: (columnIndex: number, groupIndex: number, event: any) => void;
    resetTableWidth: () => void;
    onResize: (index: number, newWidth: number, oldWidth: number, event: any, end: boolean) => void;
    initColumns: (columnElements: GridColumnProps[] | null | undefined, groupCount: number) => void;
    resolveTitle: (field: string) => string;
    getDataState: () => any;
    getArguments: (event: any) => any;
}
/**
 * @hidden
 */
export interface GridData {
    _columns: ExtendedColumnProps[];
    _columnsMap: number[][];
    _header: any | null;
    _footer: any | null;
    forceUpdateTimeout: any;
    groupPanelDivRef: any;
    dropElementClueRef: any;
    dragElementClueRef: any;
    headerRef: any;
    footerRef: any;
    colGroupRef: any;
    scrollContainerRef: any;
    scrollTableRef: any;
    scrollTableBodyRef: any;
    v3: boolean;
}
/**
 * @hidden
 */
export interface GridState {
    initialHeight: String | null;
    dragLogic: CommonDragLogic;
    vs: VirtualScroll;
    columnResize: ColumnResize;
}
/**
 * @hidden
 */
export interface GridComputed {
    getCorrectHeight: any;
}
/**
 * @hidden
 */
export interface GridAll extends GridMethods, GridData, GridState, GridComputed, GridProps {
}
/**
 * Represents the default `Grid` component.
 */
declare let Grid: ComponentOptions<Vue, DefaultData<GridData>, DefaultMethods<GridAll>, GridComputed, RecordPropsDefinition<GridProps>>;
export { Grid };
