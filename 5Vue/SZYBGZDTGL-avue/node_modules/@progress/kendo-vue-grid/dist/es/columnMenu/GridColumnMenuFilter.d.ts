import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => GridColumnMenuFilterData);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { GridColumnMenuFilterBaseProps } from '../interfaces/GridColumnMenuFilterBaseProps';
/**
 * @hidden
 */
export declare const rootFilterOrDefault: (rootFilter: CompositeFilterDescriptor | undefined) => CompositeFilterDescriptor;
/**
 * Can be used to check if filtering is applied to a specific field ([see example]({% slug column_menu_grid_native %}#toc-styling-the-column-menu-icon)). Useful for creating active filter indicators.
 */
export declare const filterGroupByField: (field: string, filter: CompositeFilterDescriptor | undefined) => CompositeFilterDescriptor | null;
/**
 * The props of the GridColumnMenuFilter component.
 */
export interface GridColumnMenuFilterProps extends GridColumnMenuFilterBaseProps {
    /**
     * Controls the expand state of the filter component.
     */
    expanded?: boolean;
    /**
     * Triggers on each subsequent expand state of the filter component.
     */
    onExpandchange?: (nextExpandState: boolean) => void;
    /**
     * If set to `false`, the second filter operator and the input will be hidden.
     */
    hideSecondFilter?: boolean;
    filterUI?: any;
}
/**
 * @hidden
 */
export interface GridColumnMenuFilterStateProps {
    expanded: boolean;
    filterGroup: CompositeFilterDescriptor;
}
/**
 * @example
 *  {% meta height:410 %}
 *  ```html-preview
 *  <div id="vueapp">
 *     <Grid :style="{height: '280px'}"
 *          :data-items="gridData"
 *          :sortable="true"
 *          :sort= "sort"
 *          :filter="filter"
 *          :expand-field="'Discontinued'"
 *          @dataStateChange="dataStateChange"
 *          @expandchange="expandChange"
 *          :columns="columns">
 *       </Grid>
 *  </div>
 * ```
 * ```js
 * import { Grid, GridColumnMenuFilter } from '@progress/kendo-vue-grid';
 * import { process } from '@progress/kendo-data-query';
 *      const ColumnMenu = {
 *        props: {
 *            column: Object,
 *            sortable: [Boolean, Object],
 *            sort: {
 *                type: Array
 *            },
 *            filter: Object,
 *            filterable: Boolean
 *        },
 *        components: {
 *            GridColumnMenuFilter
 *        },
 *        template: `<div>
 *            <GridColumnMenuFilter
 *                :column="column"
 *                :filterable="filterable"
 *                :filter="filter"
 *                @closemenu ="closeMenu"
 *                @expandchange = "expandChange"
 *                @filterchange = "filterChange"
 *            />
 *        </div>`,
 *        methods: {
 *            expandChange () {
 *                this.$emit('expandchange');
 *            },
 *            closeMenu () {
 *                this.$emit('closemenu');
 *            },
 *            filterChange (newDescriptor, e) {
 *                this.$emit('filterchange', newDescriptor, e);
 *            }
 *        }
 *      };
 *
 *      Vue.component('Grid', Grid);
 *      new Vue({
 *          el: '#vueapp',
 *          components: {
 *            Grid
 *          },
 *          created: function() {
 *             this.getData();
 *          },
 *          methods: {
 *            getData: function () {
 *                let dataState = {
 *                    filter: this.filter,
 *                    sort: this.sort
 *                };
 *                this.gridData = process([{
 *                    "ProductID": 1,
 *                    "ProductName": "Chai",
 *                    "UnitsInStock": 39,
 *                    "Discontinued": false,
 *                    "FirstOrderedOn": new Date(1996, 8, 20)
 *                },{
 *                    "ProductID": 2,
 *                    "ProductName": "Chang",
 *                    "UnitsInStock": 17,
 *                    "Discontinued": false,
 *                    "FirstOrderedOn": new Date(1996, 7, 12)
 *                },{
 *                    "ProductID": 3,
 *                    "ProductName": "Aniseed Syrup",
 *                    "UnitsInStock": 13,
 *                    "Discontinued": false,
 *                    "FirstOrderedOn": new Date(1996, 8, 26)
 *                },{
 *                    "ProductID": 4,
 *                    "ProductName": "Chef Anton's Cajun Seasoning",
 *                    "UnitsInStock": 53,
 *                    "Discontinued": false,
 *                    "FirstOrderedOn": new Date(1996, 9, 19)
 *                }], dataState);
 *            },
 *            createAppState: function(dataState) {
 *                this.sort = dataState.sort;
 *                this.filter = dataState.filter;
 *                this.getData();
 *            },
 *            dataStateChange: function (event) {
 *                this.createAppState(event.data);
 *            },
 *            expandChange: function (event) {
 *                Vue.set(event.dataItem, event.target.$props.expandField, event.value);
 *            }
 *          },
 *          data: function () {
 *              return {
 *                 filter: null,
 *                 sort: [],
 *                  gridData: [],
 *                  columns: [
 *                      { field: 'ProductID'},
 *                      { field: 'ProductName', title: 'Product Name' },
 *                      { field: 'UnitsInStock', title: 'Units In Stock', columnMenu: ColumnMenu }
 *                  ]
 *              };
 *          }
 *       } );
 * ```
 */
/**
 * @hidden
 */
export interface GridColumnMenuFilterMethods extends Vue {
    removeGroup: (group: CompositeFilterDescriptor, rootFilter: CompositeFilterDescriptor) => CompositeFilterDescriptor;
    insertGroup: (group: CompositeFilterDescriptor, rootFilter: CompositeFilterDescriptor) => CompositeFilterDescriptor;
    isControlled: () => boolean;
    onFilterExpand: () => void;
    filterChangeHandler: (e: any, filterIndex?: number) => void;
    firstFilterChange: (e: any) => void;
    secondFilterChange: (e: any) => void;
    filterChange: (filterIndex: number, e: {
        value: number;
        operator: string;
    }) => void;
    logicChange: (e: any) => void;
    clear: (e: any) => void;
    currentFilterGroup: () => CompositeFilterDescriptor;
    submit: (e: any) => void;
    handleFocus: (e: any) => void;
}
/**
 * @hidden
 */
export interface GridColumnMenuFilterData {
    expanded: boolean;
    filterGroup: any;
}
/**
 * @hidden
 */
export interface GridColumnMenuFilterAll extends GridColumnMenuFilterMethods, GridColumnMenuFilterData {
}
/**
 * Represents the default `GridColumnMenuFilter` component.
 */
declare let GridColumnMenuFilter: ComponentOptions<Vue, DefaultData<GridColumnMenuFilterData>, DefaultMethods<GridColumnMenuFilterAll>, {}, RecordPropsDefinition<GridColumnMenuFilterProps>>;
export { GridColumnMenuFilter };
