// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
import { DropDownList } from '@progress/kendo-vue-dropdowns';
import { NumericTextBox } from '@progress/kendo-vue-inputs';
import { DatePicker } from '@progress/kendo-vue-dateinputs';
import { cellBoolDropdownChange, cellInputChange, cellOperatorChange } from '../filterCommon';
/**
 * Represents the default `GridColumnMenuFilterCell` component.
 */

var GridColumnMenuFilterCell = {
  props: {
    field: String,
    filterType: String,
    value: [Object, String, Number, Date, Boolean],
    operator: String,
    operators: Array
  },
  // @ts-ignore
  emits: {
    change: null
  },
  methods: {
    handleFocus: function handleFocus(e) {
      this.$emit('filtercellfocus', e);
    },
    triggerChange: function triggerChange(filter) {
      this.$emit('change', filter);
    },
    inputChange: function inputChange(value, e) {
      var filter = cellInputChange(value, e, this.$props);
      this.triggerChange(filter);
    },
    operatorChange: function operatorChange(operatorValue, e) {
      var filter = cellOperatorChange(operatorValue.value.operator, e, this.$props.value);
      this.triggerChange(filter);
    },
    boolDropdownChange: function boolDropdownChange(value, e) {
      var filter = cellBoolDropdownChange(value.value.operator, e);
      this.triggerChange(filter);
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;

    var h = gh || createElement;
    var ddlValue = this.$props.operators.find(function (item) {
      return item.operator === _this.$props.operator;
    }) || null;

    var filterComponent = function filterComponent(filterType, value, operators) {
      var _this = this;

      switch (filterType) {
        case 'numeric':
          return (// @ts-ignore
            h(NumericTextBox, {
              value: value,
              attrs: this.v3 ? undefined : {
                value: value
              },
              onChange: function onChange(e) {
                _this.inputChange(e.value, e.event);
              },
              on: this.v3 ? undefined : {
                "change": function onChange(e) {
                  _this.inputChange(e.value, e.event);
                }
              }
            })
          );

        case 'date':
          return (// @ts-ignore
            h(DatePicker, {
              value: value,
              attrs: this.v3 ? undefined : {
                value: value
              },
              onFocus: this.handleFocus,
              on: this.v3 ? undefined : {
                "focus": this.handleFocus,
                "change": function change(e) {
                  _this.inputChange(e.value, e.event);
                }
              },
              onChange: function change(e) {
                _this.inputChange(e.value, e.event);
              }
            })
          );

        case 'boolean':
          var noFilterSet_1 = function noFilterSet_1(filter) {
            return filter === null || filter === undefined;
          };

          return (// @ts-ignore
            h(DropDownList, {
              onChange: this.boolDropdownChange,
              on: this.v3 ? undefined : {
                "change": this.boolDropdownChange
              },
              value: operators.find(function (item) {
                return item.operator === (noFilterSet_1(value) ? '' : value);
              }),
              attrs: this.v3 ? undefined : {
                value: operators.find(function (item) {
                  return item.operator === (noFilterSet_1(value) ? '' : value);
                }),
                "data-items": operators,
                textField: "text"
              },
              "data-items": operators,
              textField: "text"
            })
          );

        default:
          return h("input", {
            "class": "k-textbox",
            value: this.v3 ? value || '' : null,
            domProps: this.v3 ? undefined : {
              "value": value || ''
            },
            onInput: function onInput(e) {
              _this.inputChange(e.target.value, e);
            },
            on: this.v3 ? undefined : {
              "input": function onInput(e) {
                _this.inputChange(e.target.value, e);
              }
            }
          });
      }
    };

    return h("div", [this.$props.filterType !== 'boolean' && // @ts-ignore
    h(DropDownList, {
      onChange: this.operatorChange,
      on: this.v3 ? undefined : {
        "change": this.operatorChange
      },
      value: ddlValue,
      attrs: this.v3 ? undefined : {
        value: ddlValue,
        "data-items": this.$props.operators,
        textField: "text"
      },
      "data-items": this.$props.operators,
      textField: "text"
    }), filterComponent.call(this, this.$props.filterType, this.$props.value, this.$props.operators)]);
  }
};
export { GridColumnMenuFilterCell };