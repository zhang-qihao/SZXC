// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var inject = allVue.inject;
import { normalize } from './GridPagerSettings';
import { PagerNumericButtons } from './PagerNumericButtons';
import { PagerInput } from './PagerInput';
import { PagerPageSizes } from './PagerPageSizes';
import { messages, pagerFirstPage, pagerLastPage, pagerNextPage, pagerPreviousPage, pagerInfo } from '../messages';
import { provideLocalizationService, provideIntlService } from '@progress/kendo-vue-intl';
/**
 * Represents the default `Pager` component.
 */

var Pager = {
  props: {
    total: Number,
    skip: Number,
    pageSize: Number,
    settings: [Object, Boolean]
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  computed: {
    totalPages: {
      get: function get() {
        return Math.ceil((this.$props.total || 0) / this.$props.pageSize);
      }
    },
    currentPage: {
      get: function get() {
        return Math.floor((this.$props.skip || 0) / this.$props.pageSize) + 1;
      }
    }
  },
  methods: {
    changePage: function changePage(page, e) {
      if (page > 0 && page <= this.totalPages) {
        this.$emit('pageChange', {
          skip: (page - 1) * this.$props.pageSize,
          take: this.$props.pageSize
        }, e);
      }
    },
    triggerPageChange: function triggerPageChange(e) {
      this.$emit('pageChange', e);
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var kendoIntlService = inject('kendoIntlService', {});
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore 
  render: function render(createElement) {
    var h = gh || createElement;
    var settings = normalize(this.$props.settings);
    var localizationService = provideLocalizationService(this);
    var intlService = provideIntlService(this);

    var button = function button(page, className, title, icon) {
      var _this = this;

      return h("a", {
        onClick: function onClick(e) {
          e.preventDefault();

          _this.changePage(page, e);
        },
        on: this.v3 ? undefined : {
          "click": function onClick(e) {
            e.preventDefault();

            _this.changePage(page, e);
          }
        },
        href: "#",
        attrs: this.v3 ? undefined : {
          href: "#",
          title: title
        },
        "class": className,
        title: title
      }, [h("span", {
        "class": icon,
        "aria-label": title,
        attrs: this.v3 ? undefined : {
          "aria-label": title
        }
      })]);
    };

    var changer = settings.type === 'numeric' ? // @ts-ignore
    h(PagerNumericButtons, {
      buttonCount: settings.buttonCount || 0,
      attrs: this.v3 ? undefined : {
        buttonCount: settings.buttonCount || 0,
        totalPages: this.totalPages,
        currentPage: this.currentPage
      },
      totalPages: this.totalPages,
      currentPage: this.currentPage,
      onPageChange: this.changePage,
      on: this.v3 ? undefined : {
        "pageChange": this.changePage
      }
    }) : // @ts-ignore
    h(PagerInput, {
      currentPage: this.currentPage,
      attrs: this.v3 ? undefined : {
        currentPage: this.currentPage,
        totalPages: this.totalPages
      },
      totalPages: this.totalPages,
      onPageChange: this.changePage,
      on: this.v3 ? undefined : {
        "pageChange": this.changePage
      }
    });
    var first, prev, next, last;

    if (settings.previousNext) {
      first = button.call(this, 1, 'k-link k-pager-nav k-pager-first' + (this.currentPage === 1 ? ' k-state-disabled' : ''), localizationService.toLanguageString(pagerFirstPage, messages[pagerFirstPage]), 'k-icon k-i-seek-w');
      prev = button.call(this, this.currentPage - 1, 'k-link k-pager-nav' + (this.currentPage === 1 ? ' k-state-disabled' : ''), localizationService.toLanguageString(pagerPreviousPage, messages[pagerPreviousPage]), 'k-icon k-i-arrow-w');
      next = button.call(this, this.currentPage + 1, 'k-link k-pager-nav' + (this.currentPage === this.totalPages ? ' k-state-disabled' : ''), localizationService.toLanguageString(pagerNextPage, messages[pagerNextPage]), 'k-icon k-i-arrow-e');
      last = button.call(this, this.totalPages, 'k-link k-pager-nav k-pager-last' + (this.currentPage === this.totalPages ? ' k-state-disabled' : ''), localizationService.toLanguageString(pagerLastPage, messages[pagerLastPage]), 'k-icon k-i-seek-e');
    }

    var pageSizes = settings.pageSizes !== false && // @ts-ignore
    h(PagerPageSizes, {
      onPageChange: this.triggerPageChange,
      on: this.v3 ? undefined : {
        "pageChange": this.triggerPageChange
      },
      pageSize: this.$props.pageSize,
      attrs: this.v3 ? undefined : {
        pageSize: this.$props.pageSize,
        pageSizes: settings.pageSizes
      },
      pageSizes: settings.pageSizes
    });
    var defaultMessage = messages[pagerInfo];
    var info = !settings.info ? '' : h("div", {
      "class": "k-pager-info k-label"
    }, [intlService.format(localizationService.toLanguageString(pagerInfo, defaultMessage), [Math.min(this.$props.skip + 1, this.$props.total), Math.min(this.$props.skip + this.$props.pageSize, this.$props.total), this.$props.total])]);
    return h("div", {
      "class": "k-pager-wrap k-grid-pager k-widget"
    }, [first, prev, changer, next, last, pageSizes, info]);
  }
};
export { Pager };