/**
 * @hidden
 */
export declare function getNestedValue(fieldName: string, dataItem: any): any;
/**
 * @hidden
 */
export interface DataItemWrapper {
    dataItem: any;
    rowType: GridRowType;
    level: number;
    expanded: boolean;
    dataIndex: number;
}
/**
 * @hidden
 */
export declare function flatData(output: Array<DataItemWrapper>, input: Array<any>, footer: 'always' | 'visible' | 'none', dataIndex: {
    index: number;
}, groupDefined: boolean, field?: string, level?: number): number;
/**
 * @hidden
 */
export declare function isRtl(element: Element | null): boolean;
/**
 * @hidden
 */
export declare function getIndex(event: any, parent: HTMLElement | null): number;
/**
 * @hidden
 */
export declare function checkPropCompatibility(props: GridProps): void;
/**
 * @hidden
 */
export declare function mapColumns(columns: Array<{
    parentIndex: number;
    colSpan: number;
    rowSpan: number;
    depth: number;
    kFirst?: boolean;
    children: any[];
    width?: string | number;
    locked?: boolean;
    index: number;
    left: number;
    right: number;
    rightBorder: boolean;
}>): number[][];
import { GridProps } from '../interfaces/GridProps';
import { ExtendedColumnProps } from '../interfaces/ExtendedColumnProps';
import { DataResult, GroupDescriptor } from '@progress/kendo-data-query';
import { GridRowType } from '../interfaces/GridRowType';
import { GridColumnProps } from '../interfaces/GridColumnProps';
import { IntlService } from '@progress/kendo-vue-intl';
/**
 * @hidden
 */
export declare function readColumns(newColumns: GridColumnProps[] | null | undefined, oldColumns: GridColumnProps[], depth?: number): ExtendedColumnProps[];
/**
 * @hidden
 */
export declare function autoGenerateColumns(data: any[] | DataResult | null | undefined, group: GroupDescriptor[] | undefined, expandField: string | undefined): ExtendedColumnProps[];
/**
 * @hidden
 */
export declare const footerColumns: (columns: ExtendedColumnProps[]) => ExtendedColumnProps[];
/**
 * @hidden
 */
export declare const parsers: {
    number: (value: any, intl: IntlService, format?: string) => number;
    date: (value: any, intl: IntlService, format?: string) => Date;
    boolean: (value: any) => any;
    string: (value: any) => any;
    default: (value: any) => any;
};
