"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePicker = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
var inject = allVue.inject;

var kendo_vue_popup_1 = require("@progress/kendo-vue-popup");

var kendo_date_math_1 = require("@progress/kendo-date-math");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var kendo_licensing_1 = require("@progress/kendo-licensing");

var package_metadata_1 = require("../package-metadata");

var DateInput_1 = require("../dateinput/DateInput");

var Calendar_1 = require("../calendar/components/Calendar");

var utils_1 = require("../utils");

var utils_2 = require("../utils");

var messages_1 = require("../messages");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var ToggleButton_1 = require("./ToggleButton");

var PickerWrap_1 = require("../common/PickerWrap"); // tslint:enable:max-line-length


var DatePicker = {
  name: 'DatePicker',
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  model: {
    event: 'changemodel'
  },
  // @ts-ignore
  emits: {
    'change': null,
    'changemodel': null,
    'update:modelValue': null,
    'focus': null,
    'blur': null
  },
  props: {
    defaultShow: {
      type: Boolean,
      default: false
    },
    modelValue: {
      type: Date,
      default: undefined
    },
    defaultValue: {
      type: Date,
      default: undefined
    },
    disabled: {
      type: Boolean,
      default: false
    },
    dateInput: {
      type: [String, Object, Function],
      default: function _default() {
        return undefined;
      }
    },
    calendar: {
      type: [String, Object, Function],
      default: function _default() {
        return undefined;
      }
    },
    toggleButton: {
      type: [String, Object, Function],
      default: function _default() {
        return undefined;
      }
    },
    placeholder: String,
    popup: {
      type: [String, Object, Function],
      default: function _default() {
        return undefined;
      }
    },
    pickerWrap: {
      type: [String, Object, Function],
      default: function _default() {
        return undefined;
      }
    },
    focusedDate: Date,
    format: {
      type: [Object, String],
      default: function _default() {
        return 'd';
      }
    },
    formatPlaceholder: [Object, String],
    id: String,
    max: {
      type: Date,
      default: function _default() {
        return kendo_date_math_1.cloneDate(utils_1.MAX_DATE);
      }
    },
    min: {
      type: Date,
      default: function _default() {
        return kendo_date_math_1.cloneDate(utils_1.MIN_DATE);
      }
    },
    name: String,
    popupSettings: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    show: {
      type: Boolean,
      default: undefined
    },
    tabIndex: {
      type: Number,
      default: 0
    },
    title: {
      type: String,
      default: function _default() {
        return '';
      }
    },
    value: Date,
    weekNumber: Boolean,
    width: [Number, String],
    validityStyles: {
      type: Boolean,
      default: true
    },
    validationMessage: String,
    required: Boolean,
    validate: Boolean,
    valid: {
      type: Boolean,
      default: undefined
    }
  },
  data: function data() {
    return {
      isFocused: false,
      currentValue: undefined,
      currentShow: undefined,
      valueDuringOnChange: undefined,
      showDuringOnChange: undefined,
      shouldFocusDateInput: false
    };
  },
  created: function created() {
    kendo_licensing_1.validatePackage(package_metadata_1.packageMetadata);
    this._popupId = kendo_vue_common_1.guid();
    this._anchor = kendo_vue_common_1.guid();
    this._wrapper = null;
    this._dateInput = null;
    this._calendar = null;
    this.$data.currentValue = this.$props.defaultValue;
    this.$data.currentShow = this.$props.defaultShow;
  },
  mounted: function mounted() {
    this._wrapper = this.v3 ? this.wrapperRef : this.$refs.wrapper;
    this._dateInput = this.v3 ? this.dateInputRef : this.$refs.dateInput;

    if (this.$refs.calendar || this.calendarRef) {
      this._calendar = this.v3 ? this.calendarRef : this.$refs.calendar;
    }

    if (this.computedShow) {
      // If defaultShow is true during the initial render, the popup is not aligned.
      this.$forceUpdate();
    }

    if (this._dateInput && this._dateInput.$el) {
      this._dateInput.$el.setAttribute('aria-haspopup', 'true'); // this._dateInput.$el.setAttribute('aria-expanded', `${this.$data.currentShow}`);

    }

    if (this.$el) {
      this.$el.setAttribute('aria-expanded', "" + this.computedShow);
    }
  },
  updated: function updated() {
    if (this.$el) {
      this.$el.setAttribute('aria-expanded', "" + this.computedShow);
    }

    if (this.$refs.calendar || this.calendarRef) {
      this._calendar = this.v3 ? this.calendarRef : this.$refs.calendar;
    }

    if (this.computedShow) {
      if (this._calendar && this._calendar.$el && !this._oldShow) {
        this._calendar.focus({
          preventScroll: true
        });
      }
    } else {
      if (this._dateInput && this._dateInput.$el && this.$data.shouldFocusDateInput) {
        this._dateInput.focus({
          preventScroll: true
        });
      }
    }

    this.$data.shouldFocusDateInput = false;
  },
  watch: {
    show: function show(_newShow, oldShow) {
      this._oldShow = oldShow;
    },
    currentShow: function currentShow(_newShow, oldShow) {
      this._oldShow = oldShow;
    }
  },
  computed: {
    computedValue: {
      get: function get() {
        var value = this.$data.valueDuringOnChange !== undefined ? this.$data.valueDuringOnChange : this.$props.value !== undefined ? this.$props.value : this.$props.modelValue !== undefined ? this.$props.modelValue : this.$data.currentValue;
        return value !== null ? kendo_date_math_1.cloneDate(value) : null;
      }
    },
    computedShow: {
      get: function get() {
        return this.$data.showDuringOnChange !== undefined ? this.$data.showDuringOnChange : this.$props.show !== undefined ? this.$props.show : this.$data.currentShow;
      }
    },
    wrapperClassNames: {
      get: function get() {
        var disabled = this.$props.disabled;
        return {
          'k-state-default': !disabled,
          'k-state-disabled': disabled,
          'k-state-focused': this.$data.isFocused
        };
      }
    }
  },
  methods: {
    focus: function focus() {
      if (this._dateInput) {
        this._dateInput.focus();
      }
    },
    handleFocus: function handleFocus(event) {
      this._oldShow = this.computedShow;

      if (this._wrapper) {
        this.$data.isFocused = true;
      }

      this.$emit('focus', event);
    },
    handleBlur: function handleBlur(event) {
      if (this._wrapper) {
        this.$data.isFocused = false;
      }

      this.createBlurTimeout();
      this.$emit('blur', event);
    },
    calendarBlur: function calendarBlur() {
      this.$emit('blur', event);
      clearTimeout(this._blurTimeout);
      this.createBlurTimeout();
    },
    calendarFocus: function calendarFocus() {
      this.$emit('focus', event);
      clearTimeout(this._blurTimeout);
    },
    createBlurTimeout: function createBlurTimeout() {
      var _this = this;

      this._blurTimeout = setTimeout(function () {
        if (_this._dateInput && document.activeElement !== _this._dateInput._element) {
          _this.setShow(false);
        }
      }, 200);
    },
    validity: function validity() {
      var value = this.computedValue;
      var inRange = utils_2.isInDateRange(value, this.$props.min, this.$props.max);
      var customError = this.$props.validationMessage !== undefined;
      var isValid = (!this.$props.required || value !== null) && inRange;
      var valid = this.$props.valid !== undefined ? this.$props.valid : isValid;
      return {
        customError: customError,
        rangeOverflow: value && this.$props.max.getTime() < value.getTime() || false,
        rangeUnderflow: value && value.getTime() < this.$props.min.getTime() || false,
        valid: valid,
        valueMissing: value === null
      };
    },
    nextValue: function nextValue(nextProps, nextState) {
      return nextProps.value !== undefined ? nextProps.value : nextState.value;
    },
    nextShow: function nextShow(nextProps, nextState) {
      return nextProps.show !== undefined ? nextProps.show : nextState.show;
    },
    setShow: function setShow(show) {
      if (this.computedShow === show) {
        return;
      }

      this.$data.currentShow = show;
    },
    mergeTime: function mergeTime(value) {
      return this.computedValue && value ? utils_1.setTime(value, this.computedValue) : value;
    },
    handleInputValueChange: function handleInputValueChange(event) {
      this.handleValueChange(event.value, event);
    },
    handleCalendarValueChange: function handleCalendarValueChange(event) {
      var value = this.mergeTime(event.value);
      this.handleValueChange(value, event);
    },
    handleValueChange: function handleValueChange(value, event) {
      this.$data.currentValue = kendo_date_math_1.cloneDate(value || undefined);
      this.$data.currentShow = false;
      this.$data.valueDuringOnChange = value;
      this.$data.showDuringOnChange = false;
      this.$data.shouldFocusDateInput = true;
      this.$emit('change', {
        event: event.event,
        value: this.computedValue,
        show: this.computedShow,
        component: this,
        target: {
          name: this.$props.name,
          value: this.computedValue,
          valueAsDate: this.computedValue
        },
        validity: this.validity()
      });
      this.$emit('changemodel', this.computedValue);
      this.$emit('update:modelValue', this.computedValue);
      this.$data.valueDuringOnChange = undefined;
      this.$data.showDuringOnChange = undefined;
    },
    handleIconClick: function handleIconClick(event) {
      event.stopPropagation();
      event.preventDefault();

      if (this.$props.disabled) {
        return;
      }

      this.$data.shouldFocusDateInput = true;
      this.setShow(!this.computedShow);
    },
    handleIconMouseDown: function handleIconMouseDown(event) {
      event.stopPropagation();
      event.preventDefault();
    },
    handleKeyDown: function handleKeyDown(event) {
      var altKey = event.altKey,
          keyCode = event.keyCode;

      if (keyCode === kendo_vue_common_1.Keys.tab && event.target !== this._dateInput._element) {
        event.preventDefault();
        this.$data.shouldFocusDateInput = true;
        this.setShow(false);
        return;
      }

      if (keyCode === kendo_vue_common_1.Keys.esc) {
        this.$data.shouldFocusDateInput = true;
        this.setShow(false);
        return;
      }

      if (altKey && (keyCode === kendo_vue_common_1.Keys.up || keyCode === kendo_vue_common_1.Keys.down)) {
        event.preventDefault();
        event.stopPropagation();
        this.$data.shouldFocusDateInput = keyCode === kendo_vue_common_1.Keys.up;
        this.setShow(keyCode === kendo_vue_common_1.Keys.down);
      }
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var listRef = ref(null);
    var kendoAnchorRef = ref(null);
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      listRef: listRef,
      kendoAnchorRef: kendoAnchorRef,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;

    var h = gh || createElement;
    var _a = this.$props,
        disabled = _a.disabled,
        tabIndex = _a.tabIndex,
        title = _a.title,
        id = _a.id,
        format = _a.format,
        formatPlaceholder = _a.formatPlaceholder,
        min = _a.min,
        max = _a.max,
        weekNumber = _a.weekNumber,
        focusedDate = _a.focusedDate,
        className = _a.className,
        width = _a.width,
        name = _a.name,
        validationMessage = _a.validationMessage,
        required = _a.required,
        validityStyles = _a.validityStyles;
    var _b = this.$props.popupSettings,
        popupClass = _b.popupClass,
        animate = _b.animate,
        appendTo = _b.appendTo;
    var show = this.computedShow;
    var value = this.computedValue;
    var sanitizedValue = value && kendo_date_math_1.getDate(value);
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var rootClassName = kendo_vue_common_1.classNames('k-widget k-datepicker', {
      'k-state-invalid': !isValid
    }, className);
    var popupClassNames = kendo_vue_common_1.classNames('k-calendar-container k-group k-reset', popupClass);
    var toggleButton = this.$props.toggleButton ? kendo_vue_common_1.templateRendering.call(this, this.$props.toggleButton, kendo_vue_common_1.getListeners.call(this)) : undefined;
    var toggleButtonDefaultRendering = // @ts-ignore function children
    h(ToggleButton_1.ToggleButton, {
      onMousedown: this.handleIconMouseDown,
      on: this.v3 ? undefined : {
        "mousedown": this.handleIconMouseDown,
        "click": this.handleIconClick
      },
      onClick: this.handleIconClick,
      title: kendo_vue_intl_1.provideLocalizationService(this).toLanguageString(messages_1.toggleCalendar, messages_1.messages[messages_1.toggleCalendar]),
      attrs: this.v3 ? undefined : {
        title: kendo_vue_intl_1.provideLocalizationService(this).toLanguageString(messages_1.toggleCalendar, messages_1.messages[messages_1.toggleCalendar])
      },
      "class": "k-select"
    }, this.v3 ? function () {
      return [h("span", {
        "class": "k-icon k-i-calendar"
      })];
    } : [h("span", {
      "class": "k-icon k-i-calendar"
    })]);
    var toggleButtonRendering = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: toggleButton,
      defaultRendering: toggleButtonDefaultRendering,
      defaultSlots: h("span", {
        "class": "k-icon k-i-calendar"
      }),
      additionalListeners: {
        click: this.handleIconClick
      }
    });
    var dateInput = this.$props.dateInput ? kendo_vue_common_1.templateRendering.call(this, this.$props.dateInput, kendo_vue_common_1.getListeners.call(this)) : undefined;
    var dateInputDefaultRendering = // @ts-ignore
    h(DateInput_1.DateInput, {
      ref: this.v3 ? function (el) {
        _this.dateInputRef = el;
      } : 'dateInput',
      placeholder: this.$props.placeholder,
      attrs: this.v3 ? undefined : {
        placeholder: this.$props.placeholder,
        label: this.$props.label,
        disabled: disabled,
        format: format,
        formatPlaceholder: formatPlaceholder,
        id: id,
        max: max,
        min: min,
        name: name,
        required: required,
        tabIndex: !show ? tabIndex : -1,
        title: title,
        valid: this.validity().valid,
        validationMessage: validationMessage,
        validityStyles: validityStyles,
        value: value
      },
      label: this.$props.label,
      disabled: disabled,
      format: format,
      formatPlaceholder: formatPlaceholder,
      id: id,
      max: max,
      min: min,
      name: name,
      onChange: this.handleInputValueChange,
      on: this.v3 ? undefined : {
        "change": this.handleInputValueChange
      },
      required: required,
      tabIndex: !show ? tabIndex : -1,
      title: title,
      valid: this.validity().valid,
      validationMessage: validationMessage,
      validityStyles: validityStyles,
      value: value
    });
    var dateInputRendering = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: dateInput,
      defaultRendering: dateInputDefaultRendering
    });
    var pickerWrap = this.$props.pickerWrap ? kendo_vue_common_1.templateRendering.call(this, this.$props.pickerWrap, kendo_vue_common_1.getListeners.call(this)) : undefined;
    var pickerWrapDefaultRendering = // @ts-ignore function children
    h(PickerWrap_1.PickerWrap, {
      ref: this.v3 ? function (el) {
        _this.wrapperRef = el;
      } : 'wrapper',
      "class": this.wrapperClassNames
    }, this.v3 ? function () {
      return [dateInputRendering, toggleButtonRendering];
    } : [dateInputRendering, toggleButtonRendering]);
    var pickerWrapRendering = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: pickerWrap,
      defaultRendering: pickerWrapDefaultRendering,
      defaultSlots: [dateInputRendering, toggleButtonRendering]
    });
    var calendar = this.$props.calendar ? kendo_vue_common_1.templateRendering.call(this, this.$props.calendar, kendo_vue_common_1.getListeners.call(this)) : undefined;
    var calendarDefaultRendering = // @ts-ignore
    h(Calendar_1.Calendar, {
      ref: this.v3 ? function (el) {
        _this.calendarRef = el;
      } : 'calendar',
      onKeydown: this.handleKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.handleKeyDown,
        "focus": this.calendarFocus,
        "blur": this.calendarBlur,
        "change": this.handleCalendarValueChange
      },
      onFocus: this.calendarFocus,
      onBlur: this.calendarBlur,
      disabled: disabled,
      attrs: this.v3 ? undefined : {
        disabled: disabled,
        value: sanitizedValue,
        min: min,
        max: max,
        weekNumber: weekNumber,
        focusedDate: focusedDate
      },
      value: sanitizedValue,
      min: min,
      max: max,
      weekNumber: weekNumber,
      focusedDate: focusedDate,
      onChange: this.handleCalendarValueChange
    });
    var calendarRendering = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: calendar,
      defaultRendering: calendarDefaultRendering
    });
    var popup = this.$props.popup ? kendo_vue_common_1.templateRendering.call(this, this.$props.popup, kendo_vue_common_1.getListeners.call(this)) : undefined;
    var popupDefaultRendering = // @ts-ignore function children
    h(kendo_vue_popup_1.Popup, {
      show: show,
      attrs: this.v3 ? undefined : {
        show: show,
        anchor: this._anchor,
        id: this._popupId,
        anchorAlign: {
          horizontal: 'left',
          vertical: 'bottom'
        },
        popupAlign: {
          horizontal: 'left',
          vertical: 'top'
        },
        animate: animate,
        appendTo: appendTo
      },
      anchor: this._anchor,
      "class": popupClassNames,
      id: this._popupId,
      anchorAlign: {
        horizontal: 'left',
        vertical: 'bottom'
      },
      popupAlign: {
        horizontal: 'left',
        vertical: 'top'
      },
      animate: animate,
      appendTo: appendTo
    }, this.v3 ? function () {
      return [calendarRendering];
    } : [calendarRendering]);
    var popupRendering = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: popup,
      defaultRendering: popupDefaultRendering,
      defaultSlots: calendarRendering
    });
    return h("span", {
      ref: this.v3 ? function (el) {
        _this.kendoAnchorRef = el;
      } : this._anchor,
      role: "group",
      attrs: this.v3 ? undefined : {
        role: "group",
        "aria-expanded": this.computedShow
      },
      "aria-expanded": this.computedShow,
      "class": rootClassName,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.handleKeyDown,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur
    }, [pickerWrapRendering, popupRendering]);
  }
};
exports.DatePicker = DatePicker;