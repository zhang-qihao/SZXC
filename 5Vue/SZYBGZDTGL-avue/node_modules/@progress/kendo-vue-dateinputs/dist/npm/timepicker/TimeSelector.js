"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeSelector = exports.Direction = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var inject = allVue.inject;

var kendo_date_math_1 = require("@progress/kendo-date-math");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var messages_1 = require("../messages");

var utils_1 = require("../utils");

var utils_2 = require("./utils");

var TimePart_1 = require("./TimePart");
/**
 * @hidden
 */


var Direction;

(function (Direction) {
  Direction[Direction["Left"] = 0] = "Left";
  Direction[Direction["Right"] = 1] = "Right";
})(Direction = exports.Direction || (exports.Direction = {}));

var TimeSelector = {
  name: 'KendoTimeSelector',
  // @ts-ignore
  emits: {
    'change': null,
    'focus': null,
    'blur': null
  },
  props: {
    cancelButton: {
      type: Boolean,
      default: true
    },
    boundRange: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    format: {
      type: String,
      default: function _default() {
        return 't';
      }
    },
    max: {
      type: Date,
      default: function _default() {
        return utils_1.MAX_TIME;
      }
    },
    min: {
      type: Date,
      default: function _default() {
        return utils_1.MIN_TIME;
      }
    },
    nowButton: Boolean,
    steps: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    smoothScroll: {
      type: Boolean,
      default: true
    },
    tabIndex: Number,
    value: {
      type: Date,
      default: function _default() {
        return null;
      }
    }
  },
  created: function created() {
    this.dateFormatParts = this.intl.splitDateFormat(this.$props.format);
    this.mergeValue = utils_2.valueMerger(utils_2.generateGetters(this.dateFormatParts));
    this.hasActiveButton = this.hasActiveButton.bind(this);
    this.currentState = this.$props.value || utils_1.MIDNIGHT_DATE;
    this.currentValue = this.$props.value;
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      currentState: null,
      currentValue: null,
      valueDuringOnChange: undefined
    };
  },
  computed: {
    computedValue: function computedValue() {
      var value = this.valueDuringOnChange !== undefined ? this.valueDuringOnChange : this.$props.value !== null ? this.$props.value : this.currentValue;
      return value !== null ? kendo_date_math_1.cloneDate(value) : null;
    },
    intl: function intl() {
      return kendo_vue_intl_1.provideIntlService(this);
    },
    current: function current() {
      return this.currentState !== null ? kendo_date_math_1.cloneDate(this.currentState) : null;
    }
  },
  mounted: function mounted() {
    this.timePart = this.$refs.timePart;
    this._acceptButton = this.$refs.acceptButton;
    this._cancelButton = this.$refs.cancelButton;
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var kendoIntlService = inject('kendoIntlService', {});
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
        format = _a.format,
        cancelButton = _a.cancelButton,
        disabled = _a.disabled,
        tabIndex = _a.tabIndex,
        smoothScroll = _a.smoothScroll,
        min = _a.min,
        max = _a.max,
        boundRange = _a.boundRange,
        nowButton = _a.nowButton,
        steps = _a.steps;
    var localizationService = kendo_vue_intl_1.provideLocalizationService(this);
    var cancelMessage = localizationService.toLanguageString(messages_1.timePickerCancel, messages_1.messages[messages_1.timePickerCancel]);
    var setMessage = localizationService.toLanguageString(messages_1.timePickerSet, messages_1.messages[messages_1.timePickerSet]);
    return h("div", {
      tabIndex: !disabled ? tabIndex || 0 : undefined,
      attrs: this.v3 ? undefined : {
        tabIndex: !disabled ? tabIndex || 0 : undefined
      },
      "class": kendo_vue_common_1.classNames('k-timeselector k-reset', {
        'k-state-disabled': disabled
      }),
      onKeydown: this.handleKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.handleKeyDown
      }
    }, [// @ts-ignore  function children
    h(TimePart_1.TimePart, {
      ref: 'timePart',
      value: this.current,
      attrs: this.v3 ? undefined : {
        value: this.current,
        format: format,
        smoothScroll: smoothScroll,
        min: min,
        max: max,
        boundRange: boundRange,
        disabled: disabled,
        nowButton: nowButton,
        steps: steps
      },
      onChange: this.handleChange,
      on: this.v3 ? undefined : {
        "change": this.handleChange,
        "nowclick": this.handleNowClick,
        "focus": this.handleFocus,
        "blur": this.handleBlur
      },
      onNowclick: this.handleNowClick,
      format: format,
      smoothScroll: smoothScroll,
      min: min,
      max: max,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      boundRange: boundRange,
      disabled: disabled,
      nowButton: nowButton,
      steps: steps
    }), h("div", {
      "class": "k-time-footer k-action-buttons"
    }, [cancelButton && h("button", {
      ref: 'cancelButton',
      "class": "k-button k-time-cancel",
      onClick: this.handleReject,
      on: this.v3 ? undefined : {
        "click": this.handleReject
      },
      title: cancelMessage,
      attrs: this.v3 ? undefined : {
        title: cancelMessage,
        "aria-label": cancelMessage
      },
      "aria-label": cancelMessage
    }, [cancelMessage]), h("button", {
      ref: 'acceptButton',
      "class": "k-time-accept k-button k-primary",
      onClick: this.handleAccept,
      on: this.v3 ? undefined : {
        "click": this.handleAccept
      },
      title: setMessage,
      attrs: this.v3 ? undefined : {
        title: setMessage,
        "aria-label": setMessage
      },
      "aria-label": setMessage
    }, [setMessage])])]);
  },
  methods: {
    handleBlur: function handleBlur(event) {
      this.$emit('blur', event);
    },
    handleFocus: function handleFocus(event) {
      this.$emit('focus', event);
    },
    focusActiveList: function focusActiveList() {
      if (!this.timePart) {
        return;
      }

      this.timePart.focus({
        preventScroll: true
      });
    },
    hasActiveButton: function hasActiveButton() {
      if (!this._acceptButton) {
        return false;
      }

      return document.activeElement === this._acceptButton || document.activeElement === this._cancelButton;
    },
    handleKeyDown: function handleKeyDown(event) {
      var keyCode = event.keyCode;
      this.$emit('keydown', event);

      switch (keyCode) {
        case kendo_vue_common_1.Keys.enter:
          if (!this.hasActiveButton()) {
            this.handleAccept(event);
          }

          return;

        default:
          return;
      }
    },
    handleAccept: function handleAccept(event) {
      var value = this.mergeValue(kendo_date_math_1.cloneDate(this.computedValue || utils_2.getNow()), this.timePart ? this.timePart.value : this.current);
      this.currentValue = value;
      this.valueDuringOnChange = value;
      this.$emit('change', {
        event: event,
        value: this.computedValue,
        target: this
      });
      this.valueDuringOnChange = undefined;
    },
    handleReject: function handleReject(event) {
      this.currentState = this.computedValue;
      this.$emit('reject', event);
    },
    handleNowClick: function handleNowClick(event) {
      var now = this.mergeValue(kendo_date_math_1.cloneDate(this.computedValue || utils_2.getNow()), utils_2.getNow());
      this.currentState = now;
      this.currentValue = now;
      this.valueDuringOnChange = now;
      this.$emit('change', {
        event: event,
        value: this.computedValue,
        target: this
      });
      this.valueDuringOnChange = undefined;
    },
    handleChange: function handleChange(candidate) {
      this.currentState = candidate;
    }
  }
};
exports.TimeSelector = TimeSelector;