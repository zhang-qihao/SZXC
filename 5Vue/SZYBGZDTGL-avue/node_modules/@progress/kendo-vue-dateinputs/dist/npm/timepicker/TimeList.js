"use strict";

var _a, _b;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeList = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var inject = allVue.inject;

var kendo_date_math_1 = require("@progress/kendo-date-math");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var Virtualization_1 = require("../virtualization/Virtualization");

var models_1 = require("./models");

var services_1 = require("./services");

var utils_1 = require("../utils");

var SCROLL_THRESHOLD = 2; // < 2px threshold

var SNAP_THRESHOLD = 0.05; // % of the item height

var SKIP = 0;
var getters = (_a = {}, _a[kendo_vue_common_1.Keys.end] = function (data, _) {
  return data[data.length - 1];
}, _a[kendo_vue_common_1.Keys.home] = function (data, _) {
  return data[0];
}, _a[kendo_vue_common_1.Keys.up] = function (data, index) {
  return data[index - 1];
}, _a[kendo_vue_common_1.Keys.down] = function (data, index) {
  return data[index + 1];
}, _a);
var services = (_b = {}, _b[models_1.TIME_PART.dayperiod] = services_1.DayPeriodService, _b[models_1.TIME_PART.hour] = services_1.HoursService, _b[models_1.TIME_PART.minute] = services_1.MinutesService, _b[models_1.TIME_PART.second] = services_1.SecondsService, _b);
var TimeList = {
  name: 'KendoTimeList',
  // @ts-ignore
  emits: {
    'change': null,
    'focus': null,
    'blur': null
  },
  props: {
    id: Number,
    boundRange: {
      type: Boolean,
      default: false
    },
    max: {
      type: Date,
      default: function _default() {
        return utils_1.MAX_TIME;
      }
    },
    min: {
      type: Date,
      default: function _default() {
        return utils_1.MIDNIGHT_DATE;
      }
    },
    part: Object,
    step: {
      type: Number,
      default: 1
    },
    value: Date,
    smoothScroll: {
      type: Boolean,
      default: true
    }
  },
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  data: function data() {
    return {
      animateToIndex: false
    };
  },
  created: function created() {
    this.topOffset = undefined;
    this.dom = new services_1.DOMService();
  },
  computed: {
    animate: function animate() {
      return Boolean(this.$props.smoothScroll && this.animateToIndex);
    }
  },
  mounted: function mounted() {
    var _this = this;

    this.virtualization = this.$refs.virtualization; // Async calculation of height to avoid animation cancellation

    Promise.resolve().then(function () {
      if (!_this.$el) {
        return;
      } // @ts-ignore


      _this.dom.calculateHeights(_this.$el);

      _this.$forceUpdate();
    });
  },
  updated: function updated() {
    if (!this.$refs.virtualization) {
      return;
    }

    this.virtualization = this.$refs.virtualization;
    var index = this.service.selectedIndex(this.$props.value);
    this.virtualization[this.animate ? 'animateToIndex' : 'scrollToIndex'](index);
    this.animateToIndex = true;
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var kendoIntlService = inject('kendoIntlService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;

    var h = gh || createElement;

    if (!this.$props.part.type || !services[this.$props.part.type]) {
      return;
    }

    this.calculateHeights();
    this.intl = kendo_vue_intl_1.provideIntlService(this);
    this.service = new services[this.$props.part.type](this.intl);
    this.configureServices();
    var data = this.service.data(this.$props.value);
    var transform = 'translateY(' + this.topOffset + 'px)';
    var total = this.service.total(this.$props.value);

    var list = function list() {
      return h("ul", {
        style: {
          transform: transform,
          msTransform: transform
        },
        "class": "k-reset"
      }, [data.map(function (item, idx) {
        var _this = this;

        return h("li", {
          key: idx,
          "class": "k-item",
          onClick: function onClick() {
            _this.handleChange(item);
          },
          on: this.v3 ? undefined : {
            "click": function onClick() {
              _this.handleChange(item);
            }
          }
        }, [h("span", [item.text])]);
      }, this)]);
    };

    return h("div", {
      "class": "k-time-list",
      id: String(this.$props.id || ''),
      attrs: this.v3 ? undefined : {
        id: String(this.$props.id || ''),
        tabIndex: this.$props.disabled ? -1 : 0
      },
      tabIndex: this.$props.disabled ? -1 : 0,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.handleKeyDown,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur,
        "mouseover": this.handleMouseOver
      },
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur,
      onMouseover: this.handleMouseOver
    }, [this.dom.didCalculate ? // @ts-ignore  function children
    h(Virtualization_1.Virtualization, {
      bottomOffset: this.bottomOffset,
      attrs: this.v3 ? undefined : {
        bottomOffset: this.bottomOffset,
        itemHeight: this.itemHeight,
        maxScrollDifference: this.listHeight,
        role: "presentation",
        skip: SKIP,
        tabIndex: -1,
        take: total,
        topOffset: this.topOffset,
        total: total
      },
      "class": 'k-time-container',
      itemHeight: this.itemHeight,
      maxScrollDifference: this.listHeight,
      onScrollaction: this.handleScrollAction,
      on: this.v3 ? undefined : {
        "scrollaction": this.handleScrollAction
      },
      ref: 'virtualization',
      role: "presentation",
      skip: SKIP,
      tabIndex: -1,
      take: total,
      topOffset: this.topOffset,
      total: total
    }, this.v3 ? function () {
      return [list.call(_this2)];
    } : [list.call(_this2)]) : h("div", {
      "class": "k-time-container"
    }, [list.call(this)])]);
  },
  methods: {
    focus: function focus(args) {
      var _this = this;

      Promise.resolve().then(function () {
        if (!_this.$el) {
          return;
        } // @ts-ignore


        _this.$el.focus(args);
      });
    },
    itemOffset: function itemOffset(scrollTop) {
      if (!this.virtualization) {
        return -1;
      }

      var valueIndex = this.service.selectedIndex(this.$props.value);
      var activeIndex = this.virtualization.activeIndex();
      var offset = this.virtualization.itemOffset(activeIndex);
      var distance = Math.abs(Math.ceil(scrollTop) - offset);

      if (valueIndex === activeIndex && distance < SCROLL_THRESHOLD) {
        return offset;
      }

      var scrollUp = valueIndex > activeIndex;
      var moveToNext = scrollUp && distance >= this.bottomThreshold || !scrollUp && distance > this.topThreshold;
      return moveToNext ? this.virtualization.itemOffset(activeIndex + 1) : offset;
    },
    calculateHeights: function calculateHeights() {
      if (!this.dom.didCalculate) {
        return;
      }

      this.itemHeight = this.dom.itemHeight;
      this.listHeight = this.dom.timeListHeight;
      this.topOffset = (this.listHeight - this.itemHeight) / 2;
      this.bottomOffset = this.listHeight - this.itemHeight;
      this.topThreshold = this.itemHeight * SNAP_THRESHOLD;
      this.bottomThreshold = this.itemHeight * (1 - SNAP_THRESHOLD);
    },
    configureServices: function configureServices(props) {
      var _a = props || this.$props,
          min = _a.min,
          max = _a.max,
          value = _a.value;

      var _b = this.service.limitRange(min || this.$props.min, max || this.$props.max, value || this.$props.value),
          newMin = _b[0],
          newMax = _b[1];

      this.service.configure(this.serviceSettings({
        min: newMin,
        max: newMax
      }));
    },
    serviceSettings: function serviceSettings(settings) {
      var defaults = {
        boundRange: this.$props.boundRange,
        insertUndividedMax: false,
        min: kendo_date_math_1.cloneDate(this.$props.min),
        max: kendo_date_math_1.cloneDate(this.$props.max),
        part: this.$props.part,
        step: this.$props.step
      };
      var result = Object.assign({}, defaults, settings);
      result.boundRange = result.part.type !== 'hour' || this.$props.boundRange;
      return result;
    },
    handleScrollAction: function handleScrollAction(_a) {
      var target = _a.target,
          animationInProgress = _a.animationInProgress;

      if (!this.virtualization) {
        return;
      }

      if (target && !animationInProgress) {
        this.animateToIndex = false;
        var index = this.virtualization.itemIndex(this.itemOffset(target.scrollTop));
        var dataItem = this.service.data(this.$props.value)[index];
        this.handleChange(dataItem);
      }
    },
    handleFocus: function handleFocus(event) {
      this.$emit('focus', event);
    },
    handleBlur: function handleBlur(event) {
      this.$emit('blur', event);
    },
    handleMouseOver: function handleMouseOver() {
      if (!this.$el) {
        return;
      }

      if (document && document.activeElement !== this.$el) {
        // @ts-ignore
        this.$el.focus({
          preventScroll: true
        });
      }
    },
    handleKeyDown: function handleKeyDown(event) {
      var keyCode = event.keyCode;

      if (keyCode === kendo_vue_common_1.Keys.down || keyCode === kendo_vue_common_1.Keys.up || keyCode === kendo_vue_common_1.Keys.end || keyCode === kendo_vue_common_1.Keys.home) {
        event.preventDefault();
      }

      var getter = getters[event.keyCode] || kendo_vue_common_1.noop;
      var dataItem = getter(this.service.data(this.$props.value), this.service.selectedIndex(this.$props.value));

      if (dataItem) {
        this.handleChange(dataItem);
      }
    },
    handleChange: function handleChange(dataItem) {
      var candidate = this.service.apply(this.$props.value, dataItem.value);

      if (this.$props.value.getTime() === candidate.getTime()) {
        return;
      }

      this.currentValue = candidate;
      this.$emit('change', candidate);
    }
  }
};
exports.TimeList = TimeList;