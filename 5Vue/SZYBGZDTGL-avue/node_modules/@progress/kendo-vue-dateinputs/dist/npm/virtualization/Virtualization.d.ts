import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { RowHeightService, ScrollerService, ScrollAction, PageAction } from './services';
/**
 * @hidden
 */
export interface ScrollActionArguments {
    index: number;
    target: HTMLDivElement | null;
    scrollAction?: ScrollAction;
    pageAction?: PageAction;
    animationInProgress: boolean;
}
/**
 * @hidden
 */
export declare enum ScrollDirection {
    Backward = 0,
    Forward = 1
}
/**
 * @hidden
 */
export declare type Direction = 'horizontal' | 'vertical';
/**
 * @hidden
 */
export interface VirtualizationState {
    cancelAnimation: any;
    rowHeightService: RowHeightService;
    scrollerService: ScrollerService;
    scrollContainer: any;
    scrollAction?: ScrollAction;
    pageAction?: PageAction;
    lastDirection: Direction;
    lastTotal?: number;
    lastTake: number;
    animationInProgress: boolean;
}
/**
 * @hidden
 */
export interface VirtualizationData {
}
/**
 * @hidden
 */
export interface VirtualizationMethods {
    activeIndex: () => number;
    itemIndex: (offset: number) => number;
    itemOffset: (index: number) => number;
    isIndexVisible: (index: number) => boolean;
    isListScrolled: (index: number) => boolean;
    scrollTo: (value: number) => void;
    scrollToIndex: (index: number) => void;
    animateToIndex: (index: number) => void;
    scrollToBottom: () => void;
    scrollStep: (start: number, end: number) => number;
    scrollRange: (indexOffset: number, direction: ScrollDirection) => any;
    containerMaxScroll: () => number;
    getContainerScrollDirection: (indexOffset: number) => ScrollDirection;
    initServices: (props?: any) => void;
    getContainerProperty: (propertyName: string) => number;
    handleScroll: (event: any) => void;
    handleScrollAction: (action: ScrollAction) => void;
    handlePageAction: (action: PageAction) => void;
    containerOffsetSize: () => number;
    containerScrollSize: () => number;
    containerScrollPosition: () => number;
}
/**
 * @hidden
 */
export interface VirtualizationComputed {
    element: HTMLDivElement | null;
}
/**
 * @hidden
 */
export interface VirtualizationProps {
    bottomOffset: number;
    direction?: String;
    forceScroll?: boolean;
    itemHeight?: number;
    itemWidth?: number;
    maxScrollDifference?: number;
    scrollOffsetSize?: number;
    scrollDuration?: number;
    skip: number;
    tabIndex?: number;
    take: number;
    topOffset: number;
    total: number;
    role?: string;
}
/**
 * @hidden
 */
export interface VirtualizationAll extends Vue, VirtualizationMethods, VirtualizationData, VirtualizationComputed, VirtualizationState {
}
declare let Virtualization: ComponentOptions<VirtualizationAll, DefaultData<VirtualizationData>, DefaultMethods<VirtualizationAll>, VirtualizationComputed, RecordPropsDefinition<VirtualizationProps>>;
export { Virtualization };
