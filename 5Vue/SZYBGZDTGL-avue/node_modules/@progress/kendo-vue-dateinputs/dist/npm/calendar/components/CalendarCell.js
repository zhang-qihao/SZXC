"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarCell = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;

var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */


var compareProps = function compareProps(x, y) {
  var xProps = Object.getOwnPropertyNames(x);
  var yProps = Object.getOwnPropertyNames(y);

  if (xProps.length !== yProps.length) {
    return false;
  }

  for (var i = 0; i < xProps.length; i++) {
    var propName = xProps[i];

    if (x[propName] !== y[propName]) {
      return false;
    }
  }

  return true;
};
/**
 * The `CalendarCell` component is internally used for rendering the items in the current view. Also be used as a custom `cell` of the [Calendar]({% slug api_dateinputs_native_calendarprops %}#toc-cell).
 *
 * * [Customizing the cells inside the Calendar view]({% slug custom_rendering_calendar_native %}#toc-cells-inside-the-view)
 */


var CalendarCell = {
  name: 'KendoCalendarCell',
  // @ts-ignore
  emits: {
    'click': null,
    'mousedown': null,
    'mouseenter': null,
    'mouseleave': null
  },
  props: {
    isDisabled: Boolean,
    view: Number,
    formattedValue: String,
    id: String,
    isWeekend: Boolean,
    isFocused: Boolean,
    isSelected: Boolean,
    isInRange: Boolean,
    isRangeStart: Boolean,
    isRangeEnd: Boolean,
    isRangeMid: Boolean,
    isRangeSplitEnd: Boolean,
    isRangeSplitStart: Boolean,
    isToday: Boolean,
    title: String,
    value: Date
  },
  // Manually checking if the component needs an update
  // due to date object being compared by instance
  // and new Date object is created
  // every time and fails the shallow compare of the Vue.PureComponent.

  /**
   * @hidden
   */
  updated: function updated() {// const { value, ...props } = this.props;
    // const { value: newValue, ...newProps } = nextProps;
    // const valueEqual = !(value && newValue) || value.getTime() === newValue.getTime();
    // return !(valueEqual && compareProps(props, newProps));
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // tslint:disable:max-line-length

  /**
   * @return
   * Returns a `<td />` element with a `<span class="k-link" />` inside to apply the styles. The text inside is the [`formattedValue`]({% slug api_dateinputs_calendarcellprops %}#toc-formattedvalue) of the `cell`.
   */
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = kendo_vue_common_1.getDefaultSlots(this);
    var _a = this.$props,
        formattedValue = _a.formattedValue,
        isWeekend = _a.isWeekend,
        isFocused = _a.isFocused,
        isInRange = _a.isInRange,
        isSelected = _a.isSelected,
        isRangeStart = _a.isRangeStart,
        isRangeMid = _a.isRangeMid,
        isRangeEnd = _a.isRangeEnd,
        isRangeSplitStart = _a.isRangeSplitStart,
        isRangeSplitEnd = _a.isRangeSplitEnd,
        isToday = _a.isToday,
        isDisabled = _a.isDisabled,
        view = _a.view,
        value = _a.value;
    var isEndActive = this.$props.activeRangeEnd === 'end' && isRangeEnd;
    var isStartActive = this.$props.activeRangeEnd === 'start' && isRangeStart;
    return h("td", {
      id: this.$props.id,
      attrs: this.v3 ? undefined : {
        id: this.$props.id,
        title: this.$props.title
      },
      title: this.$props.title,
      "class": {
        'k-range-end': isRangeEnd,
        'k-range-mid': isRangeMid,
        'k-range-split-end': isRangeSplitEnd,
        'k-range-split-start': isRangeSplitStart,
        'k-range-start': isRangeStart,
        'k-state-active': isStartActive || isEndActive,
        'k-state-focused': isFocused,
        'k-state-selected': isSelected || isRangeStart || isRangeEnd,
        'k-today': isToday,
        'k-weekend': isWeekend,
        'k-state-disabled': isDisabled
      },
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick,
        "mousedown": this.handleMouseDown,
        "mouseenter": this.handleMouseEnter,
        "mouseleave": this.handleMouseLeave
      },
      onMousedown: this.handleMouseDown,
      onMouseenter: this.handleMouseEnter,
      onMouseleave: this.handleMouseLeave
    }, [h("span", {
      "class": "k-link"
    }, [defaultSlot])]);
  },
  // tslint:enable:max-line-length
  methods: {
    handleClick: function handleClick(event) {
      var value = this.$props.value;
      this.$emit('click', value, event);
    },
    handleMouseDown: function handleMouseDown(event) {
      var value = this.$props.value;
      this.$emit('mousedown', value, event);
    },
    handleMouseEnter: function handleMouseEnter() {
      var value = this.$props.value;
      this.$emit('mouseenter', value);
    },
    handleMouseLeave: function handleMouseLeave() {
      var value = this.$props.value;
      this.$emit('mouseleave', value);
    }
  }
};
exports.CalendarCell = CalendarCell;