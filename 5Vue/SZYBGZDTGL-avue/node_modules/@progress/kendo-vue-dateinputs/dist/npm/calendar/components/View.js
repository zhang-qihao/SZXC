"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.View = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var inject = allVue.inject;

var kendo_date_math_1 = require("@progress/kendo-date-math");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var CalendarCell_1 = require("./CalendarCell");

var CalendarWeekCell_1 = require("./CalendarWeekCell");

var models_1 = require("../models");

var utils_1 = require("../../utils");

var services_1 = require("../services");

var View = {
  name: 'KendoView',
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  props: {
    activeRangeEnd: {
      type: String
    },
    activeView: {
      type: Number,
      required: true
    },
    cell: [String, Function, Object],
    cellUID: {
      type: String,
      required: true
    },
    direction: {
      type: String,
      default: 'vertical'
    },
    isActive: {
      type: Boolean,
      default: undefined
    },
    focusedDate: {
      type: Date,
      required: true
    },
    max: {
      type: Date,
      required: true
    },
    min: {
      type: Date,
      required: true
    },
    selectedDate: {
      type: [Date, Array, Object],
      default: function _default() {
        return utils_1.getToday();
      }
    },
    selectionRange: Object,
    showWeekNumbers: {
      type: Boolean,
      default: false
    },
    viewDate: {
      type: Date,
      required: true
    },
    weekCell: [String, Function, Object],
    bus: Object,
    service: Object
  },
  computed: {
    isHorizontal: {
      get: function get() {
        return this.$props.direction === 'horizontal';
      }
    },
    isMonthView: {
      get: function get() {
        return this.$props.activeView === models_1.CalendarViewEnum.month;
      }
    },
    weekNumber: {
      get: function get() {
        return Boolean(this.$props.showWeekNumbers && this.$props.activeView === models_1.CalendarViewEnum.month);
      }
    }
  },
  methods: {
    getWeekNumber: function getWeekNumber(date) {
      if (!this.weekNumber) {
        return null;
      }

      return kendo_date_math_1.weekInYear(date, this._intl.firstDay());
    },
    firstDate: function firstDate(row) {
      var cell = this.firstWeekDateContext(row);
      return cell ? cell.value : null;
    },
    firstWeekDateContext: function firstWeekDateContext(rowCtx) {
      if (!this.weekNumber) {
        return null;
      }

      var idx = 0;
      var ctx = rowCtx[idx];

      while (!ctx && idx < rowCtx.length) {
        ctx = rowCtx[++idx];
      }

      return ctx;
    },
    handleClick: function handleClick(value, event) {
      var args = {
        value: kendo_date_math_1.cloneDate(value),
        target: this,
        event: event
      };
      this.$emit('change', args);
    },
    handleWeekCellClick: function handleWeekCellClick(value, event) {
      var args = {
        value: value,
        event: event
      };
      this.$emit('weekcellclick', args);
    },
    handleMouseDown: function handleMouseDown(value, event) {
      var args = {
        value: kendo_date_math_1.cloneDate(value),
        target: this,
        event: event
      };
      this.$emit('viewmousedown', args);
    },
    handleMouseEnter: function handleMouseEnter(value) {
      this.$emit('cellenter', kendo_date_math_1.cloneDate(value));
    },
    handleMouseLeave: function handleMouseLeave(value) {
      this.$emit('cellleave', kendo_date_math_1.cloneDate(value));
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var kendoIntlService = inject('kendoIntlService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    this._intl = kendo_vue_intl_1.provideIntlService(this);
    this._weekService = new services_1.WeekNamesService(this._intl); // tslint:disable-next-line jsx-use-translation-function

    var emptyCell = function emptyCell(idx) {
      return h("td", {
        key: idx
      }, ["\xA0"]);
    }; //    const weekNames = this._weekService.getWeekNames(this.weekNumber);
    //     const colSpan = this.$props.service.rowLength(this.weekNumber);
    //     const title = this.$props.service.title(this.$props.viewDate);


    var time = utils_1.getToday();
    var focusedDate = this.$props.isActive ? this.$props.focusedDate : null;
    var viewDate = utils_1.setTime(this.$props.viewDate, time);
    var currentData = this.$props.service.data({
      cellUID: this.$props.cellUID,
      min: this.$props.min,
      max: this.$props.max,
      focusedDate: focusedDate,
      isActiveView: !this.$props.bus.canMoveDown(this.$props.activeView),
      selectedDate: this.$props.selectedDate,
      selectionRange: this.$props.selectionRange,
      viewDate: viewDate
    });

    var buildWeekNumber = function buildWeekNumber(row, idx) {
      var firstDayOfWeek = this.firstDate(row);

      if (!firstDayOfWeek) {
        return emptyCell("week-cell-" + idx);
      }

      var weekCellValue = this.getWeekNumber(this.firstDate(row));
      var uniqueID = "kendo-vue-calendar-week-cell-" + weekCellValue;
      var cellDefaultRendering = // @ts-ignore  function children
      h(CalendarWeekCell_1.CalendarWeekCell, {
        "class": 'k-alt',
        value: weekCellValue,
        attrs: this.v3 ? undefined : {
          value: weekCellValue
        },
        onClick: this.handleWeekCellClick,
        on: this.v3 ? undefined : {
          "click": this.handleWeekCellClick
        },
        key: uniqueID
      }, this.v3 ? function () {
        return [weekCellValue];
      } : [weekCellValue]);
      return kendo_vue_common_1.getTemplate.call(this, {
        h: h,
        template: this.$props.weekCell,
        defaultRendering: cellDefaultRendering,
        defaultSlots: weekCellValue,
        additionalListeners: {
          click: this.handleWeekCellClick
        }
      });
    };

    var buildRow = function buildRow(row) {
      return row.map(function (cell, idx) {
        if (!cell) {
          return emptyCell(idx);
        }

        var uniqueID = "kendo-vue-calendar-cell-" + cell.value.getTime();
        var cellDefaultRendering = // @ts-ignore  function children
        h(CalendarCell_1.CalendarCell, {
          "aria-selected": cell.isSelected,
          attrs: this.v3 ? undefined : {
            "aria-selected": cell.isSelected,
            formattedValue: cell.formattedValue,
            id: cell.id,
            isFocused: cell.isFocused,
            isSelected: cell.isSelected,
            isInRange: cell.isInRange,
            isWeekend: cell.isWeekend,
            isRangeStart: cell.isRangeStart,
            isRangeMid: cell.isRangeMid,
            isRangeEnd: cell.isRangeEnd,
            isRangeSplitStart: cell.isRangeSplitStart,
            isRangeSplitEnd: cell.isRangeSplitEnd,
            isToday: cell.isToday,
            title: cell.title,
            value: cell.value,
            isDisabled: !cell.isInRange,
            view: this.$props.activeView
          },
          formattedValue: cell.formattedValue,
          id: cell.id,
          isFocused: cell.isFocused,
          isSelected: cell.isSelected,
          isInRange: cell.isInRange,
          isWeekend: cell.isWeekend,
          isRangeStart: cell.isRangeStart,
          isRangeMid: cell.isRangeMid,
          isRangeEnd: cell.isRangeEnd,
          isRangeSplitStart: cell.isRangeSplitStart,
          isRangeSplitEnd: cell.isRangeSplitEnd,
          isToday: cell.isToday,
          title: cell.title,
          value: cell.value,
          isDisabled: !cell.isInRange,
          view: this.$props.activeView,
          onClick: this.handleClick,
          on: this.v3 ? undefined : {
            "click": this.handleClick,
            "mousedown": this.handleMouseDown,
            "mouseenter": this.handleMouseEnter,
            "mouseleave": this.handleMouseLeave
          },
          onMousedown: this.handleMouseDown,
          onMouseenter: this.handleMouseEnter,
          onMouseleave: this.handleMouseLeave,
          key: uniqueID
        }, this.v3 ? function () {
          return [cell.formattedValue];
        } : [cell.formattedValue]);
        return kendo_vue_common_1.getTemplate.call(this, {
          h: h,
          template: this.$props.cell,
          defaultRendering: cellDefaultRendering,
          defaultSlots: cell.formattedValue,
          additionalListeners: {
            click: this.handleClick
          }
        });
      }, this);
    };

    return h("tbody", {
      role: 'rowgroup',
      attrs: this.v3 ? undefined : {
        role: 'rowgroup'
      }
    }, [currentData.map(function (row, idx) {
      return h("tr", {
        role: "row",
        attrs: this.v3 ? undefined : {
          role: "row"
        },
        key: idx
      }, [this.weekNumber && buildWeekNumber.call(this, row, idx), buildRow.call(this, row)]);
    }, this)]);
  }
};
exports.View = View;