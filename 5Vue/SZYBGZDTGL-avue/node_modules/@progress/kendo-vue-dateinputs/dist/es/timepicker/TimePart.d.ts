import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { DateFormatPart, IntlService, DateFormatOptions } from '@progress/kendo-vue-intl';
import { TimePickerIncrementalSteps } from './models/IncrementalSteps';
/**
 * @hidden
 */
export declare enum Direction {
    Left = 0,
    Right = 1
}
/**
 * @hidden
 */
export interface TimePartChangeEvent {
    event: any;
    value: Date;
    target: any;
}
/**
 * @hidden
 */
export interface TimePartProps {
    disabled?: boolean;
    format?: string | DateFormatOptions;
    max?: Date;
    min?: Date;
    cancelButton?: boolean;
    nowButton?: boolean;
    onChange?: any;
    steps?: TimePickerIncrementalSteps;
    smoothScroll?: boolean;
    tabIndex?: number;
    value?: Date | null;
    boundRange?: boolean;
}
/**
 * @hidden
 */
export interface TimePartState {
    _element: HTMLSpanElement | null;
    _nowButton: any;
    dateFormatParts: DateFormatPart[];
    timeLists: any[];
    snapTime: Function;
}
/**
 * @hidden
 */
export interface TimePartData {
    activeListIndex: number;
}
/**
 * @hidden
 */
export interface TimePartComputed {
    element: HTMLSpanElement | null;
    computedValue: Date;
    intl: IntlService;
    computedMin: Date;
    computedMax: Date;
}
/**
 * @hidden
 */
export interface TimePartMethods {
    focus: (args?: any) => void;
    timeFormatReducer: (acc: string, current: DateFormatPart) => any;
    timeFormatFilter: (part: DateFormatPart, index: number, all: DateFormatPart[]) => boolean;
    hasActiveButton: () => boolean;
    focusList: (dir: Direction) => void;
    listReducer: (state: any, list: any, idx: number, all: any) => void;
    showNowButton: () => boolean;
    hasSteps: () => boolean;
    handleKeyDown: (event: any) => void;
    handleListBlur: () => void;
    handleListFocus: (event: any, idx: number) => void;
    handleChange: (candidate: Date) => void;
    onNowClick: (event: any) => void;
}
/**
 * @hidden
 */
export interface TimePartAll extends Vue, TimePartMethods, TimePartData, TimePartComputed, TimePartState {
}
declare let TimePart: ComponentOptions<TimePartAll, DefaultData<TimePartData>, DefaultMethods<TimePartAll>, TimePartComputed, RecordPropsDefinition<TimePartProps>>;
export { TimePart };
