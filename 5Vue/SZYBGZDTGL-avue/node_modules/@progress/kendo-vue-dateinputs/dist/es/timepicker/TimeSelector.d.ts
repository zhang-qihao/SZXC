import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { DateFormatPart, IntlService, DateFormatOptions } from '@progress/kendo-vue-intl';
import { TimePickerIncrementalSteps } from './models/IncrementalSteps';
/**
 * @hidden
 */
export declare enum Direction {
    Left = 0,
    Right = 1
}
/**
 * @hidden
 */
export interface TimeSelectorChangeEvent {
    event?: any;
    value: Date;
    target: any;
}
/**
 * @hidden
 */
export interface TimeSelectorProps {
    cancelButton?: boolean;
    disabled?: boolean;
    format?: string | DateFormatOptions;
    max?: Date;
    min?: Date;
    nowButton?: boolean;
    onChange?: any;
    onReject?: any;
    steps?: TimePickerIncrementalSteps;
    smoothScroll?: boolean;
    tabIndex?: number;
    value?: Date | null;
    boundRange?: boolean;
}
/**
 * @hidden
 */
export interface TimeSelectorState {
    _cancelButton: any;
    _acceptButton: any;
    dateFormatParts: DateFormatPart[];
    valueDuringOnChange?: Date | null;
    timePart: any;
    mergeValue: Function;
}
/**
 * @hidden
 */
export interface TimeSelectorData {
    currentValue: Date | null;
    currentState: Date | null;
}
/**
 * @hidden
 */
export interface TimeSelectorMethods {
    focusActiveList: () => void;
    hasActiveButton: () => any;
    handleKeyDown: (event: any) => void;
    handleAccept: (event: any) => void;
    handleReject: (event: any) => void;
    handleNowClick: (event: any) => void;
    handleChange: (candidate: Date) => void;
    handleBlur: (event: any) => void;
    handleFocus: (event: any) => void;
}
/**
 * @hidden
 */
export interface TimeSelectorComputed {
    computedValue: Date | null;
    intl: IntlService;
    current: Date | null;
}
/**
 * @hidden
 */
export interface TimeSelectorAll extends Vue, TimeSelectorMethods, TimeSelectorData, TimeSelectorComputed, TimeSelectorState {
}
declare let TimeSelector: ComponentOptions<TimeSelectorAll, DefaultData<TimeSelectorData>, DefaultMethods<TimeSelectorAll>, TimeSelectorComputed, RecordPropsDefinition<TimeSelectorProps>>;
export { TimeSelector };
