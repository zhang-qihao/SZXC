// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var inject = allVue.inject;
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { getDate } from '@progress/kendo-date-math';
import { CalendarHeaderTitle } from './CalendarHeaderTitle';
import { messages, today, prevView, nextView } from '../../messages';
import { Action } from '../models';
import { getToday, isInRange, dateInRange, MAX_DATE } from '../../utils';
import { MIN_DATE } from '../../defaults';
import { classNames, Keys, getTemplate } from '@progress/kendo-vue-common';
/**
 * @hidden
 */

var Header = {
  name: 'KendoHeader',
  inheritAttrs: false,
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  props: {
    activeView: {
      type: Number,
      required: true
    },
    currentDate: {
      type: Date,
      required: true
    },
    focusedDate: {
      type: Date,
      required: true
    },
    headerTitle: {
      type: [String, Object, Function],
      default: function _default() {
        return undefined;
      }
    },
    max: {
      type: Date,
      default: function _default() {
        return MAX_DATE;
      }
    },
    min: {
      type: Date,
      default: function _default() {
        return MIN_DATE;
      }
    },
    bus: Object,
    service: Object,
    rangeLength: {
      type: Number,
      default: 1
    },
    tabIndex: {
      type: Number,
      default: 0
    }
  },
  computed: {
    navigate: {
      get: function get() {
        return this.$props.bus.canMoveUp(this.$props.activeView);
      }
    },
    todayIsInRange: {
      get: function get() {
        return isInRange(getToday(), getDate(this.$props.min), getDate(this.$props.max));
      }
    }
  },
  methods: {
    getTitle: function getTitle() {
      if (!this.$props.currentDate) {
        return '';
      }

      var take = this.$props.rangeLength - 1;
      var title = this.$props.service.title(this.$props.currentDate);
      var nextDate = this.$props.service.addToDate(this.$props.currentDate, take);

      if (take < 1 || !this.$props.service.isInRange(nextDate, this.$props.min, this.$props.max)) {
        return title;
      }

      return title + " - " + this.$props.service.title(nextDate);
    },
    handleTitleClick: function handleTitleClick(event) {
      if (!this.navigate) {
        return;
      }

      this.$props.bus.moveUp(this.$props.activeView, event);
      this.$emit('titleclick', event);
    },
    canNavigate: function canNavigate(action) {
      if (!this.$props.service) {
        return false;
      }

      var candidate = this.$props.service.move(this.$props.focusedDate, action);
      return this.$props.min <= candidate && candidate <= this.$props.max || this.$props.service.isInSameView(candidate, this.$props.min) || this.$props.service.isInSameView(candidate, this.$props.max);
    },
    move: function move(action) {
      return this.clampDate(this.$props.service.move(this.$props.focusedDate, action));
    },
    clampDate: function clampDate(value) {
      return dateInRange(value, this.$props.min, this.$props.max);
    },
    handleNextClick: function handleNextClick(event) {
      var args = {
        event: event,
        value: this.move(Action.NextView),
        target: this
      };
      this.$emit('nextclick', args);
    },
    handlePrevClick: function handlePrevClick(event) {
      var args = {
        event: event,
        value: this.move(Action.PrevView),
        target: this
      };
      this.$emit('prevclick', args);
    },
    handleTodayClick: function handleTodayClick(event) {
      if (!this.todayIsInRange) {
        return;
      }

      this.$props.bus.moveToBottom(this.$props.activeView);
      var args = {
        event: event,
        value: dateInRange(getToday(), this.$props.min, this.$props.max),
        target: this
      };
      this.$emit('todayclick', args);
    },
    todayKeyDown: function todayKeyDown(event) {
      var keyCode = event.keyCode;

      if (keyCode === Keys.enter) {
        this.handleTodayClick(event);
      }
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    this._localization = provideLocalizationService(this);

    var todayMessage = this._localization.toLanguageString(today, messages[today]);

    var title = this.getTitle();

    var prevViewTitle = this._localization.toLanguageString(prevView, messages[prevView]);

    var nextViewTittle = this._localization.toLanguageString(nextView, messages[nextView]);

    var isPrevDisabled = !this.canNavigate(Action.PrevView);
    var isNextDisabled = !this.canNavigate(Action.NextView);
    var titleClassNames = classNames('k-button k-bare k-title', {
      'k-state-disabled': !this.navigate
    });
    var todayClassNames = classNames('k-today', {
      'k-state-disabled': !this.todayIsInRange
    });
    var headerTitle;
    var headerTitleDefaultRendering = // @ts-ignore  function children
    h(CalendarHeaderTitle, {
      value: title,
      attrs: this.v3 ? undefined : {
        value: title,
        view: this.$props.activeView
      },
      view: this.$props.activeView,
      "class": titleClassNames,
      onClick: this.handleTitleClick,
      on: this.v3 ? undefined : {
        "click": this.handleTitleClick
      }
    }, this.v3 ? function () {
      return [title];
    } : [title]);
    headerTitle = getTemplate.call(this, {
      h: h,
      template: this.$props.headerTitle,
      defaultRendering: headerTitleDefaultRendering
    });
    return h("div", {
      "class": "k-calendar-header"
    }, [headerTitle, h("span", {
      "class": 'k-calendar-nav'
    }, [h("button", {
      "class": {
        'k-prev-view k-button k-button-icon': true,
        'k-state-disabled': isPrevDisabled
      },
      tabIndex: this.$props.tabIndex,
      attrs: this.v3 ? undefined : {
        tabIndex: this.$props.tabIndex,
        title: prevViewTitle,
        type: "button",
        "aria-disabled": isPrevDisabled
      },
      title: prevViewTitle,
      type: "button",
      onClick: this.handlePrevClick,
      on: this.v3 ? undefined : {
        "click": this.handlePrevClick
      },
      "aria-disabled": isPrevDisabled
    }, [h("span", {
      "class": "k-icon k-i-arrow-60-left"
    })]), h("span", {
      "class": todayClassNames,
      tabIndex: this.$props.tabIndex,
      attrs: this.v3 ? undefined : {
        tabIndex: this.$props.tabIndex
      },
      onKeydown: this.todayKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.todayKeyDown,
        "click": this.handleTodayClick
      },
      onClick: this.handleTodayClick
    }, [todayMessage]), h("button", {
      "class": {
        'k-next-view k-button k-button-icon': true,
        'k-state-disabled': isNextDisabled
      },
      tabIndex: this.$props.tabIndex,
      attrs: this.v3 ? undefined : {
        tabIndex: this.$props.tabIndex,
        title: nextViewTittle,
        type: "button",
        "aria-disabled": isNextDisabled
      },
      title: nextViewTittle,
      type: "button",
      onClick: this.handleNextClick,
      on: this.v3 ? undefined : {
        "click": this.handleNextClick
      },
      "aria-disabled": isNextDisabled
    }, [h("span", {
      "class": "k-icon k-i-arrow-60-right"
    })])])]);
  }
};
export { Header };