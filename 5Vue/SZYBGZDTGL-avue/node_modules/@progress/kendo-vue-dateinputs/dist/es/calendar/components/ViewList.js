// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var inject = allVue.inject;
import { cloneDate } from '@progress/kendo-date-math';
import { provideIntlService } from '@progress/kendo-vue-intl';
var DEFAULT_FETCH_MONTHS_COUNT = 1; // import { Virtualization, ScrollActionArguments } from '../../virtualization/Virtualization';

import { View } from './View';
import { shiftWeekNames } from '../../utils';
import { CalendarViewEnum } from '../models';
import { classNames } from '@progress/kendo-vue-common';
var VIEWS_COUNT = 5;
var ViewList = {
  name: 'KendoViewList',
  inheritAttrs: false,
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  props: {
    allowReverse: Boolean,
    hasFocusedDate: Boolean,
    activeView: {
      type: Number,
      required: true
    },
    bottomOffset: {
      type: Number
    },
    cell: [String, Function, Object],
    cellUID: {
      type: String,
      required: true
    },
    dates: Array,
    focusedDate: {
      type: Date,
      required: true
    },
    isActive: {
      type: Boolean,
      default: undefined
    },
    max: {
      type: Date,
      required: true
    },
    min: {
      type: Date,
      required: true
    },
    selectionRange: Object,
    showWeekNumbers: {
      type: Boolean,
      default: false
    },
    smoothScroll: {
      type: Boolean,
      default: true
    },
    take: {
      type: Number,
      default: VIEWS_COUNT
    },
    value: {
      type: [Date, Array, Object]
    },
    views: {
      type: Number,
      default: DEFAULT_FETCH_MONTHS_COUNT
    },
    viewHeight: Number,
    viewOffset: Number,
    bus: Object,
    dom: Object,
    weekCell: [String, Function, Object],
    service: Object
  },
  data: function data() {
    return {
      lastViewsCount: 0,
      valueHasUpdated: false
    };
  },
  computed: {
    weekNames: {
      get: function get() {
        this._intl = provideIntlService(this);
        var weekNames = shiftWeekNames(this._intl.dateFormatNames({
          nameType: 'short',
          type: 'days'
        }), this._intl.firstDay());
        return this.weekNumber ? [''].concat(weekNames) : weekNames;
      }
    },
    weekNumber: {
      get: function get() {
        return Boolean(this.$props.showWeekNumbers && this.$props.activeView === CalendarViewEnum.month);
      }
    },
    animate: {
      get: function get() {
        return Boolean(this.$props.smoothScroll && this.animateToIndex);
      }
    }
  },
  created: function created() {
    this.lastView = this.$props.activeView;
    this.lastFocus = this.$props.focusedDate;
    this.animateToIndex = true;
    this.shouldScroll = false; //  this.$data.skip = this.$props.service.skip(this.$props.focusedDate, this.$props.min);
    //  this.$data.index = this.$props.service.skip(this.$props.focusedDate, this.$props.min);
  },
  updated: function updated() {
    this.shouldScroll = false;
    this.lastView = this.$props.activeView;
    this.$data.lastViewsCount = this.$props.views; // this.lastFocus = this.$props.focusedDate;

    this.indexToScroll = undefined;
  },
  methods: {
    handleFocus: function handleFocus(event) {
      this.$emit('listfocus', event);
    },
    handleBlur: function handleBlur(event) {
      this.$emit('listblur', event);
    },
    handleKeyDown: function handleKeyDown(event) {
      this.$emit('listkeydown', event);
    },
    handleVirtualizationMount: function handleVirtualizationMount(_virtualization) {// this.virtualization = virtualization;
      // if (this.virtualization && this.table) {
      //     this.table.style.transform = `translateY(${this.viewOffset}px)`;
      //     const viewDate = dateInRange(this.$props.focusedDate, this.$props.min, this.$props.max);
      //     const indexToScroll = this.$props.service.skip(viewDate, this.$props.min);
      //   //  this.virtualization.scrollToIndex(indexToScroll);
      // }
    },
    calculateHeights: function calculateHeights() {
      if (!this.$props.dom) {
        return;
      }

      var scrollableHeight = this.$props.activeView === CalendarViewEnum.month ? this.$props.dom.scrollableContentHeight : this.$props.dom.scrollableYearContentHeight;
      this._bottomOffset = scrollableHeight - this.$props.dom.viewHeight(this.$props.activeView);
      this._viewOffset = -1 * this.$props.dom.headerHeight;
      this._viewHeight = this.$props.dom.viewHeight(this.$props.activeView) || 1;
    },
    getTake: function getTake(skip, total) {
      return Math.min(total - skip, this.$props.take);
    },
    handleScrollAction: function handleScrollAction() {// const skip = pageAction ? pageAction.skip : this.$data.skip;
      // if (this.$data.index !== index || this.$data.skip !== skip) {
      //     this.$data.index = skip;
      // }
      // if (this.table && scrollAction) {
      //     const translate = `translateY(${scrollAction.offset}px)`;
      //     this.table.style.transform = translate;
      // }
    },
    handleTodayClick: function handleTodayClick(event) {
      this.shouldScroll = true;
      this.handleDateChange(event, true);
    },
    handleMouseDown: function handleMouseDown(event) {
      var args = {
        event: event.event,
        value: cloneDate(event.value),
        target: this
      };
      this.$emit('listmousedown', args);
    },
    handleDateChange: function handleDateChange(event, isTodayClick) {
      if (isTodayClick === void 0) {
        isTodayClick = false;
      }

      var args = {
        event: event.event,
        value: cloneDate(event.value),
        target: this,
        isTodayClick: isTodayClick
      };
      this.$emit('change', args);
    },
    handleWeekCellClick: function handleWeekCellClick(event) {
      this.$emit('weekcellclick', event);
    },
    handleWeekNameClick: function handleWeekNameClick(event, value) {
      var args = {
        value: value,
        event: event
      };
      this.$emit('weeknameclick', args);
    },
    handleCellEnter: function handleCellEnter(event) {
      this.$emit('cellenter', event);
    },
    rotateSelectionRange: function rotateSelectionRange(selectionRange) {
      if (selectionRange.start === null || selectionRange.end === null) {
        return selectionRange;
      }

      var needRotate = selectionRange.end < selectionRange.start;
      return {
        start: needRotate ? selectionRange.end : selectionRange.start,
        end: needRotate ? selectionRange.start : selectionRange.end
      };
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var kendoIntlService = inject('kendoIntlService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService
    };
  },
  mounted: function mounted() {
    this._calendarView = this.$refs.calendarView;
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var selectionRange = this.$props.allowReverse ? this.rotateSelectionRange(this.$props.selectionRange) : this.$props.selectionRange;
    var rootClassNames = classNames('k-calendar-view', {
      'k-calendar-monthview': this.$props.activeView === CalendarViewEnum.month,
      'k-calendar-yearview': this.$props.activeView === CalendarViewEnum.year,
      'k-calendar-decadeview': this.$props.activeView === CalendarViewEnum.decade,
      'k-calendar-centuryview': this.$props.activeView === CalendarViewEnum.century
    });
    var tableClassNames = classNames('k-content', 'k-calendar-content', {
      'k-month': this.$props.activeView === CalendarViewEnum.month,
      'k-year': this.$props.activeView === CalendarViewEnum.year,
      'k-decade': this.$props.activeView === CalendarViewEnum.decade,
      'k-century': this.$props.activeView === CalendarViewEnum.century
    });

    var buildMonthView = function buildMonthView(weekNames) {
      var that = this;
      return h("thead", [h("tr", {
        "class": 'k-calendar-weekdays'
      }, [weekNames.map(function (name, idx) {
        return h("th", {
          key: idx,
          onClick: function onClick(ev) {
            return that.handleWeekNameClick(ev, name);
          },
          on: this.v3 ? undefined : {
            "click": function onClick(ev) {
              return that.handleWeekNameClick(ev, name);
            }
          }
        }, [name]);
      }, this)])]);
    };

    var buildDates = function buildDates() {
      var cellUID = this.$props.cellUID;
      return this.$props.dates.map(function (vDate) {
        return h("table", {
          role: "grid",
          attrs: this.v3 ? undefined : {
            role: "grid",
            "aria-label": this.$props.service.title(this.$props.focusedDate),
            "aria-live": 'polite',
            "aria-activedescendant": cellUID + this.$props.focusedDate.getTime(),
            tabIndex: this.$attrs.tabIndex
          },
          "aria-label": this.$props.service.title(this.$props.focusedDate),
          "aria-live": 'polite',
          "aria-activedescendant": cellUID + this.$props.focusedDate.getTime(),
          tabIndex: this.$attrs.tabIndex,
          "class": tableClassNames,
          onKeydown: this.handleKeyDown,
          on: this.v3 ? undefined : {
            "keydown": this.handleKeyDown
          }
        }, [this.$props.activeView === CalendarViewEnum.month && buildMonthView.call(this, this.weekNames), // @ts-ignore function children
        h(View, {
          key: vDate.getTime(),
          activeView: this.$props.activeView,
          attrs: this.v3 ? undefined : {
            activeView: this.$props.activeView,
            viewDate: vDate,
            min: this.$props.min,
            max: this.$props.max,
            cellUID: cellUID,
            isActive: this.$props.isActive,
            focusedDate: this.$props.focusedDate,
            cell: this.$props.cell,
            selectionRange: selectionRange,
            selectedDate: this.$props.value,
            showWeekNumbers: this.weekNumber,
            bus: this.$props.bus,
            service: this.$props.service,
            weekCell: this.$props.weekCell
          },
          viewDate: vDate,
          min: this.$props.min,
          max: this.$props.max,
          cellUID: cellUID,
          isActive: this.$props.isActive,
          focusedDate: this.$props.focusedDate,
          cell: this.$props.cell,
          selectionRange: selectionRange,
          selectedDate: this.$props.value,
          showWeekNumbers: this.weekNumber,
          onChange: this.handleDateChange,
          on: this.v3 ? undefined : {
            "change": this.handleDateChange,
            "weekcellclick": this.handleWeekCellClick,
            "cellenter": this.handleCellEnter,
            "viewmousedown": this.handleMouseDown
          },
          onWeekcellclick: this.handleWeekCellClick,
          onCellenter: this.handleCellEnter,
          onViewmousedown: this.handleMouseDown,
          bus: this.$props.bus,
          service: this.$props.service,
          weekCell: this.$props.weekCell
        })]);
      }, this);
    };

    return h("div", {
      "class": rootClassNames,
      onFocusin: this.handleFocus,
      on: this.v3 ? undefined : {
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusout: this.handleBlur
    }, [buildDates.call(this)]);
  }
};
export { ViewList };