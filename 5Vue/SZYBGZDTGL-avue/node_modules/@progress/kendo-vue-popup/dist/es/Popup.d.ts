import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { VNode } from 'vue';
import { Position } from './models/Position';
import { PopupProps } from './models/PopupProps';
import { AlignService } from './services/alignService';
import { DOMService } from './services/domService';
import { PositionService } from './services/positionService';
/**
 * @hidden
 */
export interface PropsWithChildren extends PopupProps {
    children?: VNode;
}
/**
 * @hidden
 */
export interface PopupMethods {
    onOpened: () => void;
    onClosing: () => void;
    onClosed: () => void;
    transitionDuration: () => any;
    getParentRef: (anchor: string) => any;
    position: (settings: PopupProps, element: HTMLElement, anchor: string) => Position;
    calculatePosition: ($props: any, appendToElement?: HTMLElement) => Position;
    attachRepositionHandlers: (element: any) => void;
    detachRepositionHandlers: () => void;
    reposition: () => void;
}
/**
 * @hidden
 */
export interface PopupState {
    mountedAppendTo: any;
    mountedAnchor: any;
    _parentElement: any;
    _alignService: AlignService;
    _positionService: PositionService;
    _domService: DOMService;
    _flipped: boolean;
    _offsetTop: number;
    _offsetLeft: number;
    _scrollableParents: Array<HTMLElement> | undefined;
    _exitingAnimation: boolean | undefined;
    _prevShow?: boolean;
    v3: boolean;
}
/**
 * @hidden
 */
export interface PopupAll extends PopupMethods, PopupState, Vue {
}
/**
 * Represents the default `Animation` component.
 */
declare let Popup: ComponentOptions<Vue, DefaultData<{}>, DefaultMethods<PopupAll>, {}, RecordPropsDefinition<PopupProps>>;
export { Popup };
