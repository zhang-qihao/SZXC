<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
    <!--&lt;!&ndash; 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射&ndash;&gt;-->

    <tx:annotation-driven transaction-manager="transactionManager"/>


    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManagerName" value="java:jboss/TransactionManager"/>
    </bean>



    <bean id="conversionService"  class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
            </set>
        </property>
    </bean>
    <mvc:annotation-driven conversion-service="conversionService"/>



    <bean id="fastJsonConfig" class="com.alibaba.fastjson.support.config.FastJsonConfig">
        <property name="charset" value="UTF-8" />
        <!--<property name="dateFormat" value="yyyy-MM-dd" />-->
        <property name="serializerFeatures">
            <list>
                <value>WriteDateUseDateFormat</value>
                <value>WriteNullStringAsEmpty</value>
                <!--DisableCheckSpecialChar——一个对象的字符串属性中如果有特殊字符如双引号，将会在转成json时带有反斜杠转移符。如果不需要转义，可以使用这个属性。默认为false-->
                <!--QuoteFieldNames——输出key时是否使用双引号,默认为true -->
                <!--WriteMapNullValue——是否输出值为null的字段,默认为false -->
                <!--WriteNullNumberAsZero——数值字段如果为null,输出为0,而非null -->
                <!--WriteNullListAsEmpty——List字段如果为null,输出为[],而非null -->
                <!--WriteNullStringAsEmpty——字符类型字段如果为null,输出为”“,而非null -->
                <!--WriteNullBooleanAsFalse——Boolean字段如果为null,输出为false,而非null-->
            </list>
        </property>
    </bean>
    <!-- 返回json 方法一 需要导入 fastjson.jar包 -->
    <mvc:annotation-driven >
        <mvc:message-converters register-defaults="true">
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4">
                <!-- MediaTypes -->
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>text/xml;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/json;charset=UTF-8</value>
                    </list>
                </property>
                <!-- FastJsonConfig -->
                <property name="fastJsonConfig" ref="fastJsonConfig" />
            </bean>
            <!--&lt;!&ndash; 避免IE执行AJAX时,返回JSON出现下载文件 &ndash;&gt;-->
            <!--<bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">-->
                <!--<property name="supportedMediaTypes">-->
                    <!--<list>-->
                        <!--&lt;!&ndash; 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 &ndash;&gt;-->
                        <!--<value>text/html;charset=UTF-8</value>-->
                        <!--<value>text/json;charset=UTF-8</value>-->
                        <!--<value>application/json;charset=UTF-8</value>-->
                    <!--</list>-->
                <!--</property>-->
                <!--&lt;!&ndash;-->
                <!--QuoteFieldNames-输出key时是否使用双引号,默认为true-->
                <!--WriteMapNullValue-是否输出值为null的字段,默认为false-->
                <!--WriteNullNumberAsZero-数值字段如果为null,输出为0,而非null-->
                <!--WriteNullListAsEmpty-List字段如果为null,输出为[],而非null-->
                <!--WriteNullStringAsEmpty-字符类型字段如果为null,输出为"",而非null-->
                <!--WriteNullBooleanAsFalse-Boolean字段如果为null,输出为false,而非null-->
                <!--&ndash;&gt;-->
                <!--<property name="features">-->
                    <!--<list>-->
                        <!--&lt;!&ndash; 输出key时是否使用双引号 &ndash;&gt;-->
                        <!--<value>QuoteFieldNames</value>-->
                        <!--&lt;!&ndash; 是否输出值为null的字段 &ndash;&gt;-->
                        <!--&lt;!&ndash; <value>WriteMapNullValue</value> &ndash;&gt;-->
                        <!--&lt;!&ndash; 数值字段如果为null,输出为0,而非null &ndash;&gt;-->
                        <!--&lt;!&ndash;<value>WriteNullNumberAsZero</value>&ndash;&gt;-->
                        <!--&lt;!&ndash; List字段如果为null,输出为[],而非null &ndash;&gt;-->
                        <!--&lt;!&ndash;<value>WriteNullListAsEmpty</value>&ndash;&gt;-->
                        <!--&lt;!&ndash; 字符类型字段如果为null,输出为"",而非null &ndash;&gt;-->
                        <!--&lt;!&ndash;<value>WriteNullStringAsEmpty</value>&ndash;&gt;-->
                        <!--&lt;!&ndash; Boolean字段如果为null,输出为false,而非null &ndash;&gt;-->
                        <!--&lt;!&ndash;<value>WriteNullBooleanAsFalse</value>&ndash;&gt;-->
                        <!--&lt;!&ndash; null String不输出  &ndash;&gt;-->
                        <!--&lt;!&ndash;<value>WriteNullStringAsEmpty</value>&ndash;&gt;-->
                        <!--&lt;!&ndash; null String也要输出  &ndash;&gt;-->
                        <!--&lt;!&ndash; <value>WriteMapNullValue</value> &ndash;&gt;-->

                        <!--&lt;!&ndash; Date的日期转换器 &ndash;&gt;-->
                        <!--<value>WriteDateUseDateFormat</value>-->
                    <!--</list>-->
                <!--</property>-->
            <!--</bean>-->
        </mvc:message-converters>
    </mvc:annotation-driven>


    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
            <mvc:mapping path="/**" />
            <!--<mvc:mapping path="/user/**" />-->
            <!--<mvc:mapping path="/test/**" />-->
            <bean class="com.eframework.web.mvc.interceptor.CommonInterceptor"></bean>
        </mvc:interceptor>
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
    </mvc:interceptors>



    <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
    <context:component-scan base-package="com.eframework" />
    <context:component-scan base-package="com.xfinsoft" />


    <!--&lt;!&ndash; 配置处理静态资源的请求 &ndash;&gt;-->
    <!--<mvc:resources location="/resources/" mapping="*/res/**"/>-->

    <!-- 统一错误处理 -->
    <bean id="exceptionHandler" class="com.eframework.web.mvc.resolver.ExceptionResolver"/>

    <!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/" p:suffix=".jsp" />

    <!-- 上传 需要使用到的配置-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="1046666000"/>
    </bean>
</beans>